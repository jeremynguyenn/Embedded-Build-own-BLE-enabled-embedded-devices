
5_multiple_characterisitics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062dc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006910  08006910  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006918  08006918  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  20000088  080069a8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  080069a8  00020824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027967  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ad3  00000000  00000000  00047a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  0004b4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001390  00000000  00000000  0004c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5d6  00000000  00000000  0004dd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e01  00000000  00000000  0006831e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094d04  00000000  00000000  0008011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00114e23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f08  00000000  00000000  00114e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800645c 	.word	0x0800645c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	0800645c 	.word	0x0800645c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80004e4:	2006      	movs	r0, #6
 80004e6:	f001 fa52 	bl	800198e <HAL_NVIC_EnableIRQ>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}

080004ee <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80004f2:	2006      	movs	r0, #6
 80004f4:	f001 fa59 	bl	80019aa <HAL_NVIC_DisableIRQ>
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	4b20      	ldr	r3, [pc, #128]	; (800058c <HCI_TL_SPI_Init+0x90>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	4a1f      	ldr	r2, [pc, #124]	; (800058c <HCI_TL_SPI_Init+0x90>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6313      	str	r3, [r2, #48]	; 0x30
 8000514:	4b1d      	ldr	r3, [pc, #116]	; (800058c <HCI_TL_SPI_Init+0x90>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000520:	2301      	movs	r3, #1
 8000522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000524:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	4619      	mov	r1, r3
 8000534:	4816      	ldr	r0, [pc, #88]	; (8000590 <HCI_TL_SPI_Init+0x94>)
 8000536:	f001 faa5 	bl	8001a84 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800053a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800053e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	4619      	mov	r1, r3
 8000552:	480f      	ldr	r0, [pc, #60]	; (8000590 <HCI_TL_SPI_Init+0x94>)
 8000554:	f001 fa96 	bl	8001a84 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000558:	2302      	movs	r3, #2
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <HCI_TL_SPI_Init+0x94>)
 8000570:	f001 fa88 	bl	8001a84 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2102      	movs	r1, #2
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <HCI_TL_SPI_Init+0x94>)
 800057a:	f001 fd03 	bl	8001f84 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 800057e:	f000 fa33 	bl	80009e8 <BSP_SPI1_Init>
 8000582:	4603      	mov	r3, r0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40023800 	.word	0x40023800
 8000590:	40020000 	.word	0x40020000

08000594 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000598:	2101      	movs	r1, #1
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <HCI_TL_SPI_DeInit+0x24>)
 800059c:	f001 fbf6 	bl	8001d8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80005a0:	2102      	movs	r1, #2
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <HCI_TL_SPI_DeInit+0x24>)
 80005a4:	f001 fbf2 	bl	8001d8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80005a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <HCI_TL_SPI_DeInit+0x24>)
 80005ae:	f001 fbed 	bl	8001d8c <HAL_GPIO_DeInit>
  return 0;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40020000 	.word	0x40020000

080005bc <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2102      	movs	r1, #2
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <HCI_TL_SPI_Reset+0x38>)
 80005c6:	f001 fcdd 	bl	8001f84 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <HCI_TL_SPI_Reset+0x38>)
 80005d2:	f001 fcd7 	bl	8001f84 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005d6:	2005      	movs	r0, #5
 80005d8:	f001 f89a 	bl	8001710 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e2:	4804      	ldr	r0, [pc, #16]	; (80005f4 <HCI_TL_SPI_Reset+0x38>)
 80005e4:	f001 fcce 	bl	8001f84 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005e8:	2005      	movs	r0, #5
 80005ea:	f001 f891 	bl	8001710 <HAL_Delay>
  return 0;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40020000 	.word	0x40020000

080005f8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8000608:	2300      	movs	r3, #0
 800060a:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800060c:	4a30      	ldr	r2, [pc, #192]	; (80006d0 <HCI_TL_SPI_Receive+0xd8>)
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000616:	6018      	str	r0, [r3, #0]
 8000618:	3304      	adds	r3, #4
 800061a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 800061c:	f7ff ff67 	bl	80004ee <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2102      	movs	r1, #2
 8000624:	482b      	ldr	r0, [pc, #172]	; (80006d4 <HCI_TL_SPI_Receive+0xdc>)
 8000626:	f001 fcad 	bl	8001f84 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800062a:	f107 0108 	add.w	r1, r7, #8
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	2205      	movs	r2, #5
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fa07 	bl	8000a48 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 800063a:	7b3b      	ldrb	r3, [r7, #12]
 800063c:	021b      	lsls	r3, r3, #8
 800063e:	b21a      	sxth	r2, r3
 8000640:	7afb      	ldrb	r3, [r7, #11]
 8000642:	b21b      	sxth	r3, r3
 8000644:	4313      	orrs	r3, r2
 8000646:	b21b      	sxth	r3, r3
 8000648:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 800064a:	8bfb      	ldrh	r3, [r7, #30]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d01e      	beq.n	800068e <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8000650:	8bfa      	ldrh	r2, [r7, #30]
 8000652:	887b      	ldrh	r3, [r7, #2]
 8000654:	429a      	cmp	r2, r3
 8000656:	d901      	bls.n	800065c <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 8000658:	887b      	ldrh	r3, [r7, #2]
 800065a:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 800065c:	2300      	movs	r3, #0
 800065e:	777b      	strb	r3, [r7, #29]
 8000660:	e010      	b.n	8000684 <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8000662:	f107 0116 	add.w	r1, r7, #22
 8000666:	f107 0317 	add.w	r3, r7, #23
 800066a:	2201      	movs	r2, #1
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f9eb 	bl	8000a48 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8000672:	7f7b      	ldrb	r3, [r7, #29]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	7dba      	ldrb	r2, [r7, #22]
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 800067e:	7f7b      	ldrb	r3, [r7, #29]
 8000680:	3301      	adds	r3, #1
 8000682:	777b      	strb	r3, [r7, #29]
 8000684:	7f7b      	ldrb	r3, [r7, #29]
 8000686:	b29b      	uxth	r3, r3
 8000688:	8bfa      	ldrh	r2, [r7, #30]
 800068a:	429a      	cmp	r2, r3
 800068c:	d8e9      	bhi.n	8000662 <HCI_TL_SPI_Receive+0x6a>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 800068e:	f001 f833 	bl	80016f8 <HAL_GetTick>
 8000692:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000694:	e006      	b.n	80006a4 <HCI_TL_SPI_Receive+0xac>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8000696:	2101      	movs	r1, #1
 8000698:	480e      	ldr	r0, [pc, #56]	; (80006d4 <HCI_TL_SPI_Receive+0xdc>)
 800069a:	f001 fc5b 	bl	8001f54 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d008      	beq.n	80006b6 <HCI_TL_SPI_Receive+0xbe>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80006a4:	f001 f828 	bl	80016f8 <HAL_GetTick>
 80006a8:	4602      	mov	r2, r0
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006b2:	d3f0      	bcc.n	8000696 <HCI_TL_SPI_Receive+0x9e>
 80006b4:	e000      	b.n	80006b8 <HCI_TL_SPI_Receive+0xc0>
      break;
 80006b6:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80006b8:	f7ff ff12 	bl	80004e0 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2102      	movs	r1, #2
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <HCI_TL_SPI_Receive+0xdc>)
 80006c2:	f001 fc5f 	bl	8001f84 <HAL_GPIO_WritePin>

  return len;
 80006c6:	7f7b      	ldrb	r3, [r7, #29]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	08006474 	.word	0x08006474
 80006d4:	40020000 	.word	0x40020000

080006d8 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80006e4:	4a3f      	ldr	r2, [pc, #252]	; (80007e4 <HCI_TL_SPI_Send+0x10c>)
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ee:	6018      	str	r0, [r3, #0]
 80006f0:	3304      	adds	r3, #4
 80006f2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80006f4:	f001 f800 	bl	80016f8 <HAL_GetTick>
 80006f8:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80006fa:	f7ff fef8 	bl	80004ee <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 80006fe:	f000 fffb 	bl	80016f8 <HAL_GetTick>
 8000702:	61f8      	str	r0, [r7, #28]

    result = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2102      	movs	r1, #2
 800070c:	4836      	ldr	r0, [pc, #216]	; (80007e8 <HCI_TL_SPI_Send+0x110>)
 800070e:	f001 fc39 	bl	8001f84 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8000712:	e00a      	b.n	800072a <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8000714:	f000 fff0 	bl	80016f8 <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	2b0f      	cmp	r3, #15
 8000720:	d903      	bls.n	800072a <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 8000722:	f06f 0302 	mvn.w	r3, #2
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8000728:	e004      	b.n	8000734 <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 800072a:	f000 f861 	bl	80007f0 <IsDataAvailable>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d0ef      	beq.n	8000714 <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	f113 0f03 	cmn.w	r3, #3
 800073a:	d105      	bne.n	8000748 <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	2102      	movs	r1, #2
 8000740:	4829      	ldr	r0, [pc, #164]	; (80007e8 <HCI_TL_SPI_Send+0x110>)
 8000742:	f001 fc1f 	bl	8001f84 <HAL_GPIO_WritePin>
      break;
 8000746:	e030      	b.n	80007aa <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000748:	f107 010c 	add.w	r1, r7, #12
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2205      	movs	r2, #5
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f978 	bl	8000a48 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8000758:	7bbb      	ldrb	r3, [r7, #14]
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	b21a      	sxth	r2, r3
 800075e:	7b7b      	ldrb	r3, [r7, #13]
 8000760:	b21b      	sxth	r3, r3
 8000762:	4313      	orrs	r3, r2
 8000764:	b21b      	sxth	r3, r3
 8000766:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8000768:	8b7a      	ldrh	r2, [r7, #26]
 800076a:	887b      	ldrh	r3, [r7, #2]
 800076c:	429a      	cmp	r2, r3
 800076e:	d306      	bcc.n	800077e <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000770:	887b      	ldrh	r3, [r7, #2]
 8000772:	461a      	mov	r2, r3
 8000774:	491d      	ldr	r1, [pc, #116]	; (80007ec <HCI_TL_SPI_Send+0x114>)
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f000 f966 	bl	8000a48 <BSP_SPI1_SendRecv>
 800077c:	e002      	b.n	8000784 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 800077e:	f06f 0301 	mvn.w	r3, #1
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2102      	movs	r1, #2
 8000788:	4817      	ldr	r0, [pc, #92]	; (80007e8 <HCI_TL_SPI_Send+0x110>)
 800078a:	f001 fbfb 	bl	8001f84 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800078e:	f000 ffb3 	bl	80016f8 <HAL_GetTick>
 8000792:	4602      	mov	r2, r0
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	2b0f      	cmp	r3, #15
 800079a:	d903      	bls.n	80007a4 <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 800079c:	f06f 0302 	mvn.w	r3, #2
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80007a2:	e002      	b.n	80007aa <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 80007a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	dba9      	blt.n	80006fe <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 80007aa:	f000 ffa5 	bl	80016f8 <HAL_GetTick>
 80007ae:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80007b0:	e006      	b.n	80007c0 <HCI_TL_SPI_Send+0xe8>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80007b2:	2101      	movs	r1, #1
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <HCI_TL_SPI_Send+0x110>)
 80007b6:	f001 fbcd 	bl	8001f54 <HAL_GPIO_ReadPin>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d008      	beq.n	80007d2 <HCI_TL_SPI_Send+0xfa>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80007c0:	f000 ff9a 	bl	80016f8 <HAL_GetTick>
 80007c4:	4602      	mov	r2, r0
 80007c6:	6a3b      	ldr	r3, [r7, #32]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007ce:	d3f0      	bcc.n	80007b2 <HCI_TL_SPI_Send+0xda>
 80007d0:	e000      	b.n	80007d4 <HCI_TL_SPI_Send+0xfc>
      break;
 80007d2:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80007d4:	f7ff fe84 	bl	80004e0 <HCI_TL_SPI_Enable_IRQ>

  return result;
 80007d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	0800647c 	.word	0x0800647c
 80007e8:	40020000 	.word	0x40020000
 80007ec:	200000a4 	.word	0x200000a4

080007f0 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80007f4:	2101      	movs	r1, #1
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <IsDataAvailable+0x1c>)
 80007f8:	f001 fbac 	bl	8001f54 <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	bf0c      	ite	eq
 8000802:	2301      	moveq	r3, #1
 8000804:	2300      	movne	r3, #0
 8000806:	b2db      	uxtb	r3, r3
}
 8000808:	4618      	mov	r0, r3
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40020000 	.word	0x40020000

08000810 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <hci_tl_lowlevel_init+0x54>)
 8000818:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <hci_tl_lowlevel_init+0x58>)
 800081c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <hci_tl_lowlevel_init+0x5c>)
 8000820:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <hci_tl_lowlevel_init+0x60>)
 8000824:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <hci_tl_lowlevel_init+0x64>)
 8000828:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <hci_tl_lowlevel_init+0x68>)
 800082c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f004 fe43 	bl	80054bc <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000836:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 800083a:	4810      	ldr	r0, [pc, #64]	; (800087c <hci_tl_lowlevel_init+0x6c>)
 800083c:	f001 f8e9 	bl	8001a12 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000840:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <hci_tl_lowlevel_init+0x70>)
 8000842:	2100      	movs	r1, #0
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <hci_tl_lowlevel_init+0x6c>)
 8000846:	f001 f8ca 	bl	80019de <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2006      	movs	r0, #6
 8000850:	f001 f881 	bl	8001956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000854:	2006      	movs	r0, #6
 8000856:	f001 f89a 	bl	800198e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800085a:	bf00      	nop
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	080004fd 	.word	0x080004fd
 8000868:	08000595 	.word	0x08000595
 800086c:	080006d9 	.word	0x080006d9
 8000870:	080005f9 	.word	0x080005f9
 8000874:	080005bd 	.word	0x080005bd
 8000878:	08000a89 	.word	0x08000a89
 800087c:	20000750 	.word	0x20000750
 8000880:	08000885 	.word	0x08000885

08000884 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000888:	e005      	b.n	8000896 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800088a:	2000      	movs	r0, #0
 800088c:	f004 ff7c 	bl	8005788 <hci_notify_asynch_evt>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d105      	bne.n	80008a2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8000896:	f7ff ffab 	bl	80007f0 <IsDataAvailable>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f4      	bne.n	800088a <hci_tl_lowlevel_isr+0x6>
 80008a0:	e000      	b.n	80008a4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80008a2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <bluenrg_init>:

uint8_t btn_state;


void bluenrg_init(void)
	{
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af02      	add	r7, sp, #8
	const char *name ="Trix";
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <bluenrg_init+0xd4>)
 80008b0:	617b      	str	r3, [r7, #20]
	tBleStatus ret;
	uint8_t bdaddre[bdaddre_size];
	BLUENRG_memcpy(bdaddre,SERVER_BDARR,sizeof(SERVER_BDARR));
 80008b2:	4a33      	ldr	r2, [pc, #204]	; (8000980 <bluenrg_init+0xd8>)
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008bc:	6018      	str	r0, [r3, #0]
 80008be:	3304      	adds	r3, #4
 80008c0:	8019      	strh	r1, [r3, #0]
	 * 5.Initialize GAP service
	 * 6.Update characteristics
	 * 7.Add custom service
	 * */
	/*1.*/
	hci_init(APP_UserEvtRx,0);
 80008c2:	2100      	movs	r1, #0
 80008c4:	482f      	ldr	r0, [pc, #188]	; (8000984 <bluenrg_init+0xdc>)
 80008c6:	f004 fdb7 	bl	8005438 <hci_init>
	hci_reset();
 80008ca:	f004 f86f 	bl	80049ac <hci_reset>
	HAL_Delay(100);
 80008ce:	2064      	movs	r0, #100	; 0x64
 80008d0:	f000 ff1e 	bl	8001710 <HAL_Delay>
	ret=aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,CONFIG_DATA_PUBADDR_LEN, bdaddre);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	461a      	mov	r2, r3
 80008da:	2106      	movs	r1, #6
 80008dc:	2000      	movs	r0, #0
 80008de:	f004 fca1 	bl	8005224 <aci_hal_write_config_data>
 80008e2:	4603      	mov	r3, r0
 80008e4:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_hal_write_config_data failed \r\n");}
 80008e6:	7cfb      	ldrb	r3, [r7, #19]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <bluenrg_init+0x4a>
 80008ec:	4826      	ldr	r0, [pc, #152]	; (8000988 <bluenrg_init+0xe0>)
 80008ee:	f005 f95d 	bl	8005bac <puts>
	ret=aci_gatt_init();
 80008f2:	f004 f9f4 	bl	8004cde <aci_gatt_init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_init failed \r\n");}
 80008fa:	7cfb      	ldrb	r3, [r7, #19]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <bluenrg_init+0x5e>
 8000900:	4822      	ldr	r0, [pc, #136]	; (800098c <bluenrg_init+0xe4>)
 8000902:	f005 f953 	bl	8005bac <puts>
	ret=aci_gap_init(GAP_PERIPHERAL_ROLE,0,0x07,&service_handle,&dev_name_char_handle,&appearance_char_handle);
 8000906:	f107 020a 	add.w	r2, r7, #10
 800090a:	1dbb      	adds	r3, r7, #6
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	4613      	mov	r3, r2
 8000916:	2207      	movs	r2, #7
 8000918:	2100      	movs	r1, #0
 800091a:	2001      	movs	r0, #1
 800091c:	f004 f954 	bl	8004bc8 <aci_gap_init>
 8000920:	4603      	mov	r3, r0
 8000922:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gap_init failed \r\n");}
 8000924:	7cfb      	ldrb	r3, [r7, #19]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d002      	beq.n	8000930 <bluenrg_init+0x88>
 800092a:	4819      	ldr	r0, [pc, #100]	; (8000990 <bluenrg_init+0xe8>)
 800092c:	f005 f93e 	bl	8005bac <puts>
	ret=aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t*)name);
 8000930:	897c      	ldrh	r4, [r7, #10]
 8000932:	893d      	ldrh	r5, [r7, #8]
 8000934:	6978      	ldr	r0, [r7, #20]
 8000936:	f7ff fc4f 	bl	80001d8 <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	b2da      	uxtb	r2, r3
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	4613      	mov	r3, r2
 8000944:	2200      	movs	r2, #0
 8000946:	4629      	mov	r1, r5
 8000948:	4620      	mov	r0, r4
 800094a:	f004 fb8b 	bl	8005064 <aci_gatt_update_char_value>
 800094e:	4603      	mov	r3, r0
 8000950:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_update_char_value failed \r\n");}
 8000952:	7cfb      	ldrb	r3, [r7, #19]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <bluenrg_init+0xb6>
 8000958:	480e      	ldr	r0, [pc, #56]	; (8000994 <bluenrg_init+0xec>)
 800095a:	f005 f927 	bl	8005bac <puts>
	//add custom service
	ret = add_services();
 800095e:	f000 fa91 	bl	8000e84 <add_services>
 8000962:	4603      	mov	r3, r0
 8000964:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("add_simple_service failed \r\n");}
 8000966:	7cfb      	ldrb	r3, [r7, #19]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <bluenrg_init+0xca>
 800096c:	480a      	ldr	r0, [pc, #40]	; (8000998 <bluenrg_init+0xf0>)
 800096e:	f005 f91d 	bl	8005bac <puts>
	}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bdb0      	pop	{r4, r5, r7, pc}
 800097a:	bf00      	nop
 800097c:	08006484 	.word	0x08006484
 8000980:	20000000 	.word	0x20000000
 8000984:	08001225 	.word	0x08001225
 8000988:	0800648c 	.word	0x0800648c
 800098c:	080064b0 	.word	0x080064b0
 8000990:	080064c8 	.word	0x080064c8
 8000994:	080064e0 	.word	0x080064e0
 8000998:	08006504 	.word	0x08006504

0800099c <bluenrg_process>:

void bluenrg_process(void)
		{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
 80009a0:	af08      	add	r7, sp, #32
			tBleStatus ret;
			uint8_t local_name[]={AD_TYPE_COMPLETE_LOCAL_NAME,'B','L','E','-','G','-','U','P'};
 80009a2:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <bluenrg_process+0x48>)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80009a8:	c303      	stmia	r3!, {r0, r1}
 80009aa:	701a      	strb	r2, [r3, #0]
			ret=aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR,
 80009ac:	2300      	movs	r3, #0
 80009ae:	9306      	str	r3, [sp, #24]
 80009b0:	2300      	movs	r3, #0
 80009b2:	9305      	str	r3, [sp, #20]
 80009b4:	2300      	movs	r3, #0
 80009b6:	9304      	str	r3, [sp, #16]
 80009b8:	2300      	movs	r3, #0
 80009ba:	9303      	str	r3, [sp, #12]
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	9302      	str	r3, [sp, #8]
 80009c0:	2309      	movs	r3, #9
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	2300      	movs	r3, #0
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2300      	movs	r3, #0
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2000      	movs	r0, #0
 80009d0:	f004 f815 	bl	80049fe <aci_gap_set_discoverable>
 80009d4:	4603      	mov	r3, r0
 80009d6:	73fb      	strb	r3, [r7, #15]

			//if(ret !=BLE_STATUS_SUCCESS){printf("aci_gap_set_discoverable failed \r\n");}

			//process user events

			hci_user_evt_proc();
 80009d8:	f004 feaa 	bl	8005730 <hci_user_evt_proc>


		}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	08006520 	.word	0x08006520

080009e8 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <BSP_SPI1_Init+0x54>)
 80009f4:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <BSP_SPI1_Init+0x58>)
 80009f6:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <BSP_SPI1_Init+0x5c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	1c5a      	adds	r2, r3, #1
 80009fe:	4911      	ldr	r1, [pc, #68]	; (8000a44 <BSP_SPI1_Init+0x5c>)
 8000a00:	600a      	str	r2, [r1, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d114      	bne.n	8000a30 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <BSP_SPI1_Init+0x54>)
 8000a08:	f002 f9a3 	bl	8002d52 <HAL_SPI_GetState>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10e      	bne.n	8000a30 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8000a12:	480a      	ldr	r0, [pc, #40]	; (8000a3c <BSP_SPI1_Init+0x54>)
 8000a14:	f000 f87c 	bl	8000b10 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d108      	bne.n	8000a30 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <BSP_SPI1_Init+0x54>)
 8000a20:	f000 f83a 	bl	8000a98 <MX_SPI1_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d002      	beq.n	8000a30 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000a2a:	f06f 0307 	mvn.w	r3, #7
 8000a2e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000a30:	687b      	ldr	r3, [r7, #4]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000758 	.word	0x20000758
 8000a40:	40013000 	.word	0x40013000
 8000a44:	200001a4 	.word	0x200001a4

08000a48 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af02      	add	r7, sp, #8
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	4613      	mov	r3, r2
 8000a54:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a60:	9200      	str	r2, [sp, #0]
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	68f9      	ldr	r1, [r7, #12]
 8000a66:	4807      	ldr	r0, [pc, #28]	; (8000a84 <BSP_SPI1_SendRecv+0x3c>)
 8000a68:	f001 ffd1 	bl	8002a0e <HAL_SPI_TransmitReceive>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000a72:	f06f 0305 	mvn.w	r3, #5
 8000a76:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8000a78:	697b      	ldr	r3, [r7, #20]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000758 	.word	0x20000758

08000a88 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000a8c:	f000 fe34 	bl	80016f8 <HAL_GetTick>
 8000a90:	4603      	mov	r3, r0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <MX_SPI1_Init+0x74>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab0:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad0:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2228      	movs	r2, #40	; 0x28
 8000ad6:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	220a      	movs	r2, #10
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f001 fef9 	bl	80028e8 <HAL_SPI_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40013000 	.word	0x40013000

08000b10 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <SPI1_MspInit+0xc4>)
 8000b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b20:	4a2c      	ldr	r2, [pc, #176]	; (8000bd4 <SPI1_MspInit+0xc4>)
 8000b22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b26:	6453      	str	r3, [r2, #68]	; 0x44
 8000b28:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <SPI1_MspInit+0xc4>)
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <SPI1_MspInit+0xc4>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a25      	ldr	r2, [pc, #148]	; (8000bd4 <SPI1_MspInit+0xc4>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
 8000b44:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <SPI1_MspInit+0xc4>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <SPI1_MspInit+0xc4>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <SPI1_MspInit+0xc4>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <SPI1_MspInit+0xc4>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000b6c:	2340      	movs	r3, #64	; 0x40
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <SPI1_MspInit+0xc8>)
 8000b88:	f000 ff7c 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000b9c:	2305      	movs	r3, #5
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <SPI1_MspInit+0xc8>)
 8000ba8:	f000 ff6c 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000bac:	2308      	movs	r3, #8
 8000bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000bbc:	2305      	movs	r3, #5
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <SPI1_MspInit+0xcc>)
 8000bc8:	f000 ff5c 	bl	8001a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40020400 	.word	0x40020400

08000be0 <__io_putchar>:
/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int __io_putchar (int ch)
	{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR&0x0080)){
 8000be8:	bf00      	nop
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <__io_putchar+0x2c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0f9      	beq.n	8000bea <__io_putchar+0xa>
	}
	USART2->DR=(ch);
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <__io_putchar+0x2c>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6053      	str	r3, [r2, #4]
	//HAL_UART_Transmit(&huart2,((uint8_t *)ch),1,100);
	return ch;
 8000bfc:	687b      	ldr	r3, [r7, #4]
	}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40004400 	.word	0x40004400

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c14:	f000 fd0a 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c18:	f000 f80e 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1c:	f000 f89e 	bl	8000d5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c20:	f000 f872 	bl	8000d08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
printf("Hello from stm32\r\n");
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <main+0x24>)
 8000c26:	f004 ffc1 	bl	8005bac <puts>
bluenrg_init();
 8000c2a:	f7ff fe3d 	bl	80008a8 <bluenrg_init>

	  /*
	     * process BLE
	     *
	     * */
	  bluenrg_process();
 8000c2e:	f7ff feb5 	bl	800099c <bluenrg_process>
 8000c32:	e7fc      	b.n	8000c2e <main+0x1e>
 8000c34:	0800652c 	.word	0x0800652c

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b094      	sub	sp, #80	; 0x50
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	2230      	movs	r2, #48	; 0x30
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f004 ff3a 	bl	8005ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <SystemClock_Config+0xc8>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a26      	ldr	r2, [pc, #152]	; (8000d00 <SystemClock_Config+0xc8>)
 8000c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <SystemClock_Config+0xc8>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <SystemClock_Config+0xcc>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a20      	ldr	r2, [pc, #128]	; (8000d04 <SystemClock_Config+0xcc>)
 8000c82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <SystemClock_Config+0xcc>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c94:	2301      	movs	r3, #1
 8000c96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000cac:	2340      	movs	r3, #64	; 0x40
 8000cae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb8:	f107 0320 	add.w	r3, r7, #32
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 f99f 	bl	8002000 <HAL_RCC_OscConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cc8:	f000 f8d6 	bl	8000e78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ccc:	230f      	movs	r3, #15
 8000cce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 fc01 	bl	80024f0 <HAL_RCC_ClockConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cf4:	f000 f8c0 	bl	8000e78 <Error_Handler>
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	3750      	adds	r7, #80	; 0x50
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40007000 	.word	0x40007000

08000d08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <MX_USART2_UART_Init+0x50>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d40:	f002 f8e0 	bl	8002f04 <HAL_UART_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d4a:	f000 f895 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200007b0 	.word	0x200007b0
 8000d58:	40004400 	.word	0x40004400

08000d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <MX_GPIO_Init+0x110>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a3c      	ldr	r2, [pc, #240]	; (8000e6c <MX_GPIO_Init+0x110>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <MX_GPIO_Init+0x110>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <MX_GPIO_Init+0x110>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a35      	ldr	r2, [pc, #212]	; (8000e6c <MX_GPIO_Init+0x110>)
 8000d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <MX_GPIO_Init+0x110>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <MX_GPIO_Init+0x110>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a2e      	ldr	r2, [pc, #184]	; (8000e6c <MX_GPIO_Init+0x110>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <MX_GPIO_Init+0x110>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <MX_GPIO_Init+0x110>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a27      	ldr	r2, [pc, #156]	; (8000e6c <MX_GPIO_Init+0x110>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <MX_GPIO_Init+0x110>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LED_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000de8:	4821      	ldr	r0, [pc, #132]	; (8000e70 <MX_GPIO_Init+0x114>)
 8000dea:	f001 f8cb 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	481b      	ldr	r0, [pc, #108]	; (8000e74 <MX_GPIO_Init+0x118>)
 8000e06:	f000 fe3d 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4814      	ldr	r0, [pc, #80]	; (8000e70 <MX_GPIO_Init+0x114>)
 8000e20:	f000 fe30 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LED_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LED_Pin|GPIO_PIN_8;
 8000e24:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_GPIO_Init+0x114>)
 8000e3e:	f000 fe21 	bl	8001a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2006      	movs	r0, #6
 8000e48:	f000 fd85 	bl	8001956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e4c:	2006      	movs	r0, #6
 8000e4e:	f000 fd9e 	bl	800198e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	2028      	movs	r0, #40	; 0x28
 8000e58:	f000 fd7d 	bl	8001956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e5c:	2028      	movs	r0, #40	; 0x28
 8000e5e:	f000 fd96 	bl	800198e <HAL_NVIC_EnableIRQ>

}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40020800 	.word	0x40020800

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <Error_Handler+0x8>
	...

08000e84 <add_services>:




tBleStatus add_services(void)
	{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b09f      	sub	sp, #124	; 0x7c
 8000e88:	af06      	add	r7, sp, #24
	Service_UUID_t health_service_uuid,weather_service_uuid;
	Char_UUID_t bpm_char_uuid,weight_char_uuid,temp_char_uuid,hum_char_uuid;


	BLUENRG_memcpy(health_service_uuid.Service_UUID_128,HEALTH_SERVICE_UUID,16);
 8000e8a:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <add_services+0x118>)
 8000e8c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BLUENRG_memcpy(weather_service_uuid.Service_UUID_128,HWEATHER_SERVICE_UUID,16);
 8000e96:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <add_services+0x11c>)
 8000e98:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000e9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BLUENRG_memcpy(temp_char_uuid.Char_UUID_128,TEMP_CHAR_UUID,16);
 8000ea2:	4b40      	ldr	r3, [pc, #256]	; (8000fa4 <add_services+0x120>)
 8000ea4:	f107 0410 	add.w	r4, r7, #16
 8000ea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BLUENRG_memcpy(hum_char_uuid.Char_UUID_128,HUM_CHAR_UUID,16);
 8000eae:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <add_services+0x124>)
 8000eb0:	463c      	mov	r4, r7
 8000eb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BLUENRG_memcpy(bpm_char_uuid.Char_UUID_128,BPM_CHAR_UUID,16);
 8000eb8:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <add_services+0x128>)
 8000eba:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000ebe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BLUENRG_memcpy(weight_char_uuid.Char_UUID_128,WEIGHT_CHAR_UUID,16);
 8000ec4:	4b3a      	ldr	r3, [pc, #232]	; (8000fb0 <add_services+0x12c>)
 8000ec6:	f107 0420 	add.w	r4, r7, #32
 8000eca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ecc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	aci_gatt_add_service(UUID_TYPE_128, &health_service_uuid, PRIMARY_SERVICE, 7, &health_service_handle);
 8000ed0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000ed4:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <add_services+0x130>)
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2307      	movs	r3, #7
 8000eda:	2201      	movs	r2, #1
 8000edc:	2002      	movs	r0, #2
 8000ede:	f003 ff28 	bl	8004d32 <aci_gatt_add_service>
	aci_gatt_add_service(UUID_TYPE_128, &weather_service_uuid, PRIMARY_SERVICE, 7, &weather_service_handle);
 8000ee2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000ee6:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <add_services+0x134>)
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2307      	movs	r3, #7
 8000eec:	2201      	movs	r2, #1
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f003 ff1f 	bl	8004d32 <aci_gatt_add_service>


	aci_gatt_add_char(health_service_handle,UUID_TYPE_128,&bpm_char_uuid,2,CHAR_PROP_READ,ATTR_PERMISSION_NONE,GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,0,0,&bpm_char_handle);
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <add_services+0x130>)
 8000ef6:	8818      	ldrh	r0, [r3, #0]
 8000ef8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000efc:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <add_services+0x138>)
 8000efe:	9305      	str	r3, [sp, #20]
 8000f00:	2300      	movs	r3, #0
 8000f02:	9304      	str	r3, [sp, #16]
 8000f04:	2300      	movs	r3, #0
 8000f06:	9303      	str	r3, [sp, #12]
 8000f08:	2304      	movs	r3, #4
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	2302      	movs	r3, #2
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2302      	movs	r3, #2
 8000f16:	2102      	movs	r1, #2
 8000f18:	f003 ffba 	bl	8004e90 <aci_gatt_add_char>
	aci_gatt_add_char(health_service_handle,UUID_TYPE_128,&weight_char_uuid,2,CHAR_PROP_READ,ATTR_PERMISSION_NONE,GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,0,0,&weight_char_handle);
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <add_services+0x130>)
 8000f1e:	8818      	ldrh	r0, [r3, #0]
 8000f20:	f107 0220 	add.w	r2, r7, #32
 8000f24:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <add_services+0x13c>)
 8000f26:	9305      	str	r3, [sp, #20]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	9304      	str	r3, [sp, #16]
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	2304      	movs	r3, #4
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	2300      	movs	r3, #0
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	2302      	movs	r3, #2
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	2102      	movs	r1, #2
 8000f40:	f003 ffa6 	bl	8004e90 <aci_gatt_add_char>
	aci_gatt_add_char(weather_service_handle,UUID_TYPE_128,&temp_char_uuid,2,CHAR_PROP_READ,ATTR_PERMISSION_NONE,GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,0,0,&temp_char_handle);
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <add_services+0x134>)
 8000f46:	8818      	ldrh	r0, [r3, #0]
 8000f48:	f107 0210 	add.w	r2, r7, #16
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <add_services+0x140>)
 8000f4e:	9305      	str	r3, [sp, #20]
 8000f50:	2300      	movs	r3, #0
 8000f52:	9304      	str	r3, [sp, #16]
 8000f54:	2300      	movs	r3, #0
 8000f56:	9303      	str	r3, [sp, #12]
 8000f58:	2304      	movs	r3, #4
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	2302      	movs	r3, #2
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2302      	movs	r3, #2
 8000f66:	2102      	movs	r1, #2
 8000f68:	f003 ff92 	bl	8004e90 <aci_gatt_add_char>
	aci_gatt_add_char(weather_service_handle,UUID_TYPE_128,&hum_char_uuid,2,CHAR_PROP_READ,ATTR_PERMISSION_NONE,GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,0,0,&hum_char_handle);
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <add_services+0x134>)
 8000f6e:	8818      	ldrh	r0, [r3, #0]
 8000f70:	463a      	mov	r2, r7
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <add_services+0x144>)
 8000f74:	9305      	str	r3, [sp, #20]
 8000f76:	2300      	movs	r3, #0
 8000f78:	9304      	str	r3, [sp, #16]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9303      	str	r3, [sp, #12]
 8000f7e:	2304      	movs	r3, #4
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	2300      	movs	r3, #0
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	2302      	movs	r3, #2
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	f003 ff7f 	bl	8004e90 <aci_gatt_add_char>

	return 0;
 8000f92:	2300      	movs	r3, #0
	}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3764      	adds	r7, #100	; 0x64
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	08006654 	.word	0x08006654
 8000fa0:	08006684 	.word	0x08006684
 8000fa4:	08006694 	.word	0x08006694
 8000fa8:	080066a4 	.word	0x080066a4
 8000fac:	08006664 	.word	0x08006664
 8000fb0:	08006674 	.word	0x08006674
 8000fb4:	200007f4 	.word	0x200007f4
 8000fb8:	200007fe 	.word	0x200007fe
 8000fbc:	200007fa 	.word	0x200007fa
 8000fc0:	200007f8 	.word	0x200007f8
 8000fc4:	200007fc 	.word	0x200007fc
 8000fc8:	200007f6 	.word	0x200007f6

08000fcc <update_bpm>:



void update_bpm(int16_t new_data)
	{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
	tBleStatus ret;
	/*Update characteristics value*/
	ret=aci_gatt_update_char_value(health_service_handle, bpm_char_handle, 0, 2, (uint8_t *)&new_data);
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <update_bpm+0x38>)
 8000fd8:	8818      	ldrh	r0, [r3, #0]
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <update_bpm+0x3c>)
 8000fdc:	8819      	ldrh	r1, [r3, #0]
 8000fde:	1dbb      	adds	r3, r7, #6
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f004 f83d 	bl	8005064 <aci_gatt_update_char_value>
 8000fea:	4603      	mov	r3, r0
 8000fec:	73fb      	strb	r3, [r7, #15]
	if(ret !=BLE_STATUS_SUCCESS){printf("bpm chatacteristics update failed  failed \r\n");}
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <update_bpm+0x2e>
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <update_bpm+0x40>)
 8000ff6:	f004 fdd9 	bl	8005bac <puts>

	}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200007f4 	.word	0x200007f4
 8001008:	200007fa 	.word	0x200007fa
 800100c:	08006540 	.word	0x08006540

08001010 <update_weight>:

void update_weight(int16_t new_data)
	{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af02      	add	r7, sp, #8
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
	tBleStatus ret;
	/*Update characteristics value*/
	ret=aci_gatt_update_char_value(health_service_handle, weight_char_handle, 0, 2, (uint8_t *)&new_data);
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <update_weight+0x38>)
 800101c:	8818      	ldrh	r0, [r3, #0]
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <update_weight+0x3c>)
 8001020:	8819      	ldrh	r1, [r3, #0]
 8001022:	1dbb      	adds	r3, r7, #6
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2302      	movs	r3, #2
 8001028:	2200      	movs	r2, #0
 800102a:	f004 f81b 	bl	8005064 <aci_gatt_update_char_value>
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]
	if(ret !=BLE_STATUS_SUCCESS){printf("weight chatacteristics update failed  failed \r\n");}
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <update_weight+0x2e>
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <update_weight+0x40>)
 800103a:	f004 fdb7 	bl	8005bac <puts>

	}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200007f4 	.word	0x200007f4
 800104c:	200007f8 	.word	0x200007f8
 8001050:	0800656c 	.word	0x0800656c

08001054 <update_temp>:

void update_temp(int16_t new_data)
	{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af02      	add	r7, sp, #8
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
	tBleStatus ret;
	/*Update characteristics value*/
	ret=aci_gatt_update_char_value(weather_service_handle, temp_char_handle, 0, 2, (uint8_t *)&new_data);
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <update_temp+0x38>)
 8001060:	8818      	ldrh	r0, [r3, #0]
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <update_temp+0x3c>)
 8001064:	8819      	ldrh	r1, [r3, #0]
 8001066:	1dbb      	adds	r3, r7, #6
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2302      	movs	r3, #2
 800106c:	2200      	movs	r2, #0
 800106e:	f003 fff9 	bl	8005064 <aci_gatt_update_char_value>
 8001072:	4603      	mov	r3, r0
 8001074:	73fb      	strb	r3, [r7, #15]
	if(ret !=BLE_STATUS_SUCCESS){printf("temp chatacteristics update failed  failed \r\n");}
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <update_temp+0x2e>
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <update_temp+0x40>)
 800107e:	f004 fd95 	bl	8005bac <puts>

	}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200007fe 	.word	0x200007fe
 8001090:	200007fc 	.word	0x200007fc
 8001094:	0800659c 	.word	0x0800659c

08001098 <update_hum>:

void update_hum(int16_t new_data)
	{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af02      	add	r7, sp, #8
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
	tBleStatus ret;
	/*Update characteristics value*/
	ret=aci_gatt_update_char_value(weather_service_handle, hum_char_handle, 0, 2, (uint8_t *)&new_data);
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <update_hum+0x38>)
 80010a4:	8818      	ldrh	r0, [r3, #0]
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <update_hum+0x3c>)
 80010a8:	8819      	ldrh	r1, [r3, #0]
 80010aa:	1dbb      	adds	r3, r7, #6
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2302      	movs	r3, #2
 80010b0:	2200      	movs	r2, #0
 80010b2:	f003 ffd7 	bl	8005064 <aci_gatt_update_char_value>
 80010b6:	4603      	mov	r3, r0
 80010b8:	73fb      	strb	r3, [r7, #15]
	if(ret !=BLE_STATUS_SUCCESS){printf("hum chatacteristics update failed  failed \r\n");}
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <update_hum+0x2e>
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <update_hum+0x40>)
 80010c2:	f004 fd73 	bl	8005bac <puts>

	}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200007fe 	.word	0x200007fe
 80010d4:	200007f6 	.word	0x200007f6
 80010d8:	080065cc 	.word	0x080065cc

080010dc <Read_Request_CB>:
int temp=20;
int hum=80;


void Read_Request_CB(uint16_t handle)
	{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]


	if(handle==(bpm_char_handle+1))
 80010e6:	88fa      	ldrh	r2, [r7, #6]
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <Read_Request_CB+0x9c>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d108      	bne.n	8001104 <Read_Request_CB+0x28>
		{
		printf("BPM request\r\n");
 80010f2:	4822      	ldr	r0, [pc, #136]	; (800117c <Read_Request_CB+0xa0>)
 80010f4:	f004 fd5a 	bl	8005bac <puts>
		update_bpm(bpm);
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <Read_Request_CB+0xa4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff64 	bl	8000fcc <update_bpm>
		}

	if(handle==(weight_char_handle+1))
 8001104:	88fa      	ldrh	r2, [r7, #6]
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <Read_Request_CB+0xa8>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	429a      	cmp	r2, r3
 800110e:	d108      	bne.n	8001122 <Read_Request_CB+0x46>
			{
			printf("weight request\r\n");
 8001110:	481d      	ldr	r0, [pc, #116]	; (8001188 <Read_Request_CB+0xac>)
 8001112:	f004 fd4b 	bl	8005bac <puts>
			update_weight(weight);
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <Read_Request_CB+0xb0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff77 	bl	8001010 <update_weight>
			}
	if(handle==(temp_char_handle+1))
 8001122:	88fa      	ldrh	r2, [r7, #6]
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <Read_Request_CB+0xb4>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	429a      	cmp	r2, r3
 800112c:	d108      	bne.n	8001140 <Read_Request_CB+0x64>
			{
			printf("temp request\r\n");
 800112e:	4819      	ldr	r0, [pc, #100]	; (8001194 <Read_Request_CB+0xb8>)
 8001130:	f004 fd3c 	bl	8005bac <puts>
			update_temp(temp);
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <Read_Request_CB+0xbc>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff8a 	bl	8001054 <update_temp>
			}
	if(handle==(hum_char_handle+1))
 8001140:	88fa      	ldrh	r2, [r7, #6]
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <Read_Request_CB+0xc0>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	429a      	cmp	r2, r3
 800114a:	d108      	bne.n	800115e <Read_Request_CB+0x82>
			{
			printf("hum request\r\n");
 800114c:	4814      	ldr	r0, [pc, #80]	; (80011a0 <Read_Request_CB+0xc4>)
 800114e:	f004 fd2d 	bl	8005bac <puts>
			update_hum(hum);
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <Read_Request_CB+0xc8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	b21b      	sxth	r3, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff9d 	bl	8001098 <update_hum>
			}



	if(connection_handle !=0)
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <Read_Request_CB+0xcc>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d004      	beq.n	8001170 <Read_Request_CB+0x94>
		{
		aci_gatt_allow_read(connection_handle);
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <Read_Request_CB+0xcc>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f004 f808 	bl	8005180 <aci_gatt_allow_read>
		}
	}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200007fa 	.word	0x200007fa
 800117c:	080065f8 	.word	0x080065f8
 8001180:	20000008 	.word	0x20000008
 8001184:	200007f8 	.word	0x200007f8
 8001188:	08006608 	.word	0x08006608
 800118c:	2000000c 	.word	0x2000000c
 8001190:	200007fc 	.word	0x200007fc
 8001194:	08006618 	.word	0x08006618
 8001198:	20000010 	.word	0x20000010
 800119c:	200007f6 	.word	0x200007f6
 80011a0:	08006628 	.word	0x08006628
 80011a4:	20000014 	.word	0x20000014
 80011a8:	200001aa 	.word	0x200001aa

080011ac <aci_gatt_read_permit_req_event>:

void aci_gatt_read_permit_req_event(uint16_t Connection_Hanlde,
									uint16_t Atrribute_Handle,
									uint16_t Offset
									)
	{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
 80011b6:	460b      	mov	r3, r1
 80011b8:	80bb      	strh	r3, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	807b      	strh	r3, [r7, #2]
	Read_Request_CB(Atrribute_Handle);
 80011be:	88bb      	ldrh	r3, [r7, #4]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff8b 	bl	80010dc <Read_Request_CB>
	}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <hci_le_connection_complete_event>:
									uint16_t Conn_Latency,
									uint16_t Supervision_Timeout,
									uint8_t Master_Clock_Accuracy
									)

	{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4604      	mov	r4, r0
 80011d8:	4608      	mov	r0, r1
 80011da:	4611      	mov	r1, r2
 80011dc:	461a      	mov	r2, r3
 80011de:	4623      	mov	r3, r4
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	4603      	mov	r3, r0
 80011e4:	80bb      	strh	r3, [r7, #4]
 80011e6:	460b      	mov	r3, r1
 80011e8:	71bb      	strb	r3, [r7, #6]
 80011ea:	4613      	mov	r3, r2
 80011ec:	70fb      	strb	r3, [r7, #3]
	connected=1;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <hci_le_connection_complete_event+0x44>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
	connection_handle=Connection_Handle;
 80011f4:	4a08      	ldr	r2, [pc, #32]	; (8001218 <hci_le_connection_complete_event+0x48>)
 80011f6:	88bb      	ldrh	r3, [r7, #4]
 80011f8:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2120      	movs	r1, #32
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <hci_le_connection_complete_event+0x4c>)
 8001200:	f000 fec0 	bl	8001f84 <HAL_GPIO_WritePin>
	printf("Connected \r\n");
 8001204:	4806      	ldr	r0, [pc, #24]	; (8001220 <hci_le_connection_complete_event+0x50>)
 8001206:	f004 fcd1 	bl	8005bac <puts>
	}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bd90      	pop	{r4, r7, pc}
 8001212:	bf00      	nop
 8001214:	200001a8 	.word	0x200001a8
 8001218:	200001aa 	.word	0x200001aa
 800121c:	40020000 	.word	0x40020000
 8001220:	08006638 	.word	0x08006638

08001224 <APP_UserEvtRx>:
	printf("Disconnected \r\n");
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}

void APP_UserEvtRx(void *pData)
	{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	hci_spi_pckt *hci_pckt =(hci_spi_pckt *)pData;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	61bb      	str	r3, [r7, #24]
	if(hci_pckt->type==HCI_EVENT_PKT)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b04      	cmp	r3, #4
 8001236:	d163      	bne.n	8001300 <APP_UserEvtRx+0xdc>
		{
		//Get data from packet
		hci_event_pckt *event_pckt =(hci_event_pckt*)hci_pckt->data;
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
		//process meta data
		if(event_pckt->evt ==EVT_LE_META_EVENT)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b3e      	cmp	r3, #62	; 0x3e
 8001244:	d11e      	bne.n	8001284 <APP_UserEvtRx+0x60>
			{
			//get meta data
			evt_le_meta_event *evt =(void *)event_pckt->data;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3302      	adds	r3, #2
 800124a:	60fb      	str	r3, [r7, #12]
			//process each meta data;
			for (i=0;i<(sizeof(hci_le_meta_events_table))/(sizeof(hci_le_meta_events_table_type));i++)
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	e014      	b.n	800127c <APP_UserEvtRx+0x58>
				{
					if(evt->subevent ==hci_le_meta_events_table[i].evt_code)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b29a      	uxth	r2, r3
 8001258:	492b      	ldr	r1, [pc, #172]	; (8001308 <APP_UserEvtRx+0xe4>)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001260:	429a      	cmp	r2, r3
 8001262:	d108      	bne.n	8001276 <APP_UserEvtRx+0x52>
					{
						hci_le_meta_events_table[i].process((void *)evt->data);
 8001264:	4a28      	ldr	r2, [pc, #160]	; (8001308 <APP_UserEvtRx+0xe4>)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4413      	add	r3, r2
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	3201      	adds	r2, #1
 8001272:	4610      	mov	r0, r2
 8001274:	4798      	blx	r3
			for (i=0;i<(sizeof(hci_le_meta_events_table))/(sizeof(hci_le_meta_events_table_type));i++)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3301      	adds	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2b09      	cmp	r3, #9
 8001280:	d9e7      	bls.n	8001252 <APP_UserEvtRx+0x2e>
		}




	}
 8001282:	e03d      	b.n	8001300 <APP_UserEvtRx+0xdc>
		else if(event_pckt->evt==EVT_VENDOR)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2bff      	cmp	r3, #255	; 0xff
 800128a:	d11e      	bne.n	80012ca <APP_UserEvtRx+0xa6>
				evt_blue_aci *blue_evt= (void *)event_pckt->data;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3302      	adds	r3, #2
 8001290:	613b      	str	r3, [r7, #16]
				for (i=0;i<(sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type));i++)
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	e014      	b.n	80012c2 <APP_UserEvtRx+0x9e>
					if(blue_evt->ecode==hci_vendor_specific_events_table[i].evt_code)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	b29a      	uxth	r2, r3
 800129e:	491b      	ldr	r1, [pc, #108]	; (800130c <APP_UserEvtRx+0xe8>)
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d108      	bne.n	80012bc <APP_UserEvtRx+0x98>
						hci_vendor_specific_events_table[i].process((void*)blue_evt->data);
 80012aa:	4a18      	ldr	r2, [pc, #96]	; (800130c <APP_UserEvtRx+0xe8>)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4413      	add	r3, r2
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	3202      	adds	r2, #2
 80012b8:	4610      	mov	r0, r2
 80012ba:	4798      	blx	r3
				for (i=0;i<(sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type));i++)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	3301      	adds	r3, #1
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	2b2a      	cmp	r3, #42	; 0x2a
 80012c6:	d9e7      	bls.n	8001298 <APP_UserEvtRx+0x74>
	}
 80012c8:	e01a      	b.n	8001300 <APP_UserEvtRx+0xdc>
			for (i=0; i<(sizeof(hci_events_table)/sizeof(hci_events_table_type));i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	e014      	b.n	80012fa <APP_UserEvtRx+0xd6>
					if(event_pckt->evt==hci_events_table[i].evt_code)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	490e      	ldr	r1, [pc, #56]	; (8001310 <APP_UserEvtRx+0xec>)
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d108      	bne.n	80012f4 <APP_UserEvtRx+0xd0>
						hci_events_table[i].process((void*)event_pckt->data);
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <APP_UserEvtRx+0xec>)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4413      	add	r3, r2
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	3202      	adds	r2, #2
 80012f0:	4610      	mov	r0, r2
 80012f2:	4798      	blx	r3
			for (i=0; i<(sizeof(hci_events_table)/sizeof(hci_events_table_type));i++)
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	3301      	adds	r3, #1
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	2b06      	cmp	r3, #6
 80012fe:	d9e7      	bls.n	80012d0 <APP_UserEvtRx+0xac>
	}
 8001300:	bf00      	nop
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	08006704 	.word	0x08006704
 800130c:	08006754 	.word	0x08006754
 8001310:	080066cc 	.word	0x080066cc

08001314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_MspInit+0x4c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <HAL_MspInit+0x4c>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_MspInit+0x4c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a08      	ldr	r2, [pc, #32]	; (8001360 <HAL_MspInit+0x4c>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800

08001364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <HAL_UART_MspInit+0x84>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d12b      	bne.n	80013de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_UART_MspInit+0x88>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a17      	ldr	r2, [pc, #92]	; (80013ec <HAL_UART_MspInit+0x88>)
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_UART_MspInit+0x88>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_UART_MspInit+0x88>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a10      	ldr	r2, [pc, #64]	; (80013ec <HAL_UART_MspInit+0x88>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_UART_MspInit+0x88>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013be:	230c      	movs	r3, #12
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ce:	2307      	movs	r3, #7
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HAL_UART_MspInit+0x8c>)
 80013da:	f000 fb53 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40004400 	.word	0x40004400
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 f946 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <EXTI0_IRQHandler+0x10>)
 800144e:	f000 faf5 	bl	8001a3c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000750 	.word	0x20000750

0800145c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001460:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001464:	f000 fda8 	bl	8001fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e00a      	b.n	8001494 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800147e:	f3af 8000 	nop.w
 8001482:	4601      	mov	r1, r0
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	60ba      	str	r2, [r7, #8]
 800148a:	b2ca      	uxtb	r2, r1
 800148c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	dbf0      	blt.n	800147e <_read+0x12>
	}

return len;
 800149c:	687b      	ldr	r3, [r7, #4]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e009      	b.n	80014cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	60ba      	str	r2, [r7, #8]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fb8d 	bl	8000be0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbf1      	blt.n	80014b8 <_write+0x12>
	}
	return len;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_close>:

int _close(int file)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
	return -1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001506:	605a      	str	r2, [r3, #4]
	return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_isatty>:

int _isatty(int file)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
	return 1;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
	return 0;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f004 fa6a 	bl	8005a50 <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20020000 	.word	0x20020000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	200001ac 	.word	0x200001ac
 80015b0:	20000828 	.word	0x20000828

080015b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <SystemInit+0x20>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <SystemInit+0x20>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001610 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015de:	490e      	ldr	r1, [pc, #56]	; (8001618 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015f4:	4c0b      	ldr	r4, [pc, #44]	; (8001624 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001602:	f7ff ffd7 	bl	80015b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f004 fa29 	bl	8005a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160a:	f7ff fb01 	bl	8000c10 <main>
  bx  lr    
 800160e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001610:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800161c:	08006920 	.word	0x08006920
  ldr r2, =_sbss
 8001620:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001624:	20000824 	.word	0x20000824

08001628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC_IRQHandler>
	...

0800162c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <HAL_Init+0x40>)
 8001636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_Init+0x40>)
 8001642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001646:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_Init+0x40>)
 800164e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f000 f973 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165a:	200f      	movs	r0, #15
 800165c:	f000 f808 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001660:	f7ff fe58 	bl	8001314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023c00 	.word	0x40023c00

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x54>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x58>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f999 	bl	80019c6 <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d80a      	bhi.n	80016ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016ac:	f000 f953 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <HAL_InitTick+0x5c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000018 	.word	0x20000018
 80016c8:	20000020 	.word	0x20000020
 80016cc:	2000001c 	.word	0x2000001c

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000020 	.word	0x20000020
 80016f4:	20000800 	.word	0x20000800

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000800 	.word	0x20000800

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffde 	bl	80016f8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000020 	.word	0x20000020

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db12      	blt.n	8001830 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	490a      	ldr	r1, [pc, #40]	; (800183c <__NVIC_DisableIRQ+0x44>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	3320      	adds	r3, #32
 8001820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001824:	f3bf 8f4f 	dsb	sy
}
 8001828:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800182a:	f3bf 8f6f 	isb	sy
}
 800182e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001920:	f7ff ff8e 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff05 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001968:	f7ff ff1a 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 800196c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff ff8e 	bl	8001894 <NVIC_EncodePriority>
 8001978:	4602      	mov	r2, r0
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5d 	bl	8001840 <__NVIC_SetPriority>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff0d 	bl	80017bc <__NVIC_EnableIRQ>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff1d 	bl	80017f8 <__NVIC_DisableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ff94 	bl	80018fc <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80019de:	b480      	push	{r7}
 80019e0:	b087      	sub	sp, #28
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	460b      	mov	r3, r1
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80019f0:	7afb      	ldrb	r3, [r7, #11]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d103      	bne.n	80019fe <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	605a      	str	r2, [r3, #4]
      break;
 80019fc:	e002      	b.n	8001a04 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	75fb      	strb	r3, [r7, #23]
      break;
 8001a02:	bf00      	nop
  }

  return status;
 8001a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e003      	b.n	8001a2e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
  }
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_EXTI_IRQHandler+0x44>)
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d009      	beq.n	8001a78 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001a64:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <HAL_EXTI_IRQHandler+0x44>)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4798      	blx	r3
    }
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40013c00 	.word	0x40013c00

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	e159      	b.n	8001d54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	f040 8148 	bne.w	8001d4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d005      	beq.n	8001ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d130      	bne.n	8001b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 0201 	and.w	r2, r3, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d017      	beq.n	8001b74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d123      	bne.n	8001bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	08da      	lsrs	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3208      	adds	r2, #8
 8001bc2:	69b9      	ldr	r1, [r7, #24]
 8001bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80a2 	beq.w	8001d4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b57      	ldr	r3, [pc, #348]	; (8001d6c <HAL_GPIO_Init+0x2e8>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a56      	ldr	r2, [pc, #344]	; (8001d6c <HAL_GPIO_Init+0x2e8>)
 8001c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b54      	ldr	r3, [pc, #336]	; (8001d6c <HAL_GPIO_Init+0x2e8>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c26:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <HAL_GPIO_Init+0x2ec>)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a49      	ldr	r2, [pc, #292]	; (8001d74 <HAL_GPIO_Init+0x2f0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d019      	beq.n	8001c86 <HAL_GPIO_Init+0x202>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a48      	ldr	r2, [pc, #288]	; (8001d78 <HAL_GPIO_Init+0x2f4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0x1fe>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a47      	ldr	r2, [pc, #284]	; (8001d7c <HAL_GPIO_Init+0x2f8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00d      	beq.n	8001c7e <HAL_GPIO_Init+0x1fa>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a46      	ldr	r2, [pc, #280]	; (8001d80 <HAL_GPIO_Init+0x2fc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x1f6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a45      	ldr	r2, [pc, #276]	; (8001d84 <HAL_GPIO_Init+0x300>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_GPIO_Init+0x1f2>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e008      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c76:	2307      	movs	r3, #7
 8001c78:	e006      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e004      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e002      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c86:	2300      	movs	r3, #0
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	f002 0203 	and.w	r2, r2, #3
 8001c8e:	0092      	lsls	r2, r2, #2
 8001c90:	4093      	lsls	r3, r2
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c98:	4935      	ldr	r1, [pc, #212]	; (8001d70 <HAL_GPIO_Init+0x2ec>)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca6:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cca:	4a2f      	ldr	r2, [pc, #188]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf4:	4a24      	ldr	r2, [pc, #144]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfa:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1e:	4a1a      	ldr	r2, [pc, #104]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d48:	4a0f      	ldr	r2, [pc, #60]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3301      	adds	r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	2b0f      	cmp	r3, #15
 8001d58:	f67f aea2 	bls.w	8001aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40013800 	.word	0x40013800
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020c00 	.word	0x40020c00
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40013c00 	.word	0x40013c00

08001d8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e0bb      	b.n	8001f20 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001da8:	2201      	movs	r2, #1
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	f040 80ab 	bne.w	8001f1a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001dc4:	4a5c      	ldr	r2, [pc, #368]	; (8001f38 <HAL_GPIO_DeInit+0x1ac>)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	4013      	ands	r3, r2
 8001de4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a54      	ldr	r2, [pc, #336]	; (8001f3c <HAL_GPIO_DeInit+0x1b0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d019      	beq.n	8001e22 <HAL_GPIO_DeInit+0x96>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a53      	ldr	r2, [pc, #332]	; (8001f40 <HAL_GPIO_DeInit+0x1b4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_DeInit+0x92>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a52      	ldr	r2, [pc, #328]	; (8001f44 <HAL_GPIO_DeInit+0x1b8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00d      	beq.n	8001e1a <HAL_GPIO_DeInit+0x8e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a51      	ldr	r2, [pc, #324]	; (8001f48 <HAL_GPIO_DeInit+0x1bc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <HAL_GPIO_DeInit+0x8a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a50      	ldr	r2, [pc, #320]	; (8001f4c <HAL_GPIO_DeInit+0x1c0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_GPIO_DeInit+0x86>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	e008      	b.n	8001e24 <HAL_GPIO_DeInit+0x98>
 8001e12:	2307      	movs	r3, #7
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_DeInit+0x98>
 8001e16:	2303      	movs	r3, #3
 8001e18:	e004      	b.n	8001e24 <HAL_GPIO_DeInit+0x98>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e002      	b.n	8001e24 <HAL_GPIO_DeInit+0x98>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_GPIO_DeInit+0x98>
 8001e22:	2300      	movs	r3, #0
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	f002 0203 	and.w	r2, r2, #3
 8001e2a:	0092      	lsls	r2, r2, #2
 8001e2c:	4093      	lsls	r3, r2
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d132      	bne.n	8001e9a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001e34:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	4944      	ldr	r1, [pc, #272]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001e42:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	4941      	ldr	r1, [pc, #260]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001e50:	4b3f      	ldr	r3, [pc, #252]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	493d      	ldr	r1, [pc, #244]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001e5e:	4b3c      	ldr	r3, [pc, #240]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	493a      	ldr	r1, [pc, #232]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	220f      	movs	r2, #15
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <HAL_GPIO_DeInit+0x1ac>)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	482a      	ldr	r0, [pc, #168]	; (8001f38 <HAL_GPIO_DeInit+0x1ac>)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	400a      	ands	r2, r1
 8001e94:	3302      	adds	r3, #2
 8001e96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2103      	movs	r1, #3
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	401a      	ands	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	08da      	lsrs	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3208      	adds	r2, #8
 8001eb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	08d2      	lsrs	r2, r2, #3
 8001ed0:	4019      	ands	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2103      	movs	r1, #3
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	401a      	ands	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	401a      	ands	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2103      	movs	r1, #3
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	401a      	ands	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b0f      	cmp	r3, #15
 8001f24:	f67f af40 	bls.w	8001da8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020c00 	.word	0x40020c00
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	887b      	ldrh	r3, [r7, #2]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e001      	b.n	8001f76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f806 	bl	8001fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40013c00 	.word	0x40013c00

08001fe8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e264      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d075      	beq.n	800210a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800201e:	4ba3      	ldr	r3, [pc, #652]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d00c      	beq.n	8002044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800202a:	4ba0      	ldr	r3, [pc, #640]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002032:	2b08      	cmp	r3, #8
 8002034:	d112      	bne.n	800205c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002036:	4b9d      	ldr	r3, [pc, #628]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002042:	d10b      	bne.n	800205c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	4b99      	ldr	r3, [pc, #612]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d05b      	beq.n	8002108 <HAL_RCC_OscConfig+0x108>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d157      	bne.n	8002108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e23f      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002064:	d106      	bne.n	8002074 <HAL_RCC_OscConfig+0x74>
 8002066:	4b91      	ldr	r3, [pc, #580]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a90      	ldr	r2, [pc, #576]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e01d      	b.n	80020b0 <HAL_RCC_OscConfig+0xb0>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x98>
 800207e:	4b8b      	ldr	r3, [pc, #556]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a8a      	ldr	r2, [pc, #552]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b88      	ldr	r3, [pc, #544]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a87      	ldr	r2, [pc, #540]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0xb0>
 8002098:	4b84      	ldr	r3, [pc, #528]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a83      	ldr	r2, [pc, #524]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b81      	ldr	r3, [pc, #516]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a80      	ldr	r2, [pc, #512]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fb1e 	bl	80016f8 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff fb1a 	bl	80016f8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e204      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b76      	ldr	r3, [pc, #472]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0xc0>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fb0a 	bl	80016f8 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff fb06 	bl	80016f8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e1f0      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	4b6c      	ldr	r3, [pc, #432]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0xe8>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d063      	beq.n	80021de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002116:	4b65      	ldr	r3, [pc, #404]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002122:	4b62      	ldr	r3, [pc, #392]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800212a:	2b08      	cmp	r3, #8
 800212c:	d11c      	bne.n	8002168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212e:	4b5f      	ldr	r3, [pc, #380]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d116      	bne.n	8002168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	4b5c      	ldr	r3, [pc, #368]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_RCC_OscConfig+0x152>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e1c4      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b56      	ldr	r3, [pc, #344]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4952      	ldr	r1, [pc, #328]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	e03a      	b.n	80021de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002170:	4b4f      	ldr	r3, [pc, #316]	; (80022b0 <HAL_RCC_OscConfig+0x2b0>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7ff fabf 	bl	80016f8 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217e:	f7ff fabb 	bl	80016f8 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1a5      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	4b46      	ldr	r3, [pc, #280]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b43      	ldr	r3, [pc, #268]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4940      	ldr	r1, [pc, #256]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]
 80021b0:	e015      	b.n	80021de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b2:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <HAL_RCC_OscConfig+0x2b0>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7ff fa9e 	bl	80016f8 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c0:	f7ff fa9a 	bl	80016f8 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e184      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	4b36      	ldr	r3, [pc, #216]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d030      	beq.n	800224c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d016      	beq.n	8002220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f2:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <HAL_RCC_OscConfig+0x2b4>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7ff fa7e 	bl	80016f8 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002200:	f7ff fa7a 	bl	80016f8 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e164      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x200>
 800221e:	e015      	b.n	800224c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_RCC_OscConfig+0x2b4>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7ff fa67 	bl	80016f8 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222e:	f7ff fa63 	bl	80016f8 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e14d      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a0 	beq.w	800239a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_RCC_OscConfig+0x2b8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d121      	bne.n	80022da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_RCC_OscConfig+0x2b8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <HAL_RCC_OscConfig+0x2b8>)
 800229c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a2:	f7ff fa29 	bl	80016f8 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	e011      	b.n	80022ce <HAL_RCC_OscConfig+0x2ce>
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	42470000 	.word	0x42470000
 80022b4:	42470e80 	.word	0x42470e80
 80022b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022bc:	f7ff fa1c 	bl	80016f8 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e106      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b85      	ldr	r3, [pc, #532]	; (80024e4 <HAL_RCC_OscConfig+0x4e4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d106      	bne.n	80022f0 <HAL_RCC_OscConfig+0x2f0>
 80022e2:	4b81      	ldr	r3, [pc, #516]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e6:	4a80      	ldr	r2, [pc, #512]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6713      	str	r3, [r2, #112]	; 0x70
 80022ee:	e01c      	b.n	800232a <HAL_RCC_OscConfig+0x32a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d10c      	bne.n	8002312 <HAL_RCC_OscConfig+0x312>
 80022f8:	4b7b      	ldr	r3, [pc, #492]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	4a7a      	ldr	r2, [pc, #488]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 80022fe:	f043 0304 	orr.w	r3, r3, #4
 8002302:	6713      	str	r3, [r2, #112]	; 0x70
 8002304:	4b78      	ldr	r3, [pc, #480]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	4a77      	ldr	r2, [pc, #476]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6713      	str	r3, [r2, #112]	; 0x70
 8002310:	e00b      	b.n	800232a <HAL_RCC_OscConfig+0x32a>
 8002312:	4b75      	ldr	r3, [pc, #468]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	4a74      	ldr	r2, [pc, #464]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	6713      	str	r3, [r2, #112]	; 0x70
 800231e:	4b72      	ldr	r3, [pc, #456]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002322:	4a71      	ldr	r2, [pc, #452]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002324:	f023 0304 	bic.w	r3, r3, #4
 8002328:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d015      	beq.n	800235e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002332:	f7ff f9e1 	bl	80016f8 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002338:	e00a      	b.n	8002350 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7ff f9dd 	bl	80016f8 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	; 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e0c5      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002350:	4b65      	ldr	r3, [pc, #404]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0ee      	beq.n	800233a <HAL_RCC_OscConfig+0x33a>
 800235c:	e014      	b.n	8002388 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235e:	f7ff f9cb 	bl	80016f8 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7ff f9c7 	bl	80016f8 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	; 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0af      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237c:	4b5a      	ldr	r3, [pc, #360]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ee      	bne.n	8002366 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d105      	bne.n	800239a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238e:	4b56      	ldr	r3, [pc, #344]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	4a55      	ldr	r2, [pc, #340]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002398:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 809b 	beq.w	80024da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023a4:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 030c 	and.w	r3, r3, #12
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d05c      	beq.n	800246a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d141      	bne.n	800243c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b8:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <HAL_RCC_OscConfig+0x4ec>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7ff f99b 	bl	80016f8 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c6:	f7ff f997 	bl	80016f8 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e081      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d8:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f0      	bne.n	80023c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69da      	ldr	r2, [r3, #28]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	019b      	lsls	r3, r3, #6
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	085b      	lsrs	r3, r3, #1
 80023fc:	3b01      	subs	r3, #1
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	061b      	lsls	r3, r3, #24
 8002408:	4937      	ldr	r1, [pc, #220]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240e:	4b37      	ldr	r3, [pc, #220]	; (80024ec <HAL_RCC_OscConfig+0x4ec>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff f970 	bl	80016f8 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241c:	f7ff f96c 	bl	80016f8 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e056      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x41c>
 800243a:	e04e      	b.n	80024da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_RCC_OscConfig+0x4ec>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7ff f959 	bl	80016f8 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244a:	f7ff f955 	bl	80016f8 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e03f      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245c:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f0      	bne.n	800244a <HAL_RCC_OscConfig+0x44a>
 8002468:	e037      	b.n	80024da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e032      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d028      	beq.n	80024d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d121      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d11a      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024a6:	4013      	ands	r3, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d111      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	085b      	lsrs	r3, r3, #1
 80024be:	3b01      	subs	r3, #1
 80024c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d001      	beq.n	80024da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40007000 	.word	0x40007000
 80024e8:	40023800 	.word	0x40023800
 80024ec:	42470060 	.word	0x42470060

080024f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0cc      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b68      	ldr	r3, [pc, #416]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d90c      	bls.n	800252c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b63      	ldr	r3, [pc, #396]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0b8      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002544:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800254e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	494d      	ldr	r1, [pc, #308]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d044      	beq.n	8002610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d119      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e07f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	4b3f      	ldr	r3, [pc, #252]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e06f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e067      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	4b37      	ldr	r3, [pc, #220]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f023 0203 	bic.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4934      	ldr	r1, [pc, #208]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e0:	f7ff f88a 	bl	80016f8 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7ff f886 	bl	80016f8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e04f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 020c 	and.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	429a      	cmp	r2, r3
 800260e:	d1eb      	bne.n	80025e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d20c      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e032      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4916      	ldr	r1, [pc, #88]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	490e      	ldr	r1, [pc, #56]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002676:	f000 f821 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	490a      	ldr	r1, [pc, #40]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	fa22 f303 	lsr.w	r3, r2, r3
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe ffea 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023c00 	.word	0x40023c00
 80026ac:	40023800 	.word	0x40023800
 80026b0:	080066b4 	.word	0x080066b4
 80026b4:	20000018 	.word	0x20000018
 80026b8:	2000001c 	.word	0x2000001c

080026bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	2300      	movs	r3, #0
 80026ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d4:	4b67      	ldr	r3, [pc, #412]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d00d      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x40>
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	f200 80bd 	bhi.w	8002860 <HAL_RCC_GetSysClockFreq+0x1a4>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x34>
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d003      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ee:	e0b7      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f0:	4b61      	ldr	r3, [pc, #388]	; (8002878 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026f2:	60bb      	str	r3, [r7, #8]
       break;
 80026f4:	e0b7      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026f6:	4b61      	ldr	r3, [pc, #388]	; (800287c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80026f8:	60bb      	str	r3, [r7, #8]
      break;
 80026fa:	e0b4      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026fc:	4b5d      	ldr	r3, [pc, #372]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002704:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002706:	4b5b      	ldr	r3, [pc, #364]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d04d      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002712:	4b58      	ldr	r3, [pc, #352]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	099b      	lsrs	r3, r3, #6
 8002718:	461a      	mov	r2, r3
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002722:	f04f 0100 	mov.w	r1, #0
 8002726:	ea02 0800 	and.w	r8, r2, r0
 800272a:	ea03 0901 	and.w	r9, r3, r1
 800272e:	4640      	mov	r0, r8
 8002730:	4649      	mov	r1, r9
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	014b      	lsls	r3, r1, #5
 800273c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002740:	0142      	lsls	r2, r0, #5
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	ebb0 0008 	subs.w	r0, r0, r8
 800274a:	eb61 0109 	sbc.w	r1, r1, r9
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	018b      	lsls	r3, r1, #6
 8002758:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800275c:	0182      	lsls	r2, r0, #6
 800275e:	1a12      	subs	r2, r2, r0
 8002760:	eb63 0301 	sbc.w	r3, r3, r1
 8002764:	f04f 0000 	mov.w	r0, #0
 8002768:	f04f 0100 	mov.w	r1, #0
 800276c:	00d9      	lsls	r1, r3, #3
 800276e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002772:	00d0      	lsls	r0, r2, #3
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	eb12 0208 	adds.w	r2, r2, r8
 800277c:	eb43 0309 	adc.w	r3, r3, r9
 8002780:	f04f 0000 	mov.w	r0, #0
 8002784:	f04f 0100 	mov.w	r1, #0
 8002788:	0259      	lsls	r1, r3, #9
 800278a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800278e:	0250      	lsls	r0, r2, #9
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	461a      	mov	r2, r3
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	f7fd fd22 	bl	80001e8 <__aeabi_uldivmod>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4613      	mov	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	e04a      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ae:	4b31      	ldr	r3, [pc, #196]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	099b      	lsrs	r3, r3, #6
 80027b4:	461a      	mov	r2, r3
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027be:	f04f 0100 	mov.w	r1, #0
 80027c2:	ea02 0400 	and.w	r4, r2, r0
 80027c6:	ea03 0501 	and.w	r5, r3, r1
 80027ca:	4620      	mov	r0, r4
 80027cc:	4629      	mov	r1, r5
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	014b      	lsls	r3, r1, #5
 80027d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027dc:	0142      	lsls	r2, r0, #5
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	1b00      	subs	r0, r0, r4
 80027e4:	eb61 0105 	sbc.w	r1, r1, r5
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	018b      	lsls	r3, r1, #6
 80027f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027f6:	0182      	lsls	r2, r0, #6
 80027f8:	1a12      	subs	r2, r2, r0
 80027fa:	eb63 0301 	sbc.w	r3, r3, r1
 80027fe:	f04f 0000 	mov.w	r0, #0
 8002802:	f04f 0100 	mov.w	r1, #0
 8002806:	00d9      	lsls	r1, r3, #3
 8002808:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800280c:	00d0      	lsls	r0, r2, #3
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	1912      	adds	r2, r2, r4
 8002814:	eb45 0303 	adc.w	r3, r5, r3
 8002818:	f04f 0000 	mov.w	r0, #0
 800281c:	f04f 0100 	mov.w	r1, #0
 8002820:	0299      	lsls	r1, r3, #10
 8002822:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002826:	0290      	lsls	r0, r2, #10
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	461a      	mov	r2, r3
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	f7fd fcd6 	bl	80001e8 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4613      	mov	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0c1b      	lsrs	r3, r3, #16
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	3301      	adds	r3, #1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	60bb      	str	r3, [r7, #8]
      break;
 800285e:	e002      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002862:	60bb      	str	r3, [r7, #8]
      break;
 8002864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002866:	68bb      	ldr	r3, [r7, #8]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	00f42400 	.word	0x00f42400
 800287c:	007a1200 	.word	0x007a1200

08002880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_RCC_GetHCLKFreq+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000018 	.word	0x20000018

08002898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800289c:	f7ff fff0 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0a9b      	lsrs	r3, r3, #10
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	080066c4 	.word	0x080066c4

080028c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028c4:	f7ff ffdc 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	0b5b      	lsrs	r3, r3, #13
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	4903      	ldr	r1, [pc, #12]	; (80028e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40023800 	.word	0x40023800
 80028e4:	080066c4 	.word	0x080066c4

080028e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e07b      	b.n	80029f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d108      	bne.n	8002914 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290a:	d009      	beq.n	8002920 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]
 8002912:	e005      	b.n	8002920 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f85d 	bl	80029fa <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002956:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	ea42 0103 	orr.w	r1, r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	0c1b      	lsrs	r3, r3, #16
 80029be:	f003 0104 	and.w	r1, r3, #4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	f003 0210 	and.w	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69da      	ldr	r2, [r3, #28]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b08c      	sub	sp, #48	; 0x30
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_SPI_TransmitReceive+0x26>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e18a      	b.n	8002d4a <HAL_SPI_TransmitReceive+0x33c>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a3c:	f7fe fe5c 	bl	80016f8 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a52:	887b      	ldrh	r3, [r7, #2]
 8002a54:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d00f      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0x70>
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a64:	d107      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x68>
 8002a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d003      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
 8002a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a7c:	e15b      	b.n	8002d36 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x82>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x82>
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d103      	bne.n	8002a98 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a96:	e14e      	b.n	8002d36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d003      	beq.n	8002aac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2205      	movs	r2, #5
 8002aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	887a      	ldrh	r2, [r7, #2]
 8002ac2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	887a      	ldrh	r2, [r7, #2]
 8002ace:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d007      	beq.n	8002b00 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002afe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b08:	d178      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_SPI_TransmitReceive+0x10a>
 8002b12:	8b7b      	ldrh	r3, [r7, #26]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d166      	bne.n	8002be6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	881a      	ldrh	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	1c9a      	adds	r2, r3, #2
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b3c:	e053      	b.n	8002be6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d11b      	bne.n	8002b84 <HAL_SPI_TransmitReceive+0x176>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <HAL_SPI_TransmitReceive+0x176>
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d113      	bne.n	8002b84 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	881a      	ldrh	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	1c9a      	adds	r2, r3, #2
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d119      	bne.n	8002bc6 <HAL_SPI_TransmitReceive+0x1b8>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d014      	beq.n	8002bc6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	b292      	uxth	r2, r2
 8002ba8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	1c9a      	adds	r2, r3, #2
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bc6:	f7fe fd97 	bl	80016f8 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d807      	bhi.n	8002be6 <HAL_SPI_TransmitReceive+0x1d8>
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bdc:	d003      	beq.n	8002be6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002be4:	e0a7      	b.n	8002d36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1a6      	bne.n	8002b3e <HAL_SPI_TransmitReceive+0x130>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1a1      	bne.n	8002b3e <HAL_SPI_TransmitReceive+0x130>
 8002bfa:	e07c      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_SPI_TransmitReceive+0x1fc>
 8002c04:	8b7b      	ldrh	r3, [r7, #26]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d16b      	bne.n	8002ce2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	7812      	ldrb	r2, [r2, #0]
 8002c16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c30:	e057      	b.n	8002ce2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d11c      	bne.n	8002c7a <HAL_SPI_TransmitReceive+0x26c>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d017      	beq.n	8002c7a <HAL_SPI_TransmitReceive+0x26c>
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d114      	bne.n	8002c7a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	7812      	ldrb	r2, [r2, #0]
 8002c5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d119      	bne.n	8002cbc <HAL_SPI_TransmitReceive+0x2ae>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d014      	beq.n	8002cbc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cbc:	f7fe fd1c 	bl	80016f8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d803      	bhi.n	8002cd4 <HAL_SPI_TransmitReceive+0x2c6>
 8002ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd2:	d102      	bne.n	8002cda <HAL_SPI_TransmitReceive+0x2cc>
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d103      	bne.n	8002ce2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ce0:	e029      	b.n	8002d36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1a2      	bne.n	8002c32 <HAL_SPI_TransmitReceive+0x224>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d19d      	bne.n	8002c32 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f8c0 	bl	8002e80 <SPI_EndRxTxTransaction>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d12:	e010      	b.n	8002d36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	e000      	b.n	8002d36 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3730      	adds	r7, #48	; 0x30
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d60:	b2db      	uxtb	r3, r3
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d80:	f7fe fcba 	bl	80016f8 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d90:	f7fe fcb2 	bl	80016f8 <HAL_GetTick>
 8002d94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d96:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	015b      	lsls	r3, r3, #5
 8002d9c:	0d1b      	lsrs	r3, r3, #20
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002da6:	e054      	b.n	8002e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dae:	d050      	beq.n	8002e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002db0:	f7fe fca2 	bl	80016f8 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d902      	bls.n	8002dc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d13d      	bne.n	8002e42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dde:	d111      	bne.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de8:	d004      	beq.n	8002df4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df2:	d107      	bne.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e0c:	d10f      	bne.n	8002e2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e017      	b.n	8002e72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	bf0c      	ite	eq
 8002e62:	2301      	moveq	r3, #1
 8002e64:	2300      	movne	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d19b      	bne.n	8002da8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000018 	.word	0x20000018

08002e80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <SPI_EndRxTxTransaction+0x7c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1b      	ldr	r2, [pc, #108]	; (8002f00 <SPI_EndRxTxTransaction+0x80>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0d5b      	lsrs	r3, r3, #21
 8002e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eaa:	d112      	bne.n	8002ed2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2180      	movs	r1, #128	; 0x80
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f7ff ff5a 	bl	8002d70 <SPI_WaitFlagStateUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d016      	beq.n	8002ef0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	f043 0220 	orr.w	r2, r3, #32
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e00f      	b.n	8002ef2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee8:	2b80      	cmp	r3, #128	; 0x80
 8002eea:	d0f2      	beq.n	8002ed2 <SPI_EndRxTxTransaction+0x52>
 8002eec:	e000      	b.n	8002ef0 <SPI_EndRxTxTransaction+0x70>
        break;
 8002eee:	bf00      	nop
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000018 	.word	0x20000018
 8002f00:	165e9f81 	.word	0x165e9f81

08002f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e03f      	b.n	8002f96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe fa1a 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	; 0x24
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f829 	bl	8002fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa4:	b09f      	sub	sp, #124	; 0x7c
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb6:	68d9      	ldr	r1, [r3, #12]
 8002fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	ea40 0301 	orr.w	r3, r0, r1
 8002fc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fe4:	f021 010c 	bic.w	r1, r1, #12
 8002fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffe:	6999      	ldr	r1, [r3, #24]
 8003000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	ea40 0301 	orr.w	r3, r0, r1
 8003008:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800300a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4bc5      	ldr	r3, [pc, #788]	; (8003324 <UART_SetConfig+0x384>)
 8003010:	429a      	cmp	r2, r3
 8003012:	d004      	beq.n	800301e <UART_SetConfig+0x7e>
 8003014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4bc3      	ldr	r3, [pc, #780]	; (8003328 <UART_SetConfig+0x388>)
 800301a:	429a      	cmp	r2, r3
 800301c:	d103      	bne.n	8003026 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800301e:	f7ff fc4f 	bl	80028c0 <HAL_RCC_GetPCLK2Freq>
 8003022:	6778      	str	r0, [r7, #116]	; 0x74
 8003024:	e002      	b.n	800302c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003026:	f7ff fc37 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 800302a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003034:	f040 80b6 	bne.w	80031a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800303a:	461c      	mov	r4, r3
 800303c:	f04f 0500 	mov.w	r5, #0
 8003040:	4622      	mov	r2, r4
 8003042:	462b      	mov	r3, r5
 8003044:	1891      	adds	r1, r2, r2
 8003046:	6439      	str	r1, [r7, #64]	; 0x40
 8003048:	415b      	adcs	r3, r3
 800304a:	647b      	str	r3, [r7, #68]	; 0x44
 800304c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003050:	1912      	adds	r2, r2, r4
 8003052:	eb45 0303 	adc.w	r3, r5, r3
 8003056:	f04f 0000 	mov.w	r0, #0
 800305a:	f04f 0100 	mov.w	r1, #0
 800305e:	00d9      	lsls	r1, r3, #3
 8003060:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003064:	00d0      	lsls	r0, r2, #3
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	1911      	adds	r1, r2, r4
 800306c:	6639      	str	r1, [r7, #96]	; 0x60
 800306e:	416b      	adcs	r3, r5
 8003070:	667b      	str	r3, [r7, #100]	; 0x64
 8003072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	461a      	mov	r2, r3
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	1891      	adds	r1, r2, r2
 800307e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003080:	415b      	adcs	r3, r3
 8003082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003088:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800308c:	f7fd f8ac 	bl	80001e8 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4ba5      	ldr	r3, [pc, #660]	; (800332c <UART_SetConfig+0x38c>)
 8003096:	fba3 2302 	umull	r2, r3, r3, r2
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	011e      	lsls	r6, r3, #4
 800309e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a0:	461c      	mov	r4, r3
 80030a2:	f04f 0500 	mov.w	r5, #0
 80030a6:	4622      	mov	r2, r4
 80030a8:	462b      	mov	r3, r5
 80030aa:	1891      	adds	r1, r2, r2
 80030ac:	6339      	str	r1, [r7, #48]	; 0x30
 80030ae:	415b      	adcs	r3, r3
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34
 80030b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030b6:	1912      	adds	r2, r2, r4
 80030b8:	eb45 0303 	adc.w	r3, r5, r3
 80030bc:	f04f 0000 	mov.w	r0, #0
 80030c0:	f04f 0100 	mov.w	r1, #0
 80030c4:	00d9      	lsls	r1, r3, #3
 80030c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030ca:	00d0      	lsls	r0, r2, #3
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	1911      	adds	r1, r2, r4
 80030d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80030d4:	416b      	adcs	r3, r5
 80030d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	461a      	mov	r2, r3
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	1891      	adds	r1, r2, r2
 80030e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80030e6:	415b      	adcs	r3, r3
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80030f2:	f7fd f879 	bl	80001e8 <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4b8c      	ldr	r3, [pc, #560]	; (800332c <UART_SetConfig+0x38c>)
 80030fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	2164      	movs	r1, #100	; 0x64
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	3332      	adds	r3, #50	; 0x32
 800310e:	4a87      	ldr	r2, [pc, #540]	; (800332c <UART_SetConfig+0x38c>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800311c:	441e      	add	r6, r3
 800311e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003120:	4618      	mov	r0, r3
 8003122:	f04f 0100 	mov.w	r1, #0
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	1894      	adds	r4, r2, r2
 800312c:	623c      	str	r4, [r7, #32]
 800312e:	415b      	adcs	r3, r3
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003136:	1812      	adds	r2, r2, r0
 8003138:	eb41 0303 	adc.w	r3, r1, r3
 800313c:	f04f 0400 	mov.w	r4, #0
 8003140:	f04f 0500 	mov.w	r5, #0
 8003144:	00dd      	lsls	r5, r3, #3
 8003146:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800314a:	00d4      	lsls	r4, r2, #3
 800314c:	4622      	mov	r2, r4
 800314e:	462b      	mov	r3, r5
 8003150:	1814      	adds	r4, r2, r0
 8003152:	653c      	str	r4, [r7, #80]	; 0x50
 8003154:	414b      	adcs	r3, r1
 8003156:	657b      	str	r3, [r7, #84]	; 0x54
 8003158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	461a      	mov	r2, r3
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	1891      	adds	r1, r2, r2
 8003164:	61b9      	str	r1, [r7, #24]
 8003166:	415b      	adcs	r3, r3
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800316e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003172:	f7fd f839 	bl	80001e8 <__aeabi_uldivmod>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4b6c      	ldr	r3, [pc, #432]	; (800332c <UART_SetConfig+0x38c>)
 800317c:	fba3 1302 	umull	r1, r3, r3, r2
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	2164      	movs	r1, #100	; 0x64
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	3332      	adds	r3, #50	; 0x32
 800318e:	4a67      	ldr	r2, [pc, #412]	; (800332c <UART_SetConfig+0x38c>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	f003 0207 	and.w	r2, r3, #7
 800319a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4432      	add	r2, r6
 80031a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031a2:	e0b9      	b.n	8003318 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a6:	461c      	mov	r4, r3
 80031a8:	f04f 0500 	mov.w	r5, #0
 80031ac:	4622      	mov	r2, r4
 80031ae:	462b      	mov	r3, r5
 80031b0:	1891      	adds	r1, r2, r2
 80031b2:	6139      	str	r1, [r7, #16]
 80031b4:	415b      	adcs	r3, r3
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031bc:	1912      	adds	r2, r2, r4
 80031be:	eb45 0303 	adc.w	r3, r5, r3
 80031c2:	f04f 0000 	mov.w	r0, #0
 80031c6:	f04f 0100 	mov.w	r1, #0
 80031ca:	00d9      	lsls	r1, r3, #3
 80031cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031d0:	00d0      	lsls	r0, r2, #3
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	eb12 0804 	adds.w	r8, r2, r4
 80031da:	eb43 0905 	adc.w	r9, r3, r5
 80031de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f04f 0100 	mov.w	r1, #0
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	008b      	lsls	r3, r1, #2
 80031f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031f6:	0082      	lsls	r2, r0, #2
 80031f8:	4640      	mov	r0, r8
 80031fa:	4649      	mov	r1, r9
 80031fc:	f7fc fff4 	bl	80001e8 <__aeabi_uldivmod>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4b49      	ldr	r3, [pc, #292]	; (800332c <UART_SetConfig+0x38c>)
 8003206:	fba3 2302 	umull	r2, r3, r3, r2
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	011e      	lsls	r6, r3, #4
 800320e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003210:	4618      	mov	r0, r3
 8003212:	f04f 0100 	mov.w	r1, #0
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	1894      	adds	r4, r2, r2
 800321c:	60bc      	str	r4, [r7, #8]
 800321e:	415b      	adcs	r3, r3
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003226:	1812      	adds	r2, r2, r0
 8003228:	eb41 0303 	adc.w	r3, r1, r3
 800322c:	f04f 0400 	mov.w	r4, #0
 8003230:	f04f 0500 	mov.w	r5, #0
 8003234:	00dd      	lsls	r5, r3, #3
 8003236:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800323a:	00d4      	lsls	r4, r2, #3
 800323c:	4622      	mov	r2, r4
 800323e:	462b      	mov	r3, r5
 8003240:	1814      	adds	r4, r2, r0
 8003242:	64bc      	str	r4, [r7, #72]	; 0x48
 8003244:	414b      	adcs	r3, r1
 8003246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4618      	mov	r0, r3
 800324e:	f04f 0100 	mov.w	r1, #0
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	008b      	lsls	r3, r1, #2
 800325c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003260:	0082      	lsls	r2, r0, #2
 8003262:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003266:	f7fc ffbf 	bl	80001e8 <__aeabi_uldivmod>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4b2f      	ldr	r3, [pc, #188]	; (800332c <UART_SetConfig+0x38c>)
 8003270:	fba3 1302 	umull	r1, r3, r3, r2
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	2164      	movs	r1, #100	; 0x64
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	3332      	adds	r3, #50	; 0x32
 8003282:	4a2a      	ldr	r2, [pc, #168]	; (800332c <UART_SetConfig+0x38c>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800328e:	441e      	add	r6, r3
 8003290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003292:	4618      	mov	r0, r3
 8003294:	f04f 0100 	mov.w	r1, #0
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	1894      	adds	r4, r2, r2
 800329e:	603c      	str	r4, [r7, #0]
 80032a0:	415b      	adcs	r3, r3
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032a8:	1812      	adds	r2, r2, r0
 80032aa:	eb41 0303 	adc.w	r3, r1, r3
 80032ae:	f04f 0400 	mov.w	r4, #0
 80032b2:	f04f 0500 	mov.w	r5, #0
 80032b6:	00dd      	lsls	r5, r3, #3
 80032b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032bc:	00d4      	lsls	r4, r2, #3
 80032be:	4622      	mov	r2, r4
 80032c0:	462b      	mov	r3, r5
 80032c2:	eb12 0a00 	adds.w	sl, r2, r0
 80032c6:	eb43 0b01 	adc.w	fp, r3, r1
 80032ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	008b      	lsls	r3, r1, #2
 80032de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032e2:	0082      	lsls	r2, r0, #2
 80032e4:	4650      	mov	r0, sl
 80032e6:	4659      	mov	r1, fp
 80032e8:	f7fc ff7e 	bl	80001e8 <__aeabi_uldivmod>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4b0e      	ldr	r3, [pc, #56]	; (800332c <UART_SetConfig+0x38c>)
 80032f2:	fba3 1302 	umull	r1, r3, r3, r2
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	2164      	movs	r1, #100	; 0x64
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	3332      	adds	r3, #50	; 0x32
 8003304:	4a09      	ldr	r2, [pc, #36]	; (800332c <UART_SetConfig+0x38c>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	f003 020f 	and.w	r2, r3, #15
 8003310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4432      	add	r2, r6
 8003316:	609a      	str	r2, [r3, #8]
}
 8003318:	bf00      	nop
 800331a:	377c      	adds	r7, #124	; 0x7c
 800331c:	46bd      	mov	sp, r7
 800331e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003322:	bf00      	nop
 8003324:	40011000 	.word	0x40011000
 8003328:	40011400 	.word	0x40011400
 800332c:	51eb851f 	.word	0x51eb851f

08003330 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	7818      	ldrb	r0, [r3, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800334a:	b299      	uxth	r1, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	78db      	ldrb	r3, [r3, #3]
 8003350:	461a      	mov	r2, r3
 8003352:	f000 fff0 	bl	8004336 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8003356:	7bfb      	ldrb	r3, [r7, #15]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003368:	2300      	movs	r3, #0
 800336a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	7818      	ldrb	r0, [r3, #0]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800337a:	b299      	uxth	r1, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	78db      	ldrb	r3, [r3, #3]
 8003380:	461a      	mov	r2, r3
 8003382:	f000 ffe7 	bl	8004354 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8003386:	7bfb      	ldrb	r3, [r7, #15]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b087      	sub	sp, #28
 8003394:	af02      	add	r7, sp, #8
 8003396:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003398:	2300      	movs	r3, #0
 800339a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	7818      	ldrb	r0, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80033aa:	b299      	uxth	r1, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	78da      	ldrb	r2, [r3, #3]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	889b      	ldrh	r3, [r3, #4]
 80033b4:	b29c      	uxth	r4, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	88db      	ldrh	r3, [r3, #6]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	4623      	mov	r3, r4
 80033c0:	f000 ffd7 	bl	8004372 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd90      	pop	{r4, r7, pc}

080033ce <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80033d6:	2300      	movs	r3, #0
 80033d8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 ffd9 	bl	800439a <hci_hardware_error_event>

  return status;
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b0a6      	sub	sp, #152	; 0x98
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800340c:	2300      	movs	r3, #0
 800340e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003412:	e030      	b.n	8003476 <hci_number_of_completed_packets_event_process+0x84>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8003414:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003418:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003424:	b29a      	uxth	r2, r3
 8003426:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003430:	440b      	add	r3, r1
 8003432:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8003436:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800343a:	3302      	adds	r3, #2
 800343c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8003440:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003444:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003450:	b29a      	uxth	r2, r3
 8003452:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800345c:	440b      	add	r3, r1
 800345e:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8003462:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003466:	3302      	adds	r3, #2
 8003468:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800346c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003470:	3301      	adds	r3, #1
 8003472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003476:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003482:	4293      	cmp	r3, r2
 8003484:	dbc6      	blt.n	8003414 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8003486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f107 0208 	add.w	r2, r7, #8
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f000 ff8c 	bl	80043b0 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8003498:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800349c:	4618      	mov	r0, r3
 800349e:	3798      	adds	r7, #152	; 0x98
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80034ac:	2300      	movs	r3, #0
 80034ae:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 ff85 	bl	80043c8 <hci_data_buffer_overflow_event>

  return status;
 80034be:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 ff79 	bl	80043de <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f001 fa01 	bl	8004912 <aci_blue_initialized_event>

  return status;
 8003510:	7bfb      	ldrb	r3, [r7, #15]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4618      	mov	r0, r3
 800352e:	f001 f9fb 	bl	8004928 <aci_blue_events_lost_event>

  return status;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 800353c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003540:	b08d      	sub	sp, #52	; 0x34
 8003542:	af08      	add	r7, sp, #32
 8003544:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003546:	2300      	movs	r3, #0
 8003548:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f893 c000 	ldrb.w	ip, [r3]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f8d3 e001 	ldr.w	lr, [r3, #1]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	f8d1 1015 	ldr.w	r1, [r1, #21]
 800357a:	68b8      	ldr	r0, [r7, #8]
 800357c:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8003580:	68bc      	ldr	r4, [r7, #8]
 8003582:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8003586:	68bd      	ldr	r5, [r7, #8]
 8003588:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 800358c:	68be      	ldr	r6, [r7, #8]
 800358e:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8003596:	9307      	str	r3, [sp, #28]
 8003598:	9606      	str	r6, [sp, #24]
 800359a:	9505      	str	r5, [sp, #20]
 800359c:	9404      	str	r4, [sp, #16]
 800359e:	9003      	str	r0, [sp, #12]
 80035a0:	9102      	str	r1, [sp, #8]
 80035a2:	9201      	str	r2, [sp, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	464b      	mov	r3, r9
 80035aa:	4642      	mov	r2, r8
 80035ac:	4671      	mov	r1, lr
 80035ae:	4660      	mov	r0, ip
 80035b0:	f001 f9c4 	bl	800493c <aci_blue_crash_info_event>

  return status;
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080035c0 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	7818      	ldrb	r0, [r3, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	7859      	ldrb	r1, [r3, #1]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80035de:	461a      	mov	r2, r3
 80035e0:	f001 f9ba 	bl	8004958 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80035f6:	2300      	movs	r3, #0
 80035f8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f993 0000 	ldrsb.w	r0, [r3]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 800360c:	461a      	mov	r2, r3
 800360e:	f001 f9b1 	bl	8004974 <aci_hal_scan_req_report_event>

  return status;
 8003612:	7bfb      	ldrb	r3, [r7, #15]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003624:	2300      	movs	r3, #0
 8003626:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	7818      	ldrb	r0, [r3, #0]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8003638:	461a      	mov	r2, r3
 800363a:	f001 f9a9 	bl	8004990 <aci_hal_fw_error_event>

  return status;
 800363e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003650:	2300      	movs	r3, #0
 8003652:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8003654:	f000 ff59 	bl	800450a <aci_gap_limited_discoverable_event>

  return status;
 8003658:	7bfb      	ldrb	r3, [r7, #15]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800366a:	2300      	movs	r3, #0
 800366c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b298      	uxth	r0, r3
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	7899      	ldrb	r1, [r3, #2]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	78db      	ldrb	r3, [r3, #3]
 8003680:	461a      	mov	r2, r3
 8003682:	f000 ff49 	bl	8004518 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003698:	2300      	movs	r3, #0
 800369a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 ff45 	bl	8004536 <aci_gap_pass_key_req_event>

  return status;
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 ff3d 	bl	800454c <aci_gap_authorization_req_event>

  return status;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 80036e8:	f000 ff3b 	bl	8004562 <aci_gap_slave_security_initiated_event>

  return status;
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80036fe:	2300      	movs	r3, #0
 8003700:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8003702:	f000 ff35 	bl	8004570 <aci_gap_bond_lost_event>

  return status;
 8003706:	7bfb      	ldrb	r3, [r7, #15]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003718:	2300      	movs	r3, #0
 800371a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	7818      	ldrb	r0, [r3, #0]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	7859      	ldrb	r1, [r3, #1]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8003730:	f000 ff25 	bl	800457e <aci_gap_proc_complete_event>

  return status;
 8003734:	7bfb      	ldrb	r3, [r7, #15]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	4618      	mov	r0, r3
 8003756:	f000 ff22 	bl	800459e <aci_gap_addr_not_resolved_event>

  return status;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800376c:	2300      	movs	r3, #0
 800376e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	b29a      	uxth	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 ff16 	bl	80045b4 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8003788:	7bfb      	ldrb	r3, [r7, #15]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	789b      	ldrb	r3, [r3, #2]
 80037ac:	4619      	mov	r1, r3
 80037ae:	4610      	mov	r0, r2
 80037b0:	f000 ff0c 	bl	80045cc <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	885b      	ldrh	r3, [r3, #2]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	4619      	mov	r1, r3
 80037dc:	4610      	mov	r0, r2
 80037de:	f001 f854 	bl	800488a <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b298      	uxth	r0, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800380a:	461a      	mov	r2, r3
 800380c:	f001 f84b 	bl	80048a6 <aci_l2cap_proc_timeout_event>

  return status;
 8003810:	7bfb      	ldrb	r3, [r7, #15]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 800381a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381c:	b089      	sub	sp, #36	; 0x24
 800381e:	af04      	add	r7, sp, #16
 8003820:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003822:	2300      	movs	r3, #0
 8003824:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b298      	uxth	r0, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	789c      	ldrb	r4, [r3, #2]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800383a:	b29d      	uxth	r5, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8003842:	b29e      	uxth	r6, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800384a:	b29b      	uxth	r3, r3
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8003852:	b292      	uxth	r2, r2
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 800385a:	b289      	uxth	r1, r1
 800385c:	9102      	str	r1, [sp, #8]
 800385e:	9201      	str	r2, [sp, #4]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	4633      	mov	r3, r6
 8003864:	462a      	mov	r2, r5
 8003866:	4621      	mov	r1, r4
 8003868:	f001 f82b 	bl	80048c2 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 800386c:	7bfb      	ldrb	r3, [r7, #15]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003876 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8003876:	b590      	push	{r4, r7, lr}
 8003878:	b087      	sub	sp, #28
 800387a:	af02      	add	r7, sp, #8
 800387c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	b298      	uxth	r0, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	7899      	ldrb	r1, [r3, #2]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003896:	b29a      	uxth	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	4623      	mov	r3, r4
 80038a4:	f001 f821 	bl	80048ea <aci_l2cap_command_reject_event>

  return status;
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd90      	pop	{r4, r7, pc}

080038b2 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 80038b2:	b590      	push	{r4, r7, lr}
 80038b4:	b087      	sub	sp, #28
 80038b6:	af02      	add	r7, sp, #8
 80038b8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b298      	uxth	r0, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	885b      	ldrh	r3, [r3, #2]
 80038cc:	b299      	uxth	r1, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	889b      	ldrh	r3, [r3, #4]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	88db      	ldrh	r3, [r3, #6]
 80038d8:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	4623      	mov	r3, r4
 80038e2:	f000 fe81 	bl	80045e8 <aci_gatt_attribute_modified_event>

  return status;
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd90      	pop	{r4, r7, pc}

080038f0 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fe82 	bl	8004610 <aci_gatt_proc_timeout_event>

  return status;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800391e:	2300      	movs	r3, #0
 8003920:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	b29a      	uxth	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	885b      	ldrh	r3, [r3, #2]
 8003930:	b29b      	uxth	r3, r3
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f000 fe76 	bl	8004626 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b298      	uxth	r0, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	7899      	ldrb	r1, [r3, #2]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8003966:	f000 fe6c 	bl	8004642 <aci_att_find_info_resp_event>

  return status;
 800396a:	7bfb      	ldrb	r3, [r7, #15]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b0a6      	sub	sp, #152	; 0x98
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800397c:	2300      	movs	r3, #0
 800397e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8003988:	2303      	movs	r3, #3
 800398a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800398e:	2300      	movs	r3, #0
 8003990:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003994:	e030      	b.n	80039f8 <aci_att_find_by_type_value_resp_event_process+0x84>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8003996:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800399a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80039b2:	440b      	add	r3, r1
 80039b4:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 80039b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80039bc:	3302      	adds	r3, #2
 80039be:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 80039c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80039c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80039de:	440b      	add	r3, r1
 80039e0:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 80039e4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80039e8:	3302      	adds	r3, #2
 80039ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80039ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039f2:	3301      	adds	r3, #1
 80039f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039fc:	789b      	ldrb	r3, [r3, #2]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a04:	4293      	cmp	r3, r2
 8003a06:	dbc6      	blt.n	8003996 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8003a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	b298      	uxth	r0, r3
 8003a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a14:	789b      	ldrb	r3, [r3, #2]
 8003a16:	f107 0208 	add.w	r2, r7, #8
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	f000 fe21 	bl	8004662 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8003a20:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3798      	adds	r7, #152	; 0x98
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003a34:	2300      	movs	r3, #0
 8003a36:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b298      	uxth	r0, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	7899      	ldrb	r1, [r3, #2]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8003a4e:	f000 fe16 	bl	800467e <aci_att_read_by_type_resp_event>

  return status;
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003a64:	2300      	movs	r3, #0
 8003a66:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	b298      	uxth	r0, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f000 fe0f 	bl	800469e <aci_att_read_resp_event>

  return status;
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b298      	uxth	r0, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	f000 fe06 	bl	80046ba <aci_att_read_blob_resp_event>

  return status;
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b298      	uxth	r0, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f000 fdfd 	bl	80046d6 <aci_att_read_multiple_resp_event>

  return status;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	b298      	uxth	r0, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	7899      	ldrb	r1, [r3, #2]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8003b08:	f000 fdf3 	bl	80046f2 <aci_att_read_by_group_type_resp_event>

  return status;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8003b16:	b590      	push	{r4, r7, lr}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	af02      	add	r7, sp, #8
 8003b1c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b298      	uxth	r0, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	885b      	ldrh	r3, [r3, #2]
 8003b30:	b299      	uxth	r1, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	889b      	ldrh	r3, [r3, #4]
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	4623      	mov	r3, r4
 8003b44:	f000 fde5 	bl	8004712 <aci_att_prepare_write_resp_event>

  return status;
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd90      	pop	{r4, r7, pc}

08003b52 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fde6 	bl	800473a <aci_att_exec_write_resp_event>

  return status;
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003b80:	2300      	movs	r3, #0
 8003b82:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	b298      	uxth	r0, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	885b      	ldrh	r3, [r3, #2]
 8003b92:	b299      	uxth	r1, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8003b9c:	f000 fdd8 	bl	8004750 <aci_gatt_indication_event>

  return status;
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b298      	uxth	r0, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	885b      	ldrh	r3, [r3, #2]
 8003bc4:	b299      	uxth	r1, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8003bce:	f000 fdcf 	bl	8004770 <aci_gatt_notification_event>

  return status;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	789b      	ldrb	r3, [r3, #2]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	f000 fdc9 	bl	8004790 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c10:	2300      	movs	r3, #0
 8003c12:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	b298      	uxth	r0, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	7899      	ldrb	r1, [r3, #2]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	795b      	ldrb	r3, [r3, #5]
 8003c2e:	f000 fdbd 	bl	80047ac <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c44:	2300      	movs	r3, #0
 8003c46:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b298      	uxth	r0, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	885b      	ldrh	r3, [r3, #2]
 8003c56:	b299      	uxth	r1, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8003c60:	f000 fdb8 	bl	80047d4 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b298      	uxth	r0, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	885b      	ldrh	r3, [r3, #2]
 8003c88:	b299      	uxth	r1, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8003c92:	f000 fdaf 	bl	80047f4 <aci_gatt_write_permit_req_event>

  return status;
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b298      	uxth	r0, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	885b      	ldrh	r3, [r3, #2]
 8003cba:	b299      	uxth	r1, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	889b      	ldrh	r3, [r3, #4]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f7fd fa72 	bl	80011ac <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b0a6      	sub	sp, #152	; 0x98
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cf2:	e01a      	b.n	8003d2a <aci_gatt_read_multi_permit_req_event_process+0x58>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8003cf4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003cf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	4413      	add	r3, r2
 8003d00:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003d10:	440b      	add	r3, r1
 8003d12:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8003d16:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003d1a:	3302      	adds	r3, #2
 8003d1c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8003d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d24:	3301      	adds	r3, #1
 8003d26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d2e:	789b      	ldrb	r3, [r3, #2]
 8003d30:	461a      	mov	r2, r3
 8003d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d36:	4293      	cmp	r3, r2
 8003d38:	dbdc      	blt.n	8003cf4 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8003d3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	b298      	uxth	r0, r3
 8003d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d46:	789b      	ldrb	r3, [r3, #2]
 8003d48:	f107 0208 	add.w	r2, r7, #8
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f000 fd61 	bl	8004814 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8003d52:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3798      	adds	r7, #152	; 0x98
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	885b      	ldrh	r3, [r3, #2]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f000 fd57 	bl	8004830 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003d94:	2300      	movs	r3, #0
 8003d96:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fd52 	bl	800484c <aci_gatt_server_confirmation_event>

  return status;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8003db2:	b590      	push	{r4, r7, lr}
 8003db4:	b087      	sub	sp, #28
 8003db6:	af02      	add	r7, sp, #8
 8003db8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	b298      	uxth	r0, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	885b      	ldrh	r3, [r3, #2]
 8003dcc:	b299      	uxth	r1, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	889b      	ldrh	r3, [r3, #4]
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	4623      	mov	r3, r4
 8003de0:	f000 fd3f 	bl	8004862 <aci_gatt_prepare_write_permit_req_event>

  return status;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd90      	pop	{r4, r7, pc}

08003dee <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8003dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df0:	b08b      	sub	sp, #44	; 0x2c
 8003df2:	af06      	add	r7, sp, #24
 8003df4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	781d      	ldrb	r5, [r3, #0]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003e08:	b29e      	uxth	r6, r3
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8003e20:	b292      	uxth	r2, r2
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8003e28:	b289      	uxth	r1, r1
 8003e2a:	68b8      	ldr	r0, [r7, #8]
 8003e2c:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8003e30:	b280      	uxth	r0, r0
 8003e32:	68bc      	ldr	r4, [r7, #8]
 8003e34:	7c64      	ldrb	r4, [r4, #17]
 8003e36:	9404      	str	r4, [sp, #16]
 8003e38:	9003      	str	r0, [sp, #12]
 8003e3a:	9102      	str	r1, [sp, #8]
 8003e3c:	9201      	str	r2, [sp, #4]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	4673      	mov	r3, lr
 8003e42:	4662      	mov	r2, ip
 8003e44:	4631      	mov	r1, r6
 8003e46:	4628      	mov	r0, r5
 8003e48:	f7fd f9c2 	bl	80011d0 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e56 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b0a4      	sub	sp, #144	; 0x90
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8003e70:	2300      	movs	r3, #0
 8003e72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e76:	e0b8      	b.n	8003fea <hci_le_advertising_report_event_process+0x194>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8003e78:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003e7c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	7819      	ldrb	r1, [r3, #0]
 8003e90:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3b88      	subs	r3, #136	; 0x88
 8003ea4:	460a      	mov	r2, r1
 8003ea6:	701a      	strb	r2, [r3, #0]
    size += 1;
 8003ea8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003eac:	3301      	adds	r3, #1
 8003eae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8003eb2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003eb6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4413      	add	r3, r2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	7819      	ldrb	r1, [r3, #0]
 8003eca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003eda:	4413      	add	r3, r2
 8003edc:	3b87      	subs	r3, #135	; 0x87
 8003ede:	460a      	mov	r2, r1
 8003ee0:	701a      	strb	r2, [r3, #0]
    size += 1;
 8003ee2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8003eec:	f107 0108 	add.w	r1, r7, #8
 8003ef0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	1c98      	adds	r0, r3, #2
 8003f00:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f12:	4413      	add	r3, r2
 8003f14:	3303      	adds	r3, #3
 8003f16:	2206      	movs	r2, #6
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f001 fdc3 	bl	8005aa4 <memcpy>
    size += 6;
 8003f1e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003f22:	3306      	adds	r3, #6
 8003f24:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8003f28:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003f2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	3309      	adds	r3, #9
 8003f3e:	7819      	ldrb	r1, [r3, #0]
 8003f40:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003f50:	4413      	add	r3, r2
 8003f52:	3b80      	subs	r3, #128	; 0x80
 8003f54:	460a      	mov	r2, r1
 8003f56:	701a      	strb	r2, [r3, #0]
    size += 1;
 8003f58:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8003f62:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	3308      	adds	r3, #8
 8003f72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f76:	4413      	add	r3, r2
 8003f78:	1c99      	adds	r1, r3, #2
 8003f7a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3b7c      	subs	r3, #124	; 0x7c
 8003f8e:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8003f90:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003f94:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	4413      	add	r3, r2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3309      	adds	r3, #9
 8003fa6:	781a      	ldrb	r2, [r3, #0]
 8003fa8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003fac:	4413      	add	r3, r2
 8003fae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8003fb2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	b259      	sxtb	r1, r3
 8003fbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003fce:	4413      	add	r3, r2
 8003fd0:	3b78      	subs	r3, #120	; 0x78
 8003fd2:	460a      	mov	r2, r1
 8003fd4:	701a      	strb	r2, [r3, #0]
    size += 1;
 8003fd6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003fda:	3301      	adds	r3, #1
 8003fdc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 8003fe0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	f6ff af3e 	blt.w	8003e78 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 8003ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	f107 0208 	add.w	r2, r7, #8
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f9f6 	bl	80043fa <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800400e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004012:	4618      	mov	r0, r3
 8004014:	3790      	adds	r7, #144	; 0x90
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800401a:	b590      	push	{r4, r7, lr}
 800401c:	b087      	sub	sp, #28
 800401e:	af02      	add	r7, sp, #8
 8004020:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	7818      	ldrb	r0, [r3, #0]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004034:	b299      	uxth	r1, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800403c:	b29a      	uxth	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004044:	b29c      	uxth	r4, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800404c:	b29b      	uxth	r3, r3
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	4623      	mov	r3, r4
 8004052:	f000 f9de 	bl	8004412 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8004056:	7bfb      	ldrb	r3, [r7, #15]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	bd90      	pop	{r4, r7, pc}

08004060 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004068:	2300      	movs	r3, #0
 800406a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	7818      	ldrb	r0, [r3, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800407a:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8004080:	461a      	mov	r2, r3
 8004082:	f000 f9da 	bl	800443a <hci_le_read_remote_used_features_complete_event>

  return status;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004098:	2300      	movs	r3, #0
 800409a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	895b      	ldrh	r3, [r3, #10]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	f000 f9d0 	bl	8004456 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80040c8:	2300      	movs	r3, #0
 80040ca:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	b298      	uxth	r0, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	885b      	ldrh	r3, [r3, #2]
 80040da:	b299      	uxth	r1, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	889b      	ldrh	r3, [r3, #4]
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	88db      	ldrh	r3, [r3, #6]
 80040e6:	b29c      	uxth	r4, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	891b      	ldrh	r3, [r3, #8]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4623      	mov	r3, r4
 80040f2:	f000 f9be 	bl	8004472 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd90      	pop	{r4, r7, pc}

08004100 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004108:	2300      	movs	r3, #0
 800410a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f000 f9bd 	bl	800449a <hci_le_read_local_p256_public_key_complete_event>

  return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004132:	2300      	movs	r3, #0
 8004134:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f000 f9b4 	bl	80044b2 <hci_le_generate_dhkey_complete_event>

  return status;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8004154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004158:	b08d      	sub	sp, #52	; 0x34
 800415a:	af08      	add	r7, sp, #32
 800415c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800415e:	2300      	movs	r3, #0
 8004160:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f893 c000 	ldrb.w	ip, [r3]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004172:	fa1f fe83 	uxth.w	lr, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f893 8003 	ldrb.w	r8, [r3, #3]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800418e:	68b8      	ldr	r0, [r7, #8]
 8004190:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 8004194:	b280      	uxth	r0, r0
 8004196:	68bc      	ldr	r4, [r7, #8]
 8004198:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800419c:	b2a4      	uxth	r4, r4
 800419e:	68bd      	ldr	r5, [r7, #8]
 80041a0:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 80041a4:	b2ad      	uxth	r5, r5
 80041a6:	68be      	ldr	r6, [r7, #8]
 80041a8:	7f76      	ldrb	r6, [r6, #29]
 80041aa:	9606      	str	r6, [sp, #24]
 80041ac:	9505      	str	r5, [sp, #20]
 80041ae:	9404      	str	r4, [sp, #16]
 80041b0:	9003      	str	r0, [sp, #12]
 80041b2:	9102      	str	r1, [sp, #8]
 80041b4:	9201      	str	r2, [sp, #4]
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	464b      	mov	r3, r9
 80041ba:	4642      	mov	r2, r8
 80041bc:	4671      	mov	r1, lr
 80041be:	4660      	mov	r0, ip
 80041c0:	f000 f983 	bl	80044ca <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080041d0 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b0a6      	sub	sp, #152	; 0x98
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80041d8:	2300      	movs	r3, #0
 80041da:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80041ea:	2300      	movs	r3, #0
 80041ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041f0:	e089      	b.n	8004306 <hci_le_direct_advertising_report_event_process+0x136>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 80041f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80041f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	4413      	add	r3, r2
 80041fe:	3301      	adds	r3, #1
 8004200:	781a      	ldrb	r2, [r3, #0]
 8004202:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800420c:	440b      	add	r3, r1
 800420e:	3b90      	subs	r3, #144	; 0x90
 8004210:	701a      	strb	r2, [r3, #0]
    size += 1;
 8004212:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004216:	3301      	adds	r3, #1
 8004218:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800421c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004220:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	4413      	add	r3, r2
 8004228:	3302      	adds	r3, #2
 800422a:	781a      	ldrb	r2, [r3, #0]
 800422c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8004236:	440b      	add	r3, r1
 8004238:	3b8f      	subs	r3, #143	; 0x8f
 800423a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800423c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004240:	3301      	adds	r3, #1
 8004242:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8004246:	f107 0208 	add.w	r2, r7, #8
 800424a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	4413      	add	r3, r2
 8004252:	1c98      	adds	r0, r3, #2
 8004254:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800425e:	4413      	add	r3, r2
 8004260:	3303      	adds	r3, #3
 8004262:	2206      	movs	r2, #6
 8004264:	4619      	mov	r1, r3
 8004266:	f001 fc1d 	bl	8005aa4 <memcpy>
    size += 6;
 800426a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800426e:	3306      	adds	r3, #6
 8004270:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8004274:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	4413      	add	r3, r2
 8004280:	3309      	adds	r3, #9
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800428e:	440b      	add	r3, r1
 8004290:	3b88      	subs	r3, #136	; 0x88
 8004292:	701a      	strb	r2, [r3, #0]
    size += 1;
 8004294:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004298:	3301      	adds	r3, #1
 800429a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800429e:	f107 0208 	add.w	r2, r7, #8
 80042a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	3308      	adds	r3, #8
 80042aa:	4413      	add	r3, r2
 80042ac:	1c58      	adds	r0, r3, #1
 80042ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	3308      	adds	r3, #8
 80042b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80042ba:	4413      	add	r3, r2
 80042bc:	3302      	adds	r3, #2
 80042be:	2206      	movs	r2, #6
 80042c0:	4619      	mov	r1, r3
 80042c2:	f001 fbef 	bl	8005aa4 <memcpy>
    size += 6;
 80042c6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80042ca:	3306      	adds	r3, #6
 80042cc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 80042d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80042d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	4413      	add	r3, r2
 80042dc:	3310      	adds	r3, #16
 80042de:	f993 2000 	ldrsb.w	r2, [r3]
 80042e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80042ec:	440b      	add	r3, r1
 80042ee:	3b81      	subs	r3, #129	; 0x81
 80042f0:	701a      	strb	r2, [r3, #0]
    size += 1;
 80042f2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80042f6:	3301      	adds	r3, #1
 80042f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 80042fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004300:	3301      	adds	r3, #1
 8004302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004306:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004312:	4293      	cmp	r3, r2
 8004314:	f6ff af6d 	blt.w	80041f2 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 8004318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	f107 0208 	add.w	r2, r7, #8
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f000 f8e4 	bl	80044f2 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800432a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800432e:	4618      	mov	r0, r3
 8004330:	3798      	adds	r7, #152	; 0x98
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <hci_disconnection_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason))
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	4603      	mov	r3, r0
 800433e:	71fb      	strb	r3, [r7, #7]
 8004340:	460b      	mov	r3, r1
 8004342:	80bb      	strh	r3, [r7, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_disconnection_complete_event\r\n");
            
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	71fb      	strb	r3, [r7, #7]
 800435e:	460b      	mov	r3, r1
 8004360:	80bb      	strh	r3, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8004372:	b490      	push	{r4, r7}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	4604      	mov	r4, r0
 800437a:	4608      	mov	r0, r1
 800437c:	4611      	mov	r1, r2
 800437e:	461a      	mov	r2, r3
 8004380:	4623      	mov	r3, r4
 8004382:	71fb      	strb	r3, [r7, #7]
 8004384:	4603      	mov	r3, r0
 8004386:	80bb      	strh	r3, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	71bb      	strb	r3, [r7, #6]
 800438c:	4613      	mov	r3, r2
 800438e:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bc90      	pop	{r4, r7}
 8004398:	4770      	bx	lr

0800439a <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	4603      	mov	r3, r0
 80043a2:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	6039      	str	r1, [r7, #0]
 80043ba:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	4603      	mov	r3, r0
 80043e6:	460a      	mov	r2, r1
 80043e8:	71fb      	strb	r3, [r7, #7]
 80043ea:	4613      	mov	r3, r2
 80043ec:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	4603      	mov	r3, r0
 8004402:	6039      	str	r1, [r7, #0]
 8004404:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 8004412:	b490      	push	{r4, r7}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	4604      	mov	r4, r0
 800441a:	4608      	mov	r0, r1
 800441c:	4611      	mov	r1, r2
 800441e:	461a      	mov	r2, r3
 8004420:	4623      	mov	r3, r4
 8004422:	71fb      	strb	r3, [r7, #7]
 8004424:	4603      	mov	r3, r0
 8004426:	80bb      	strh	r3, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	807b      	strh	r3, [r7, #2]
 800442c:	4613      	mov	r3, r2
 800442e:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bc90      	pop	{r4, r7}
 8004438:	4770      	bx	lr

0800443a <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	4603      	mov	r3, r0
 8004442:	603a      	str	r2, [r7, #0]
 8004444:	71fb      	strb	r3, [r7, #7]
 8004446:	460b      	mov	r3, r1
 8004448:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	4603      	mov	r3, r0
 800445e:	6039      	str	r1, [r7, #0]
 8004460:	80fb      	strh	r3, [r7, #6]
 8004462:	4613      	mov	r3, r2
 8004464:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8004472:	b490      	push	{r4, r7}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	4604      	mov	r4, r0
 800447a:	4608      	mov	r0, r1
 800447c:	4611      	mov	r1, r2
 800447e:	461a      	mov	r2, r3
 8004480:	4623      	mov	r3, r4
 8004482:	80fb      	strh	r3, [r7, #6]
 8004484:	4603      	mov	r3, r0
 8004486:	80bb      	strh	r3, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	807b      	strh	r3, [r7, #2]
 800448c:	4613      	mov	r3, r2
 800448e:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bc90      	pop	{r4, r7}
 8004498:	4770      	bx	lr

0800449a <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	4603      	mov	r3, r0
 80044a2:	6039      	str	r1, [r7, #0]
 80044a4:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	4603      	mov	r3, r0
 80044ba:	6039      	str	r1, [r7, #0]
 80044bc:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 80044ca:	b490      	push	{r4, r7}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4604      	mov	r4, r0
 80044d2:	4608      	mov	r0, r1
 80044d4:	4611      	mov	r1, r2
 80044d6:	461a      	mov	r2, r3
 80044d8:	4623      	mov	r3, r4
 80044da:	71fb      	strb	r3, [r7, #7]
 80044dc:	4603      	mov	r3, r0
 80044de:	80bb      	strh	r3, [r7, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	71bb      	strb	r3, [r7, #6]
 80044e4:	4613      	mov	r3, r2
 80044e6:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc90      	pop	{r4, r7}
 80044f0:	4770      	bx	lr

080044f2 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	4603      	mov	r3, r0
 80044fa:	6039      	str	r1, [r7, #0]
 80044fc:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 800450a:	b480      	push	{r7}
 800450c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 800450e:	bf00      	nop
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	80fb      	strh	r3, [r7, #6]
 8004522:	460b      	mov	r3, r1
 8004524:	717b      	strb	r3, [r7, #5]
 8004526:	4613      	mov	r3, r2
 8004528:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	4603      	mov	r3, r0
 800453e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8004562:	b480      	push	{r7}
 8004564:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8004566:	bf00      	nop
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	603b      	str	r3, [r7, #0]
 8004586:	4603      	mov	r3, r0
 8004588:	71fb      	strb	r3, [r7, #7]
 800458a:	460b      	mov	r3, r1
 800458c:	71bb      	strb	r3, [r7, #6]
 800458e:	4613      	mov	r3, r2
 8004590:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	4603      	mov	r3, r0
 80045a6:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	6039      	str	r1, [r7, #0]
 80045be:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	460a      	mov	r2, r1
 80045d6:	80fb      	strh	r3, [r7, #6]
 80045d8:	4613      	mov	r3, r2
 80045da:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <aci_gatt_attribute_modified_event>:
WEAK_FUNCTION(void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[]))
{
 80045e8:	b490      	push	{r4, r7}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4604      	mov	r4, r0
 80045f0:	4608      	mov	r0, r1
 80045f2:	4611      	mov	r1, r2
 80045f4:	461a      	mov	r2, r3
 80045f6:	4623      	mov	r3, r4
 80045f8:	80fb      	strh	r3, [r7, #6]
 80045fa:	4603      	mov	r3, r0
 80045fc:	80bb      	strh	r3, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	807b      	strh	r3, [r7, #2]
 8004602:	4613      	mov	r3, r2
 8004604:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_attribute_modified_event\r\n");
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bc90      	pop	{r4, r7}
 800460e:	4770      	bx	lr

08004610 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	4603      	mov	r3, r0
 800462e:	460a      	mov	r2, r1
 8004630:	80fb      	strh	r3, [r7, #6]
 8004632:	4613      	mov	r3, r2
 8004634:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	4603      	mov	r3, r0
 800464c:	80fb      	strh	r3, [r7, #6]
 800464e:	460b      	mov	r3, r1
 8004650:	717b      	strb	r3, [r7, #5]
 8004652:	4613      	mov	r3, r2
 8004654:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	4603      	mov	r3, r0
 800466a:	603a      	str	r2, [r7, #0]
 800466c:	80fb      	strh	r3, [r7, #6]
 800466e:	460b      	mov	r3, r1
 8004670:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	603b      	str	r3, [r7, #0]
 8004686:	4603      	mov	r3, r0
 8004688:	80fb      	strh	r3, [r7, #6]
 800468a:	460b      	mov	r3, r1
 800468c:	717b      	strb	r3, [r7, #5]
 800468e:	4613      	mov	r3, r2
 8004690:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	4603      	mov	r3, r0
 80046a6:	603a      	str	r2, [r7, #0]
 80046a8:	80fb      	strh	r3, [r7, #6]
 80046aa:	460b      	mov	r3, r1
 80046ac:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	4603      	mov	r3, r0
 80046c2:	603a      	str	r2, [r7, #0]
 80046c4:	80fb      	strh	r3, [r7, #6]
 80046c6:	460b      	mov	r3, r1
 80046c8:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	4603      	mov	r3, r0
 80046de:	603a      	str	r2, [r7, #0]
 80046e0:	80fb      	strh	r3, [r7, #6]
 80046e2:	460b      	mov	r3, r1
 80046e4:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	603b      	str	r3, [r7, #0]
 80046fa:	4603      	mov	r3, r0
 80046fc:	80fb      	strh	r3, [r7, #6]
 80046fe:	460b      	mov	r3, r1
 8004700:	717b      	strb	r3, [r7, #5]
 8004702:	4613      	mov	r3, r2
 8004704:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8004712:	b490      	push	{r4, r7}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	4604      	mov	r4, r0
 800471a:	4608      	mov	r0, r1
 800471c:	4611      	mov	r1, r2
 800471e:	461a      	mov	r2, r3
 8004720:	4623      	mov	r3, r4
 8004722:	80fb      	strh	r3, [r7, #6]
 8004724:	4603      	mov	r3, r0
 8004726:	80bb      	strh	r3, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	807b      	strh	r3, [r7, #2]
 800472c:	4613      	mov	r3, r2
 800472e:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bc90      	pop	{r4, r7}
 8004738:	4770      	bx	lr

0800473a <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	4603      	mov	r3, r0
 8004742:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	4603      	mov	r3, r0
 800475a:	81fb      	strh	r3, [r7, #14]
 800475c:	460b      	mov	r3, r1
 800475e:	81bb      	strh	r3, [r7, #12]
 8004760:	4613      	mov	r3, r2
 8004762:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <aci_gatt_notification_event>:
*/
WEAK_FUNCTION(void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[]))
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	607b      	str	r3, [r7, #4]
 8004778:	4603      	mov	r3, r0
 800477a:	81fb      	strh	r3, [r7, #14]
 800477c:	460b      	mov	r3, r1
 800477e:	81bb      	strh	r3, [r7, #12]
 8004780:	4613      	mov	r3, r2
 8004782:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_notification_event\r\n");
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	460a      	mov	r2, r1
 800479a:	80fb      	strh	r3, [r7, #6]
 800479c:	4613      	mov	r3, r2
 800479e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 80047ac:	b490      	push	{r4, r7}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4604      	mov	r4, r0
 80047b4:	4608      	mov	r0, r1
 80047b6:	4611      	mov	r1, r2
 80047b8:	461a      	mov	r2, r3
 80047ba:	4623      	mov	r3, r4
 80047bc:	80fb      	strh	r3, [r7, #6]
 80047be:	4603      	mov	r3, r0
 80047c0:	717b      	strb	r3, [r7, #5]
 80047c2:	460b      	mov	r3, r1
 80047c4:	807b      	strh	r3, [r7, #2]
 80047c6:	4613      	mov	r3, r2
 80047c8:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc90      	pop	{r4, r7}
 80047d2:	4770      	bx	lr

080047d4 <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	4603      	mov	r3, r0
 80047de:	81fb      	strh	r3, [r7, #14]
 80047e0:	460b      	mov	r3, r1
 80047e2:	81bb      	strh	r3, [r7, #12]
 80047e4:	4613      	mov	r3, r2
 80047e6:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	607b      	str	r3, [r7, #4]
 80047fc:	4603      	mov	r3, r0
 80047fe:	81fb      	strh	r3, [r7, #14]
 8004800:	460b      	mov	r3, r1
 8004802:	81bb      	strh	r3, [r7, #12]
 8004804:	4613      	mov	r3, r2
 8004806:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 8004808:	bf00      	nop
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	603a      	str	r2, [r7, #0]
 800481e:	80fb      	strh	r3, [r7, #6]
 8004820:	460b      	mov	r3, r1
 8004822:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	460a      	mov	r2, r1
 800483a:	80fb      	strh	r3, [r7, #6]
 800483c:	4613      	mov	r3, r2
 800483e:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 8004862:	b490      	push	{r4, r7}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	4604      	mov	r4, r0
 800486a:	4608      	mov	r0, r1
 800486c:	4611      	mov	r1, r2
 800486e:	461a      	mov	r2, r3
 8004870:	4623      	mov	r3, r4
 8004872:	80fb      	strh	r3, [r7, #6]
 8004874:	4603      	mov	r3, r0
 8004876:	80bb      	strh	r3, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	807b      	strh	r3, [r7, #2]
 800487c:	4613      	mov	r3, r2
 800487e:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bc90      	pop	{r4, r7}
 8004888:	4770      	bx	lr

0800488a <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	4603      	mov	r3, r0
 8004892:	460a      	mov	r2, r1
 8004894:	80fb      	strh	r3, [r7, #6]
 8004896:	4613      	mov	r3, r2
 8004898:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	4603      	mov	r3, r0
 80048ae:	603a      	str	r2, [r7, #0]
 80048b0:	80fb      	strh	r3, [r7, #6]
 80048b2:	460b      	mov	r3, r1
 80048b4:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 80048c2:	b490      	push	{r4, r7}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	4604      	mov	r4, r0
 80048ca:	4608      	mov	r0, r1
 80048cc:	4611      	mov	r1, r2
 80048ce:	461a      	mov	r2, r3
 80048d0:	4623      	mov	r3, r4
 80048d2:	80fb      	strh	r3, [r7, #6]
 80048d4:	4603      	mov	r3, r0
 80048d6:	717b      	strb	r3, [r7, #5]
 80048d8:	460b      	mov	r3, r1
 80048da:	807b      	strh	r3, [r7, #2]
 80048dc:	4613      	mov	r3, r2
 80048de:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc90      	pop	{r4, r7}
 80048e8:	4770      	bx	lr

080048ea <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 80048ea:	b490      	push	{r4, r7}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	4604      	mov	r4, r0
 80048f2:	4608      	mov	r0, r1
 80048f4:	4611      	mov	r1, r2
 80048f6:	461a      	mov	r2, r3
 80048f8:	4623      	mov	r3, r4
 80048fa:	80fb      	strh	r3, [r7, #6]
 80048fc:	4603      	mov	r3, r0
 80048fe:	717b      	strb	r3, [r7, #5]
 8004900:	460b      	mov	r3, r1
 8004902:	807b      	strh	r3, [r7, #2]
 8004904:	4613      	mov	r3, r2
 8004906:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8004908:	bf00      	nop
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bc90      	pop	{r4, r7}
 8004910:	4770      	bx	lr

08004912 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	4603      	mov	r3, r0
 800491a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	4603      	mov	r3, r0
 800494a:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	603a      	str	r2, [r7, #0]
 8004962:	71fb      	strb	r3, [r7, #7]
 8004964:	460b      	mov	r3, r1
 8004966:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	603a      	str	r2, [r7, #0]
 800497e:	71fb      	strb	r3, [r7, #7]
 8004980:	460b      	mov	r3, r1
 8004982:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	603a      	str	r2, [r7, #0]
 800499a:	71fb      	strb	r3, [r7, #7]
 800499c:	460b      	mov	r3, r1
 800499e:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80049b6:	f107 0308 	add.w	r3, r7, #8
 80049ba:	2218      	movs	r2, #24
 80049bc:	2100      	movs	r1, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f001 f87e 	bl	8005ac0 <memset>
  rq.ogf = 0x03;
 80049c4:	2303      	movs	r3, #3
 80049c6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80049c8:	2303      	movs	r3, #3
 80049ca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80049cc:	1dfb      	adds	r3, r7, #7
 80049ce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80049d0:	2301      	movs	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80049d4:	f107 0308 	add.w	r3, r7, #8
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fd8e 	bl	80054fc <hci_send_req>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	da01      	bge.n	80049ea <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80049e6:	23ff      	movs	r3, #255	; 0xff
 80049e8:	e005      	b.n	80049f6 <hci_reset+0x4a>
  if (status) {
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <hci_reset+0x48>
    return status;
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	e000      	b.n	80049f6 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3720      	adds	r7, #32
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 80049fe:	b5b0      	push	{r4, r5, r7, lr}
 8004a00:	b0ce      	sub	sp, #312	; 0x138
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	4605      	mov	r5, r0
 8004a06:	460c      	mov	r4, r1
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	1dfb      	adds	r3, r7, #7
 8004a0e:	462a      	mov	r2, r5
 8004a10:	701a      	strb	r2, [r3, #0]
 8004a12:	1d3b      	adds	r3, r7, #4
 8004a14:	4622      	mov	r2, r4
 8004a16:	801a      	strh	r2, [r3, #0]
 8004a18:	1cbb      	adds	r3, r7, #2
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	1dbb      	adds	r3, r7, #6
 8004a20:	460a      	mov	r2, r1
 8004a22:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8004a24:	f107 030c 	add.w	r3, r7, #12
 8004a28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004a2c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004a30:	3308      	adds	r3, #8
 8004a32:	f107 020c 	add.w	r2, r7, #12
 8004a36:	4413      	add	r3, r2
 8004a38:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004a3c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004a40:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004a44:	4413      	add	r3, r2
 8004a46:	3309      	adds	r3, #9
 8004a48:	f107 020c 	add.w	r2, r7, #12
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004a52:	f107 030b 	add.w	r3, r7, #11
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8004a60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a64:	1dfa      	adds	r2, r7, #7
 8004a66:	7812      	ldrb	r2, [r2, #0]
 8004a68:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004a6a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8004a74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a78:	1d3a      	adds	r2, r7, #4
 8004a7a:	8812      	ldrh	r2, [r2, #0]
 8004a7c:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8004a80:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004a84:	3302      	adds	r3, #2
 8004a86:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8004a8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a8e:	1cba      	adds	r2, r7, #2
 8004a90:	8812      	ldrh	r2, [r2, #0]
 8004a92:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8004a96:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8004aa0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004aa4:	1dba      	adds	r2, r7, #6
 8004aa6:	7812      	ldrb	r2, [r2, #0]
 8004aa8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004aaa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004aae:	3301      	adds	r3, #1
 8004ab0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8004ab4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ab8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8004abc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004abe:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8004ac8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004acc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004ad0:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004ad2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8004adc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004ae6:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 ffda 	bl	8005aa4 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8004af0:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8004af4:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004af8:	4413      	add	r3, r2
 8004afa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8004afe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b02:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004b06:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004b08:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8004b12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b16:	3301      	adds	r3, #1
 8004b18:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004b1c:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 ffbf 	bl	8005aa4 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 8004b26:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8004b2a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004b2e:	4413      	add	r3, r2
 8004b30:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8004b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b38:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8004b3c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004b3e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004b42:	3302      	adds	r3, #2
 8004b44:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8004b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b4c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8004b50:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004b52:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004b56:	3302      	adds	r3, #2
 8004b58:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004b5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b60:	2218      	movs	r2, #24
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 ffab 	bl	8005ac0 <memset>
  rq.ogf = 0x3f;
 8004b6a:	233f      	movs	r3, #63	; 0x3f
 8004b6c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8004b70:	2383      	movs	r3, #131	; 0x83
 8004b72:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004b76:	f107 030c 	add.w	r3, r7, #12
 8004b7a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004b7e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004b82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004b86:	f107 030b 	add.w	r3, r7, #11
 8004b8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8004b94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b98:	2100      	movs	r1, #0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fcae 	bl	80054fc <hci_send_req>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da01      	bge.n	8004baa <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8004ba6:	23ff      	movs	r3, #255	; 0xff
 8004ba8:	e009      	b.n	8004bbe <aci_gap_set_discoverable+0x1c0>
  if (status) {
 8004baa:	f107 030b 	add.w	r3, r7, #11
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <aci_gap_set_discoverable+0x1be>
    return status;
 8004bb4:	f107 030b 	add.w	r3, r7, #11
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	e000      	b.n	8004bbe <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bdb0      	pop	{r4, r5, r7, pc}

08004bc8 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8004bc8:	b590      	push	{r4, r7, lr}
 8004bca:	b0cf      	sub	sp, #316	; 0x13c
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4604      	mov	r4, r0
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	463a      	mov	r2, r7
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	1dfb      	adds	r3, r7, #7
 8004bda:	4622      	mov	r2, r4
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	1dbb      	adds	r3, r7, #6
 8004be0:	4602      	mov	r2, r0
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	1d7b      	adds	r3, r7, #5
 8004be6:	460a      	mov	r2, r1
 8004be8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004bea:	f107 0314 	add.w	r3, r7, #20
 8004bee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004bf2:	f107 030c 	add.w	r3, r7, #12
 8004bf6:	2207      	movs	r2, #7
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 ff60 	bl	8005ac0 <memset>
  uint8_t index_input = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 8004c06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c0a:	1dfa      	adds	r2, r7, #7
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004c10:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004c14:	3301      	adds	r3, #1
 8004c16:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8004c1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c1e:	1dba      	adds	r2, r7, #6
 8004c20:	7812      	ldrb	r2, [r2, #0]
 8004c22:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004c24:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004c28:	3301      	adds	r3, #1
 8004c2a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8004c2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c32:	1d7a      	adds	r2, r7, #5
 8004c34:	7812      	ldrb	r2, [r2, #0]
 8004c36:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004c38:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004c42:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004c46:	2218      	movs	r2, #24
 8004c48:	2100      	movs	r1, #0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 ff38 	bl	8005ac0 <memset>
  rq.ogf = 0x3f;
 8004c50:	233f      	movs	r3, #63	; 0x3f
 8004c52:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 8004c56:	238a      	movs	r3, #138	; 0x8a
 8004c58:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004c5c:	f107 0314 	add.w	r3, r7, #20
 8004c60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004c64:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004c68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8004c6c:	f107 030c 	add.w	r3, r7, #12
 8004c70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8004c74:	2307      	movs	r3, #7
 8004c76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8004c7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fc3b 	bl	80054fc <hci_send_req>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	da01      	bge.n	8004c90 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8004c8c:	23ff      	movs	r3, #255	; 0xff
 8004c8e:	e021      	b.n	8004cd4 <aci_gap_init+0x10c>
  if (resp.Status) {
 8004c90:	f107 030c 	add.w	r3, r7, #12
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <aci_gap_init+0xda>
    return resp.Status;
 8004c9a:	f107 030c 	add.w	r3, r7, #12
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	e018      	b.n	8004cd4 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004ca2:	f107 030c 	add.w	r3, r7, #12
 8004ca6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	463b      	mov	r3, r7
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8004cb2:	f107 030c 	add.w	r3, r7, #12
 8004cb6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004cc0:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8004cc2:	f107 030c 	add.w	r3, r7, #12
 8004cc6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cd0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd90      	pop	{r4, r7, pc}

08004cde <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b088      	sub	sp, #32
 8004ce2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004ce8:	f107 0308 	add.w	r3, r7, #8
 8004cec:	2218      	movs	r2, #24
 8004cee:	2100      	movs	r1, #0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fee5 	bl	8005ac0 <memset>
  rq.ogf = 0x3f;
 8004cf6:	233f      	movs	r3, #63	; 0x3f
 8004cf8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004cfa:	f240 1301 	movw	r3, #257	; 0x101
 8004cfe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004d00:	1dfb      	adds	r3, r7, #7
 8004d02:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004d04:	2301      	movs	r3, #1
 8004d06:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004d08:	f107 0308 	add.w	r3, r7, #8
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fbf4 	bl	80054fc <hci_send_req>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	da01      	bge.n	8004d1e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004d1a:	23ff      	movs	r3, #255	; 0xff
 8004d1c:	e005      	b.n	8004d2a <aci_gatt_init+0x4c>
  if (status) {
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <aci_gatt_init+0x4a>
    return status;
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	e000      	b.n	8004d2a <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8004d32:	b590      	push	{r4, r7, lr}
 8004d34:	b0cf      	sub	sp, #316	; 0x13c
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4604      	mov	r4, r0
 8004d3a:	4638      	mov	r0, r7
 8004d3c:	6001      	str	r1, [r0, #0]
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	1dfb      	adds	r3, r7, #7
 8004d44:	4622      	mov	r2, r4
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	1dbb      	adds	r3, r7, #6
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	1d7b      	adds	r3, r7, #5
 8004d50:	460a      	mov	r2, r1
 8004d52:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8004d54:	f107 030c 	add.w	r3, r7, #12
 8004d58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004d5c:	1dfb      	adds	r3, r7, #7
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d007      	beq.n	8004d74 <aci_gatt_add_service+0x42>
 8004d64:	1dfb      	adds	r3, r7, #7
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d101      	bne.n	8004d70 <aci_gatt_add_service+0x3e>
 8004d6c:	2311      	movs	r3, #17
 8004d6e:	e002      	b.n	8004d76 <aci_gatt_add_service+0x44>
 8004d70:	2301      	movs	r3, #1
 8004d72:	e000      	b.n	8004d76 <aci_gatt_add_service+0x44>
 8004d74:	2303      	movs	r3, #3
 8004d76:	f107 020c 	add.w	r2, r7, #12
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004d80:	f107 0308 	add.w	r3, r7, #8
 8004d84:	2203      	movs	r2, #3
 8004d86:	2100      	movs	r1, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 fe99 	bl	8005ac0 <memset>
  uint8_t index_input = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8004d94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d98:	1dfa      	adds	r2, r7, #7
 8004d9a:	7812      	ldrb	r2, [r2, #0]
 8004d9c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004d9e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004da2:	3301      	adds	r3, #1
 8004da4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d002      	beq.n	8004db6 <aci_gatt_add_service+0x84>
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d004      	beq.n	8004dbe <aci_gatt_add_service+0x8c>
 8004db4:	e007      	b.n	8004dc6 <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 8004db6:	2302      	movs	r3, #2
 8004db8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004dbc:	e005      	b.n	8004dca <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8004dbe:	2310      	movs	r3, #16
 8004dc0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004dc4:	e001      	b.n	8004dca <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8004dc6:	2347      	movs	r3, #71	; 0x47
 8004dc8:	e05d      	b.n	8004e86 <aci_gatt_add_service+0x154>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8004dca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004dce:	1c58      	adds	r0, r3, #1
 8004dd0:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8004dd4:	463b      	mov	r3, r7
 8004dd6:	6819      	ldr	r1, [r3, #0]
 8004dd8:	f000 fe64 	bl	8005aa4 <memcpy>
    index_input += size;
 8004ddc:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8004de0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8004de4:	4413      	add	r3, r2
 8004de6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8004dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dee:	1dba      	adds	r2, r7, #6
 8004df0:	7812      	ldrb	r2, [r2, #0]
 8004df2:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004df4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004df8:	3301      	adds	r3, #1
 8004dfa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8004dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e02:	1d7a      	adds	r2, r7, #5
 8004e04:	7812      	ldrb	r2, [r2, #0]
 8004e06:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8004e08:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004e12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e16:	2218      	movs	r2, #24
 8004e18:	2100      	movs	r1, #0
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fe50 	bl	8005ac0 <memset>
  rq.ogf = 0x3f;
 8004e20:	233f      	movs	r3, #63	; 0x3f
 8004e22:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8004e26:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004e2a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004e2e:	f107 030c 	add.w	r3, r7, #12
 8004e32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004e36:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004e3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004e3e:	f107 0308 	add.w	r3, r7, #8
 8004e42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004e46:	2303      	movs	r3, #3
 8004e48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8004e4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e50:	2100      	movs	r1, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fb52 	bl	80054fc <hci_send_req>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	da01      	bge.n	8004e62 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8004e5e:	23ff      	movs	r3, #255	; 0xff
 8004e60:	e011      	b.n	8004e86 <aci_gatt_add_service+0x154>
  if (resp.Status) {
 8004e62:	f107 0308 	add.w	r3, r7, #8
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <aci_gatt_add_service+0x142>
    return resp.Status;
 8004e6c:	f107 0308 	add.w	r3, r7, #8
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	e008      	b.n	8004e86 <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004e74:	f107 0308 	add.w	r3, r7, #8
 8004e78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004e82:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd90      	pop	{r4, r7, pc}

08004e90 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b0d1      	sub	sp, #324	; 0x144
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4604      	mov	r4, r0
 8004e98:	4608      	mov	r0, r1
 8004e9a:	f107 0108 	add.w	r1, r7, #8
 8004e9e:	600a      	str	r2, [r1, #0]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f107 030e 	add.w	r3, r7, #14
 8004ea6:	4622      	mov	r2, r4
 8004ea8:	801a      	strh	r2, [r3, #0]
 8004eaa:	f107 030d 	add.w	r3, r7, #13
 8004eae:	4602      	mov	r2, r0
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	1dbb      	adds	r3, r7, #6
 8004eb4:	460a      	mov	r2, r1
 8004eb6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8004eb8:	f107 0314 	add.w	r3, r7, #20
 8004ebc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004ec0:	f107 030d 	add.w	r3, r7, #13
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d008      	beq.n	8004edc <aci_gatt_add_char+0x4c>
 8004eca:	f107 030d 	add.w	r3, r7, #13
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d101      	bne.n	8004ed8 <aci_gatt_add_char+0x48>
 8004ed4:	2313      	movs	r3, #19
 8004ed6:	e002      	b.n	8004ede <aci_gatt_add_char+0x4e>
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e000      	b.n	8004ede <aci_gatt_add_char+0x4e>
 8004edc:	2305      	movs	r3, #5
 8004ede:	f107 0214 	add.w	r2, r7, #20
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004ee8:	f107 0310 	add.w	r3, r7, #16
 8004eec:	2203      	movs	r2, #3
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fde5 	bl	8005ac0 <memset>
  uint8_t index_input = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 8004efc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f00:	f107 020e 	add.w	r2, r7, #14
 8004f04:	8812      	ldrh	r2, [r2, #0]
 8004f06:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004f08:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8004f12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f16:	f107 020d 	add.w	r2, r7, #13
 8004f1a:	7812      	ldrb	r2, [r2, #0]
 8004f1c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004f1e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004f22:	3301      	adds	r3, #1
 8004f24:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8004f28:	f107 030d 	add.w	r3, r7, #13
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d002      	beq.n	8004f38 <aci_gatt_add_char+0xa8>
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d004      	beq.n	8004f40 <aci_gatt_add_char+0xb0>
 8004f36:	e007      	b.n	8004f48 <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 8004f38:	2302      	movs	r3, #2
 8004f3a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004f3e:	e005      	b.n	8004f4c <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8004f40:	2310      	movs	r3, #16
 8004f42:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004f46:	e001      	b.n	8004f4c <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8004f48:	2347      	movs	r3, #71	; 0x47
 8004f4a:	e086      	b.n	800505a <aci_gatt_add_char+0x1ca>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8004f4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f50:	1cd8      	adds	r0, r3, #3
 8004f52:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8004f56:	f107 0308 	add.w	r3, r7, #8
 8004f5a:	6819      	ldr	r1, [r3, #0]
 8004f5c:	f000 fda2 	bl	8005aa4 <memcpy>
    index_input += size;
 8004f60:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8004f64:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8004f68:	4413      	add	r3, r2
 8004f6a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8004f6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f72:	1dba      	adds	r2, r7, #6
 8004f74:	8812      	ldrh	r2, [r2, #0]
 8004f76:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004f78:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004f7c:	3302      	adds	r3, #2
 8004f7e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8004f82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f86:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004f8a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8004f8c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004f90:	3301      	adds	r3, #1
 8004f92:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8004f96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f9a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004f9e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8004fa0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8004faa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fae:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8004fb2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8004fb4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004fb8:	3301      	adds	r3, #1
 8004fba:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8004fbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fc2:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8004fc6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8004fc8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004fcc:	3301      	adds	r3, #1
 8004fce:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8004fd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fd6:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8004fda:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8004fdc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004fe6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004fea:	2218      	movs	r2, #24
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fd66 	bl	8005ac0 <memset>
  rq.ogf = 0x3f;
 8004ff4:	233f      	movs	r3, #63	; 0x3f
 8004ff6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8004ffa:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004ffe:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005002:	f107 0314 	add.w	r3, r7, #20
 8005006:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800500a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800500e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005012:	f107 0310 	add.w	r3, r7, #16
 8005016:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800501a:	2303      	movs	r3, #3
 800501c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005020:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005024:	2100      	movs	r1, #0
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fa68 	bl	80054fc <hci_send_req>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	da01      	bge.n	8005036 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8005032:	23ff      	movs	r3, #255	; 0xff
 8005034:	e011      	b.n	800505a <aci_gatt_add_char+0x1ca>
  if (resp.Status) {
 8005036:	f107 0310 	add.w	r3, r7, #16
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8005040:	f107 0310 	add.w	r3, r7, #16
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	e008      	b.n	800505a <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8005048:	f107 0310 	add.w	r3, r7, #16
 800504c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005050:	b29a      	uxth	r2, r3
 8005052:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005056:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8005060:	46bd      	mov	sp, r7
 8005062:	bd90      	pop	{r4, r7, pc}

08005064 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8005064:	b5b0      	push	{r4, r5, r7, lr}
 8005066:	b0cc      	sub	sp, #304	; 0x130
 8005068:	af00      	add	r7, sp, #0
 800506a:	4605      	mov	r5, r0
 800506c:	460c      	mov	r4, r1
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	1dbb      	adds	r3, r7, #6
 8005074:	462a      	mov	r2, r5
 8005076:	801a      	strh	r2, [r3, #0]
 8005078:	1d3b      	adds	r3, r7, #4
 800507a:	4622      	mov	r2, r4
 800507c:	801a      	strh	r2, [r3, #0]
 800507e:	1cfb      	adds	r3, r7, #3
 8005080:	4602      	mov	r2, r0
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	1cbb      	adds	r3, r7, #2
 8005086:	460a      	mov	r2, r1
 8005088:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800508a:	f107 030c 	add.w	r3, r7, #12
 800508e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005092:	f107 030b 	add.w	r3, r7, #11
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 80050a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a4:	1dba      	adds	r2, r7, #6
 80050a6:	8812      	ldrh	r2, [r2, #0]
 80050a8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80050aa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80050ae:	3302      	adds	r3, #2
 80050b0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 80050b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b8:	1d3a      	adds	r2, r7, #4
 80050ba:	8812      	ldrh	r2, [r2, #0]
 80050bc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80050be:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80050c2:	3302      	adds	r3, #2
 80050c4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 80050c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050cc:	1cfa      	adds	r2, r7, #3
 80050ce:	7812      	ldrb	r2, [r2, #0]
 80050d0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80050d2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80050d6:	3301      	adds	r3, #1
 80050d8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 80050dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e0:	1cba      	adds	r2, r7, #2
 80050e2:	7812      	ldrb	r2, [r2, #0]
 80050e4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80050e6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80050ea:	3301      	adds	r3, #1
 80050ec:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 80050f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f4:	1d98      	adds	r0, r3, #6
 80050f6:	1cbb      	adds	r3, r7, #2
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005100:	f000 fcd0 	bl	8005aa4 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 8005104:	1cbb      	adds	r3, r7, #2
 8005106:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	4413      	add	r3, r2
 800510e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005112:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005116:	2218      	movs	r2, #24
 8005118:	2100      	movs	r1, #0
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fcd0 	bl	8005ac0 <memset>
  rq.ogf = 0x3f;
 8005120:	233f      	movs	r3, #63	; 0x3f
 8005122:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8005126:	f44f 7383 	mov.w	r3, #262	; 0x106
 800512a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800512e:	f107 030c 	add.w	r3, r7, #12
 8005132:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005136:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800513a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800513e:	f107 030b 	add.w	r3, r7, #11
 8005142:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005146:	2301      	movs	r3, #1
 8005148:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800514c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005150:	2100      	movs	r1, #0
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f9d2 	bl	80054fc <hci_send_req>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	da01      	bge.n	8005162 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800515e:	23ff      	movs	r3, #255	; 0xff
 8005160:	e009      	b.n	8005176 <aci_gatt_update_char_value+0x112>
  if (status) {
 8005162:	f107 030b 	add.w	r3, r7, #11
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <aci_gatt_update_char_value+0x110>
    return status;
 800516c:	f107 030b 	add.w	r3, r7, #11
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	e000      	b.n	8005176 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800517c:	46bd      	mov	sp, r7
 800517e:	bdb0      	pop	{r4, r5, r7, pc}

08005180 <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b0cc      	sub	sp, #304	; 0x130
 8005184:	af00      	add	r7, sp, #0
 8005186:	4602      	mov	r2, r0
 8005188:	1dbb      	adds	r3, r7, #6
 800518a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 800518c:	f107 030c 	add.w	r3, r7, #12
 8005190:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005194:	f107 030b 	add.w	r3, r7, #11
 8005198:	2200      	movs	r2, #0
 800519a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800519c:	2300      	movs	r3, #0
 800519e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80051a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a6:	1dba      	adds	r2, r7, #6
 80051a8:	8812      	ldrh	r2, [r2, #0]
 80051aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80051ac:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80051b0:	3302      	adds	r3, #2
 80051b2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80051b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051ba:	2218      	movs	r2, #24
 80051bc:	2100      	movs	r1, #0
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fc7e 	bl	8005ac0 <memset>
  rq.ogf = 0x3f;
 80051c4:	233f      	movs	r3, #63	; 0x3f
 80051c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 80051ca:	f240 1327 	movw	r3, #295	; 0x127
 80051ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80051d2:	f107 030c 	add.w	r3, r7, #12
 80051d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80051da:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80051de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80051e2:	f107 030b 	add.w	r3, r7, #11
 80051e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80051f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051f4:	2100      	movs	r1, #0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 f980 	bl	80054fc <hci_send_req>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	da01      	bge.n	8005206 <aci_gatt_allow_read+0x86>
    return BLE_STATUS_TIMEOUT;
 8005202:	23ff      	movs	r3, #255	; 0xff
 8005204:	e009      	b.n	800521a <aci_gatt_allow_read+0x9a>
  if (status) {
 8005206:	f107 030b 	add.w	r3, r7, #11
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <aci_gatt_allow_read+0x98>
    return status;
 8005210:	f107 030b 	add.w	r3, r7, #11
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	e000      	b.n	800521a <aci_gatt_allow_read+0x9a>
  }
  return BLE_STATUS_SUCCESS;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b0cc      	sub	sp, #304	; 0x130
 8005228:	af00      	add	r7, sp, #0
 800522a:	463b      	mov	r3, r7
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	1dfb      	adds	r3, r7, #7
 8005230:	4602      	mov	r2, r0
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	1dbb      	adds	r3, r7, #6
 8005236:	460a      	mov	r2, r1
 8005238:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800523a:	f107 030c 	add.w	r3, r7, #12
 800523e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005242:	f107 030b 	add.w	r3, r7, #11
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800524a:	2300      	movs	r3, #0
 800524c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 8005250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005254:	1dfa      	adds	r2, r7, #7
 8005256:	7812      	ldrb	r2, [r2, #0]
 8005258:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800525a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800525e:	3301      	adds	r3, #1
 8005260:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 8005264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005268:	1dba      	adds	r2, r7, #6
 800526a:	7812      	ldrb	r2, [r2, #0]
 800526c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800526e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005272:	3301      	adds	r3, #1
 8005274:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8005278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527c:	1c98      	adds	r0, r3, #2
 800527e:	1dbb      	adds	r3, r7, #6
 8005280:	781a      	ldrb	r2, [r3, #0]
 8005282:	463b      	mov	r3, r7
 8005284:	6819      	ldr	r1, [r3, #0]
 8005286:	f000 fc0d 	bl	8005aa4 <memcpy>
    index_input += Length*sizeof(uint8_t);
 800528a:	1dbb      	adds	r3, r7, #6
 800528c:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	4413      	add	r3, r2
 8005294:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005298:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800529c:	2218      	movs	r2, #24
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fc0d 	bl	8005ac0 <memset>
  rq.ogf = 0x3f;
 80052a6:	233f      	movs	r3, #63	; 0x3f
 80052a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80052ac:	230c      	movs	r3, #12
 80052ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80052b2:	f107 030c 	add.w	r3, r7, #12
 80052b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80052ba:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80052be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80052c2:	f107 030b 	add.w	r3, r7, #11
 80052c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80052d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052d4:	2100      	movs	r1, #0
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f910 	bl	80054fc <hci_send_req>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	da01      	bge.n	80052e6 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80052e2:	23ff      	movs	r3, #255	; 0xff
 80052e4:	e009      	b.n	80052fa <aci_hal_write_config_data+0xd6>
  if (status) {
 80052e6:	f107 030b 	add.w	r3, r7, #11
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <aci_hal_write_config_data+0xd4>
    return status;
 80052f0:	f107 030b 	add.w	r3, r7, #11
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	e000      	b.n	80052fa <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3308      	adds	r3, #8
 8005310:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b04      	cmp	r3, #4
 8005318:	d001      	beq.n	800531e <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800531a:	2301      	movs	r3, #1
 800531c:	e00c      	b.n	8005338 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3302      	adds	r3, #2
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800532c:	3b03      	subs	r3, #3
 800532e:	429a      	cmp	r2, r3
 8005330:	d001      	beq.n	8005336 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8005332:	2302      	movs	r3, #2
 8005334:	e000      	b.n	8005338 <verify_packet+0x34>
  
  return 0;      
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b0a6      	sub	sp, #152	; 0x98
 8005348:	af00      	add	r7, sp, #0
 800534a:	607b      	str	r3, [r7, #4]
 800534c:	4603      	mov	r3, r0
 800534e:	81fb      	strh	r3, [r7, #14]
 8005350:	460b      	mov	r3, r1
 8005352:	81bb      	strh	r3, [r7, #12]
 8005354:	4613      	mov	r3, r2
 8005356:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8005358:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800535c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005360:	b21a      	sxth	r2, r3
 8005362:	89fb      	ldrh	r3, [r7, #14]
 8005364:	029b      	lsls	r3, r3, #10
 8005366:	b21b      	sxth	r3, r3
 8005368:	4313      	orrs	r3, r2
 800536a:	b21b      	sxth	r3, r3
 800536c:	b29b      	uxth	r3, r3
 800536e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8005370:	7afb      	ldrb	r3, [r7, #11]
 8005372:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8005374:	2301      	movs	r3, #1
 8005376:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8005378:	f107 0318 	add.w	r3, r7, #24
 800537c:	3301      	adds	r3, #1
 800537e:	461a      	mov	r2, r3
 8005380:	f107 0314 	add.w	r3, r7, #20
 8005384:	8819      	ldrh	r1, [r3, #0]
 8005386:	789b      	ldrb	r3, [r3, #2]
 8005388:	8011      	strh	r1, [r2, #0]
 800538a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800538c:	f107 0318 	add.w	r3, r7, #24
 8005390:	3304      	adds	r3, #4
 8005392:	7afa      	ldrb	r2, [r7, #11]
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fb84 	bl	8005aa4 <memcpy>
  
  if (hciContext.io.Send)
 800539c:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <send_cmd+0x7c>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d009      	beq.n	80053b8 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80053a4:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <send_cmd+0x7c>)
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	7afa      	ldrb	r2, [r7, #11]
 80053aa:	b292      	uxth	r2, r2
 80053ac:	3204      	adds	r2, #4
 80053ae:	b291      	uxth	r1, r2
 80053b0:	f107 0218 	add.w	r2, r7, #24
 80053b4:	4610      	mov	r0, r2
 80053b6:	4798      	blx	r3
  }
}
 80053b8:	bf00      	nop
 80053ba:	3798      	adds	r7, #152	; 0x98
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20000728 	.word	0x20000728

080053c4 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80053ce:	e00a      	b.n	80053e6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80053d0:	f107 030c 	add.w	r3, r7, #12
 80053d4:	4619      	mov	r1, r3
 80053d6:	6838      	ldr	r0, [r7, #0]
 80053d8:	f000 faea 	bl	80059b0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fa51 	bl	8005888 <list_insert_head>
  while (!list_is_empty(src_list))
 80053e6:	6838      	ldr	r0, [r7, #0]
 80053e8:	f000 fa2c 	bl	8005844 <list_is_empty>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0ee      	beq.n	80053d0 <move_list+0xc>
  }
}
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005402:	e009      	b.n	8005418 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8005404:	1d3b      	adds	r3, r7, #4
 8005406:	4619      	mov	r1, r3
 8005408:	4809      	ldr	r0, [pc, #36]	; (8005430 <free_event_list+0x34>)
 800540a:	f000 faaa 	bl	8005962 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4619      	mov	r1, r3
 8005412:	4808      	ldr	r0, [pc, #32]	; (8005434 <free_event_list+0x38>)
 8005414:	f000 fa5e 	bl	80058d4 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005418:	4806      	ldr	r0, [pc, #24]	; (8005434 <free_event_list+0x38>)
 800541a:	f000 faf0 	bl	80059fe <list_get_size>
 800541e:	4603      	mov	r3, r0
 8005420:	2b04      	cmp	r3, #4
 8005422:	ddef      	ble.n	8005404 <free_event_list+0x8>
  }
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	2000080c 	.word	0x2000080c
 8005434:	20000804 	.word	0x20000804

08005438 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8005448:	4a18      	ldr	r2, [pc, #96]	; (80054ac <hci_init+0x74>)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800544e:	4818      	ldr	r0, [pc, #96]	; (80054b0 <hci_init+0x78>)
 8005450:	f000 f9e8 	bl	8005824 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8005454:	4817      	ldr	r0, [pc, #92]	; (80054b4 <hci_init+0x7c>)
 8005456:	f000 f9e5 	bl	8005824 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800545a:	f7fb f9d9 	bl	8000810 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800545e:	2300      	movs	r3, #0
 8005460:	73fb      	strb	r3, [r7, #15]
 8005462:	e00c      	b.n	800547e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	228c      	movs	r2, #140	; 0x8c
 8005468:	fb02 f303 	mul.w	r3, r2, r3
 800546c:	4a12      	ldr	r2, [pc, #72]	; (80054b8 <hci_init+0x80>)
 800546e:	4413      	add	r3, r2
 8005470:	4619      	mov	r1, r3
 8005472:	480f      	ldr	r0, [pc, #60]	; (80054b0 <hci_init+0x78>)
 8005474:	f000 fa2e 	bl	80058d4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	3301      	adds	r3, #1
 800547c:	73fb      	strb	r3, [r7, #15]
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	2b09      	cmp	r3, #9
 8005482:	d9ef      	bls.n	8005464 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005484:	4b09      	ldr	r3, [pc, #36]	; (80054ac <hci_init+0x74>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <hci_init+0x5c>
 800548c:	4b07      	ldr	r3, [pc, #28]	; (80054ac <hci_init+0x74>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2000      	movs	r0, #0
 8005492:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005494:	4b05      	ldr	r3, [pc, #20]	; (80054ac <hci_init+0x74>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <hci_init+0x6a>
 800549c:	4b03      	ldr	r3, [pc, #12]	; (80054ac <hci_init+0x74>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4798      	blx	r3
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000728 	.word	0x20000728
 80054b0:	20000804 	.word	0x20000804
 80054b4:	2000080c 	.word	0x2000080c
 80054b8:	200001b0 	.word	0x200001b0

080054bc <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a0b      	ldr	r2, [pc, #44]	; (80054f8 <hci_register_io_bus+0x3c>)
 80054ca:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	4a09      	ldr	r2, [pc, #36]	; (80054f8 <hci_register_io_bus+0x3c>)
 80054d2:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	4a07      	ldr	r2, [pc, #28]	; (80054f8 <hci_register_io_bus+0x3c>)
 80054da:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	4a05      	ldr	r2, [pc, #20]	; (80054f8 <hci_register_io_bus+0x3c>)
 80054e2:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	4a03      	ldr	r2, [pc, #12]	; (80054f8 <hci_register_io_bus+0x3c>)
 80054ea:	6093      	str	r3, [r2, #8]
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	20000728 	.word	0x20000728

080054fc <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08e      	sub	sp, #56	; 0x38
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	885b      	ldrh	r3, [r3, #2]
 800550c:	b21b      	sxth	r3, r3
 800550e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005512:	b21a      	sxth	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	029b      	lsls	r3, r3, #10
 800551a:	b21b      	sxth	r3, r3
 800551c:	4313      	orrs	r3, r2
 800551e:	b21b      	sxth	r3, r3
 8005520:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8005526:	f107 0308 	add.w	r3, r7, #8
 800552a:	4618      	mov	r0, r3
 800552c:	f000 f97a 	bl	8005824 <list_init_head>

  free_event_list();
 8005530:	f7ff ff64 	bl	80053fc <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8818      	ldrh	r0, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	8859      	ldrh	r1, [r3, #2]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	b2da      	uxtb	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f7ff fefd 	bl	8005344 <send_cmd>
  
  if (async)
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <hci_send_req+0x58>
  {
    return 0;
 8005550:	2300      	movs	r3, #0
 8005552:	e0e5      	b.n	8005720 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8005554:	f7fc f8d0 	bl	80016f8 <HAL_GetTick>
 8005558:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800555a:	f7fc f8cd 	bl	80016f8 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005568:	f200 80b6 	bhi.w	80056d8 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800556c:	486e      	ldr	r0, [pc, #440]	; (8005728 <hci_send_req+0x22c>)
 800556e:	f000 f969 	bl	8005844 <list_is_empty>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d000      	beq.n	800557a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005578:	e7ef      	b.n	800555a <hci_send_req+0x5e>
      {
        break;
 800557a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800557c:	f107 0310 	add.w	r3, r7, #16
 8005580:	4619      	mov	r1, r3
 8005582:	4869      	ldr	r0, [pc, #420]	; (8005728 <hci_send_req+0x22c>)
 8005584:	f000 f9ed 	bl	8005962 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	3308      	adds	r3, #8
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b04      	cmp	r3, #4
 8005594:	d17b      	bne.n	800568e <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8005596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005598:	3301      	adds	r3, #1
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	3308      	adds	r3, #8
 80055a0:	3303      	adds	r3, #3
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80055aa:	3b03      	subs	r3, #3
 80055ac:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b3e      	cmp	r3, #62	; 0x3e
 80055b4:	d04d      	beq.n	8005652 <hci_send_req+0x156>
 80055b6:	2b3e      	cmp	r3, #62	; 0x3e
 80055b8:	dc6b      	bgt.n	8005692 <hci_send_req+0x196>
 80055ba:	2b10      	cmp	r3, #16
 80055bc:	f000 808e 	beq.w	80056dc <hci_send_req+0x1e0>
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	dc66      	bgt.n	8005692 <hci_send_req+0x196>
 80055c4:	2b0e      	cmp	r3, #14
 80055c6:	d024      	beq.n	8005612 <hci_send_req+0x116>
 80055c8:	2b0f      	cmp	r3, #15
 80055ca:	d162      	bne.n	8005692 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	885b      	ldrh	r3, [r3, #2]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80055d8:	429a      	cmp	r2, r3
 80055da:	f040 8081 	bne.w	80056e0 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b0f      	cmp	r3, #15
 80055e4:	d004      	beq.n	80055f0 <hci_send_req+0xf4>
          if (cs->status) {
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d053      	beq.n	8005696 <hci_send_req+0x19a>
            goto failed;
 80055ee:	e07a      	b.n	80056e6 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	695a      	ldr	r2, [r3, #20]
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	bf28      	it	cs
 80055fa:	461a      	movcs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6918      	ldr	r0, [r3, #16]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	461a      	mov	r2, r3
 800560a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800560c:	f000 fa4a 	bl	8005aa4 <memcpy>
        goto done;
 8005610:	e07a      	b.n	8005708 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800561c:	b29b      	uxth	r3, r3
 800561e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005620:	429a      	cmp	r2, r3
 8005622:	d15f      	bne.n	80056e4 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	3303      	adds	r3, #3
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	3b03      	subs	r3, #3
 800562e:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	429a      	cmp	r2, r3
 8005638:	bf28      	it	cs
 800563a:	461a      	movcs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6918      	ldr	r0, [r3, #16]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	461a      	mov	r2, r3
 800564a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800564c:	f000 fa2a 	bl	8005aa4 <memcpy>
        goto done;
 8005650:	e05a      	b.n	8005708 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d11a      	bne.n	800569a <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	3b01      	subs	r3, #1
 8005668:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	429a      	cmp	r2, r3
 8005672:	bf28      	it	cs
 8005674:	461a      	movcs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6918      	ldr	r0, [r3, #16]
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	1c59      	adds	r1, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	461a      	mov	r2, r3
 8005688:	f000 fa0c 	bl	8005aa4 <memcpy>
        goto done;
 800568c:	e03c      	b.n	8005708 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800568e:	bf00      	nop
 8005690:	e004      	b.n	800569c <hci_send_req+0x1a0>
        break;
 8005692:	bf00      	nop
 8005694:	e002      	b.n	800569c <hci_send_req+0x1a0>
          break;
 8005696:	bf00      	nop
 8005698:	e000      	b.n	800569c <hci_send_req+0x1a0>
          break;
 800569a:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800569c:	4823      	ldr	r0, [pc, #140]	; (800572c <hci_send_req+0x230>)
 800569e:	f000 f8d1 	bl	8005844 <list_is_empty>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00d      	beq.n	80056c4 <hci_send_req+0x1c8>
 80056a8:	481f      	ldr	r0, [pc, #124]	; (8005728 <hci_send_req+0x22c>)
 80056aa:	f000 f8cb 	bl	8005844 <list_is_empty>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4619      	mov	r1, r3
 80056b8:	481c      	ldr	r0, [pc, #112]	; (800572c <hci_send_req+0x230>)
 80056ba:	f000 f90b 	bl	80058d4 <list_insert_tail>
      hciReadPacket=NULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	e008      	b.n	80056d6 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	f107 0308 	add.w	r3, r7, #8
 80056ca:	4611      	mov	r1, r2
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 f901 	bl	80058d4 <list_insert_tail>
      hciReadPacket=NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	613b      	str	r3, [r7, #16]
  {
 80056d6:	e73d      	b.n	8005554 <hci_send_req+0x58>
        goto failed;
 80056d8:	bf00      	nop
 80056da:	e004      	b.n	80056e6 <hci_send_req+0x1ea>
        goto failed;
 80056dc:	bf00      	nop
 80056de:	e002      	b.n	80056e6 <hci_send_req+0x1ea>
          goto failed;
 80056e0:	bf00      	nop
 80056e2:	e000      	b.n	80056e6 <hci_send_req+0x1ea>
          goto failed;
 80056e4:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d004      	beq.n	80056f6 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	4619      	mov	r1, r3
 80056f0:	480e      	ldr	r0, [pc, #56]	; (800572c <hci_send_req+0x230>)
 80056f2:	f000 f8c9 	bl	8005888 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80056f6:	f107 0308 	add.w	r3, r7, #8
 80056fa:	4619      	mov	r1, r3
 80056fc:	480a      	ldr	r0, [pc, #40]	; (8005728 <hci_send_req+0x22c>)
 80056fe:	f7ff fe61 	bl	80053c4 <move_list>

  return -1;
 8005702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005706:	e00b      	b.n	8005720 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4619      	mov	r1, r3
 800570c:	4807      	ldr	r0, [pc, #28]	; (800572c <hci_send_req+0x230>)
 800570e:	f000 f8bb 	bl	8005888 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005712:	f107 0308 	add.w	r3, r7, #8
 8005716:	4619      	mov	r1, r3
 8005718:	4803      	ldr	r0, [pc, #12]	; (8005728 <hci_send_req+0x22c>)
 800571a:	f7ff fe53 	bl	80053c4 <move_list>

  return 0;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3738      	adds	r7, #56	; 0x38
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	2000080c 	.word	0x2000080c
 800572c:	20000804 	.word	0x20000804

08005730 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800573a:	e013      	b.n	8005764 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800573c:	1d3b      	adds	r3, r7, #4
 800573e:	4619      	mov	r1, r3
 8005740:	480e      	ldr	r0, [pc, #56]	; (800577c <hci_user_evt_proc+0x4c>)
 8005742:	f000 f90e 	bl	8005962 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8005746:	4b0e      	ldr	r3, [pc, #56]	; (8005780 <hci_user_evt_proc+0x50>)
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800574e:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <hci_user_evt_proc+0x50>)
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	3208      	adds	r2, #8
 8005756:	4610      	mov	r0, r2
 8005758:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4619      	mov	r1, r3
 800575e:	4809      	ldr	r0, [pc, #36]	; (8005784 <hci_user_evt_proc+0x54>)
 8005760:	f000 f8b8 	bl	80058d4 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005764:	4805      	ldr	r0, [pc, #20]	; (800577c <hci_user_evt_proc+0x4c>)
 8005766:	f000 f86d 	bl	8005844 <list_is_empty>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0e5      	beq.n	800573c <hci_user_evt_proc+0xc>
  }
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	2000080c 	.word	0x2000080c
 8005780:	20000728 	.word	0x20000728
 8005784:	20000804 	.word	0x20000804

08005788 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8005798:	481f      	ldr	r0, [pc, #124]	; (8005818 <hci_notify_asynch_evt+0x90>)
 800579a:	f000 f853 	bl	8005844 <list_is_empty>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d132      	bne.n	800580a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80057a4:	f107 030c 	add.w	r3, r7, #12
 80057a8:	4619      	mov	r1, r3
 80057aa:	481b      	ldr	r0, [pc, #108]	; (8005818 <hci_notify_asynch_evt+0x90>)
 80057ac:	f000 f8d9 	bl	8005962 <list_remove_head>
    
    if (hciContext.io.Receive)
 80057b0:	4b1a      	ldr	r3, [pc, #104]	; (800581c <hci_notify_asynch_evt+0x94>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d02a      	beq.n	800580e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80057b8:	4b18      	ldr	r3, [pc, #96]	; (800581c <hci_notify_asynch_evt+0x94>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	3208      	adds	r2, #8
 80057c0:	2180      	movs	r1, #128	; 0x80
 80057c2:	4610      	mov	r0, r2
 80057c4:	4798      	blx	r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80057ca:	7cfb      	ldrb	r3, [r7, #19]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d016      	beq.n	80057fe <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	7cfa      	ldrb	r2, [r7, #19]
 80057d4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff fd92 	bl	8005304 <verify_packet>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d105      	bne.n	80057f2 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4619      	mov	r1, r3
 80057ea:	480d      	ldr	r0, [pc, #52]	; (8005820 <hci_notify_asynch_evt+0x98>)
 80057ec:	f000 f872 	bl	80058d4 <list_insert_tail>
 80057f0:	e00d      	b.n	800580e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4619      	mov	r1, r3
 80057f6:	4808      	ldr	r0, [pc, #32]	; (8005818 <hci_notify_asynch_evt+0x90>)
 80057f8:	f000 f846 	bl	8005888 <list_insert_head>
 80057fc:	e007      	b.n	800580e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4619      	mov	r1, r3
 8005802:	4805      	ldr	r0, [pc, #20]	; (8005818 <hci_notify_asynch_evt+0x90>)
 8005804:	f000 f840 	bl	8005888 <list_insert_head>
 8005808:	e001      	b.n	800580e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800580a:	2301      	movs	r3, #1
 800580c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800580e:	697b      	ldr	r3, [r7, #20]
  
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20000804 	.word	0x20000804
 800581c:	20000728 	.word	0x20000728
 8005820:	2000080c 	.word	0x2000080c

08005824 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	605a      	str	r2, [r3, #4]
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800584c:	f3ef 8310 	mrs	r3, PRIMASK
 8005850:	60fb      	str	r3, [r7, #12]
  return(result);
 8005852:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005856:	b672      	cpsid	i
}
 8005858:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	429a      	cmp	r2, r3
 8005862:	d102      	bne.n	800586a <list_is_empty+0x26>
  {
    return_value = 1;
 8005864:	2301      	movs	r3, #1
 8005866:	75fb      	strb	r3, [r7, #23]
 8005868:	e001      	b.n	800586e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	75fb      	strb	r3, [r7, #23]
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f383 8810 	msr	PRIMASK, r3
}
 8005878:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800587a:	7dfb      	ldrb	r3, [r7, #23]
}
 800587c:	4618      	mov	r0, r3
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005892:	f3ef 8310 	mrs	r3, PRIMASK
 8005896:	60fb      	str	r3, [r7, #12]
  return(result);
 8005898:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800589a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800589c:	b672      	cpsid	i
}
 800589e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	605a      	str	r2, [r3, #4]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f383 8810 	msr	PRIMASK, r3
}
 80058c6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80058c8:	bf00      	nop
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058de:	f3ef 8310 	mrs	r3, PRIMASK
 80058e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80058e4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80058e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80058e8:	b672      	cpsid	i
}
 80058ea:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f383 8810 	msr	PRIMASK, r3
}
 8005912:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005914:	bf00      	nop
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005928:	f3ef 8310 	mrs	r3, PRIMASK
 800592c:	60fb      	str	r3, [r7, #12]
  return(result);
 800592e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005930:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005932:	b672      	cpsid	i
}
 8005934:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6852      	ldr	r2, [r2, #4]
 8005948:	605a      	str	r2, [r3, #4]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f383 8810 	msr	PRIMASK, r3
}
 8005954:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005956:	bf00      	nop
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b086      	sub	sp, #24
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800596c:	f3ef 8310 	mrs	r3, PRIMASK
 8005970:	60fb      	str	r3, [r7, #12]
  return(result);
 8005972:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005974:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005976:	b672      	cpsid	i
}
 8005978:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff ffca 	bl	8005920 <list_remove_node>
  (*node)->next = NULL;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2200      	movs	r2, #0
 800599a:	605a      	str	r2, [r3, #4]
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f383 8810 	msr	PRIMASK, r3
}
 80059a6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80059a8:	bf00      	nop
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ba:	f3ef 8310 	mrs	r3, PRIMASK
 80059be:	60fb      	str	r3, [r7, #12]
  return(result);
 80059c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80059c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80059c4:	b672      	cpsid	i
}
 80059c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff ffa3 	bl	8005920 <list_remove_node>
  (*node)->next = NULL;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2200      	movs	r2, #0
 80059e8:	605a      	str	r2, [r3, #4]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f383 8810 	msr	PRIMASK, r3
}
 80059f4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80059f6:	bf00      	nop
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b089      	sub	sp, #36	; 0x24
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  int size = 0;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a0e:	613b      	str	r3, [r7, #16]
  return(result);
 8005a10:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005a12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a14:	b672      	cpsid	i
}
 8005a16:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005a1e:	e005      	b.n	8005a2c <list_get_size+0x2e>
  {
    size++;
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	3301      	adds	r3, #1
 8005a24:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d1f5      	bne.n	8005a20 <list_get_size+0x22>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f383 8810 	msr	PRIMASK, r3
}
 8005a3e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8005a40:	69fb      	ldr	r3, [r7, #28]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3724      	adds	r7, #36	; 0x24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <__errno>:
 8005a50:	4b01      	ldr	r3, [pc, #4]	; (8005a58 <__errno+0x8>)
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20000024 	.word	0x20000024

08005a5c <__libc_init_array>:
 8005a5c:	b570      	push	{r4, r5, r6, lr}
 8005a5e:	4d0d      	ldr	r5, [pc, #52]	; (8005a94 <__libc_init_array+0x38>)
 8005a60:	4c0d      	ldr	r4, [pc, #52]	; (8005a98 <__libc_init_array+0x3c>)
 8005a62:	1b64      	subs	r4, r4, r5
 8005a64:	10a4      	asrs	r4, r4, #2
 8005a66:	2600      	movs	r6, #0
 8005a68:	42a6      	cmp	r6, r4
 8005a6a:	d109      	bne.n	8005a80 <__libc_init_array+0x24>
 8005a6c:	4d0b      	ldr	r5, [pc, #44]	; (8005a9c <__libc_init_array+0x40>)
 8005a6e:	4c0c      	ldr	r4, [pc, #48]	; (8005aa0 <__libc_init_array+0x44>)
 8005a70:	f000 fcf4 	bl	800645c <_init>
 8005a74:	1b64      	subs	r4, r4, r5
 8005a76:	10a4      	asrs	r4, r4, #2
 8005a78:	2600      	movs	r6, #0
 8005a7a:	42a6      	cmp	r6, r4
 8005a7c:	d105      	bne.n	8005a8a <__libc_init_array+0x2e>
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a84:	4798      	blx	r3
 8005a86:	3601      	adds	r6, #1
 8005a88:	e7ee      	b.n	8005a68 <__libc_init_array+0xc>
 8005a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8e:	4798      	blx	r3
 8005a90:	3601      	adds	r6, #1
 8005a92:	e7f2      	b.n	8005a7a <__libc_init_array+0x1e>
 8005a94:	08006918 	.word	0x08006918
 8005a98:	08006918 	.word	0x08006918
 8005a9c:	08006918 	.word	0x08006918
 8005aa0:	0800691c 	.word	0x0800691c

08005aa4 <memcpy>:
 8005aa4:	440a      	add	r2, r1
 8005aa6:	4291      	cmp	r1, r2
 8005aa8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005aac:	d100      	bne.n	8005ab0 <memcpy+0xc>
 8005aae:	4770      	bx	lr
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aba:	4291      	cmp	r1, r2
 8005abc:	d1f9      	bne.n	8005ab2 <memcpy+0xe>
 8005abe:	bd10      	pop	{r4, pc}

08005ac0 <memset>:
 8005ac0:	4402      	add	r2, r0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d100      	bne.n	8005aca <memset+0xa>
 8005ac8:	4770      	bx	lr
 8005aca:	f803 1b01 	strb.w	r1, [r3], #1
 8005ace:	e7f9      	b.n	8005ac4 <memset+0x4>

08005ad0 <_puts_r>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	460e      	mov	r6, r1
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	b118      	cbz	r0, 8005ae0 <_puts_r+0x10>
 8005ad8:	6983      	ldr	r3, [r0, #24]
 8005ada:	b90b      	cbnz	r3, 8005ae0 <_puts_r+0x10>
 8005adc:	f000 fa48 	bl	8005f70 <__sinit>
 8005ae0:	69ab      	ldr	r3, [r5, #24]
 8005ae2:	68ac      	ldr	r4, [r5, #8]
 8005ae4:	b913      	cbnz	r3, 8005aec <_puts_r+0x1c>
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f000 fa42 	bl	8005f70 <__sinit>
 8005aec:	4b2c      	ldr	r3, [pc, #176]	; (8005ba0 <_puts_r+0xd0>)
 8005aee:	429c      	cmp	r4, r3
 8005af0:	d120      	bne.n	8005b34 <_puts_r+0x64>
 8005af2:	686c      	ldr	r4, [r5, #4]
 8005af4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005af6:	07db      	lsls	r3, r3, #31
 8005af8:	d405      	bmi.n	8005b06 <_puts_r+0x36>
 8005afa:	89a3      	ldrh	r3, [r4, #12]
 8005afc:	0598      	lsls	r0, r3, #22
 8005afe:	d402      	bmi.n	8005b06 <_puts_r+0x36>
 8005b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b02:	f000 fad3 	bl	80060ac <__retarget_lock_acquire_recursive>
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	0719      	lsls	r1, r3, #28
 8005b0a:	d51d      	bpl.n	8005b48 <_puts_r+0x78>
 8005b0c:	6923      	ldr	r3, [r4, #16]
 8005b0e:	b1db      	cbz	r3, 8005b48 <_puts_r+0x78>
 8005b10:	3e01      	subs	r6, #1
 8005b12:	68a3      	ldr	r3, [r4, #8]
 8005b14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	60a3      	str	r3, [r4, #8]
 8005b1c:	bb39      	cbnz	r1, 8005b6e <_puts_r+0x9e>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	da38      	bge.n	8005b94 <_puts_r+0xc4>
 8005b22:	4622      	mov	r2, r4
 8005b24:	210a      	movs	r1, #10
 8005b26:	4628      	mov	r0, r5
 8005b28:	f000 f848 	bl	8005bbc <__swbuf_r>
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d011      	beq.n	8005b54 <_puts_r+0x84>
 8005b30:	250a      	movs	r5, #10
 8005b32:	e011      	b.n	8005b58 <_puts_r+0x88>
 8005b34:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <_puts_r+0xd4>)
 8005b36:	429c      	cmp	r4, r3
 8005b38:	d101      	bne.n	8005b3e <_puts_r+0x6e>
 8005b3a:	68ac      	ldr	r4, [r5, #8]
 8005b3c:	e7da      	b.n	8005af4 <_puts_r+0x24>
 8005b3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <_puts_r+0xd8>)
 8005b40:	429c      	cmp	r4, r3
 8005b42:	bf08      	it	eq
 8005b44:	68ec      	ldreq	r4, [r5, #12]
 8005b46:	e7d5      	b.n	8005af4 <_puts_r+0x24>
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 f888 	bl	8005c60 <__swsetup_r>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d0dd      	beq.n	8005b10 <_puts_r+0x40>
 8005b54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005b58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b5a:	07da      	lsls	r2, r3, #31
 8005b5c:	d405      	bmi.n	8005b6a <_puts_r+0x9a>
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	059b      	lsls	r3, r3, #22
 8005b62:	d402      	bmi.n	8005b6a <_puts_r+0x9a>
 8005b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b66:	f000 faa2 	bl	80060ae <__retarget_lock_release_recursive>
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	bd70      	pop	{r4, r5, r6, pc}
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	da04      	bge.n	8005b7c <_puts_r+0xac>
 8005b72:	69a2      	ldr	r2, [r4, #24]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	dc06      	bgt.n	8005b86 <_puts_r+0xb6>
 8005b78:	290a      	cmp	r1, #10
 8005b7a:	d004      	beq.n	8005b86 <_puts_r+0xb6>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	6022      	str	r2, [r4, #0]
 8005b82:	7019      	strb	r1, [r3, #0]
 8005b84:	e7c5      	b.n	8005b12 <_puts_r+0x42>
 8005b86:	4622      	mov	r2, r4
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f000 f817 	bl	8005bbc <__swbuf_r>
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d1bf      	bne.n	8005b12 <_puts_r+0x42>
 8005b92:	e7df      	b.n	8005b54 <_puts_r+0x84>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	250a      	movs	r5, #10
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	6022      	str	r2, [r4, #0]
 8005b9c:	701d      	strb	r5, [r3, #0]
 8005b9e:	e7db      	b.n	8005b58 <_puts_r+0x88>
 8005ba0:	080068d0 	.word	0x080068d0
 8005ba4:	080068f0 	.word	0x080068f0
 8005ba8:	080068b0 	.word	0x080068b0

08005bac <puts>:
 8005bac:	4b02      	ldr	r3, [pc, #8]	; (8005bb8 <puts+0xc>)
 8005bae:	4601      	mov	r1, r0
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	f7ff bf8d 	b.w	8005ad0 <_puts_r>
 8005bb6:	bf00      	nop
 8005bb8:	20000024 	.word	0x20000024

08005bbc <__swbuf_r>:
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	460e      	mov	r6, r1
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	b118      	cbz	r0, 8005bce <__swbuf_r+0x12>
 8005bc6:	6983      	ldr	r3, [r0, #24]
 8005bc8:	b90b      	cbnz	r3, 8005bce <__swbuf_r+0x12>
 8005bca:	f000 f9d1 	bl	8005f70 <__sinit>
 8005bce:	4b21      	ldr	r3, [pc, #132]	; (8005c54 <__swbuf_r+0x98>)
 8005bd0:	429c      	cmp	r4, r3
 8005bd2:	d12b      	bne.n	8005c2c <__swbuf_r+0x70>
 8005bd4:	686c      	ldr	r4, [r5, #4]
 8005bd6:	69a3      	ldr	r3, [r4, #24]
 8005bd8:	60a3      	str	r3, [r4, #8]
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	071a      	lsls	r2, r3, #28
 8005bde:	d52f      	bpl.n	8005c40 <__swbuf_r+0x84>
 8005be0:	6923      	ldr	r3, [r4, #16]
 8005be2:	b36b      	cbz	r3, 8005c40 <__swbuf_r+0x84>
 8005be4:	6923      	ldr	r3, [r4, #16]
 8005be6:	6820      	ldr	r0, [r4, #0]
 8005be8:	1ac0      	subs	r0, r0, r3
 8005bea:	6963      	ldr	r3, [r4, #20]
 8005bec:	b2f6      	uxtb	r6, r6
 8005bee:	4283      	cmp	r3, r0
 8005bf0:	4637      	mov	r7, r6
 8005bf2:	dc04      	bgt.n	8005bfe <__swbuf_r+0x42>
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f000 f926 	bl	8005e48 <_fflush_r>
 8005bfc:	bb30      	cbnz	r0, 8005c4c <__swbuf_r+0x90>
 8005bfe:	68a3      	ldr	r3, [r4, #8]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	60a3      	str	r3, [r4, #8]
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	6022      	str	r2, [r4, #0]
 8005c0a:	701e      	strb	r6, [r3, #0]
 8005c0c:	6963      	ldr	r3, [r4, #20]
 8005c0e:	3001      	adds	r0, #1
 8005c10:	4283      	cmp	r3, r0
 8005c12:	d004      	beq.n	8005c1e <__swbuf_r+0x62>
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	07db      	lsls	r3, r3, #31
 8005c18:	d506      	bpl.n	8005c28 <__swbuf_r+0x6c>
 8005c1a:	2e0a      	cmp	r6, #10
 8005c1c:	d104      	bne.n	8005c28 <__swbuf_r+0x6c>
 8005c1e:	4621      	mov	r1, r4
 8005c20:	4628      	mov	r0, r5
 8005c22:	f000 f911 	bl	8005e48 <_fflush_r>
 8005c26:	b988      	cbnz	r0, 8005c4c <__swbuf_r+0x90>
 8005c28:	4638      	mov	r0, r7
 8005c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <__swbuf_r+0x9c>)
 8005c2e:	429c      	cmp	r4, r3
 8005c30:	d101      	bne.n	8005c36 <__swbuf_r+0x7a>
 8005c32:	68ac      	ldr	r4, [r5, #8]
 8005c34:	e7cf      	b.n	8005bd6 <__swbuf_r+0x1a>
 8005c36:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <__swbuf_r+0xa0>)
 8005c38:	429c      	cmp	r4, r3
 8005c3a:	bf08      	it	eq
 8005c3c:	68ec      	ldreq	r4, [r5, #12]
 8005c3e:	e7ca      	b.n	8005bd6 <__swbuf_r+0x1a>
 8005c40:	4621      	mov	r1, r4
 8005c42:	4628      	mov	r0, r5
 8005c44:	f000 f80c 	bl	8005c60 <__swsetup_r>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d0cb      	beq.n	8005be4 <__swbuf_r+0x28>
 8005c4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c50:	e7ea      	b.n	8005c28 <__swbuf_r+0x6c>
 8005c52:	bf00      	nop
 8005c54:	080068d0 	.word	0x080068d0
 8005c58:	080068f0 	.word	0x080068f0
 8005c5c:	080068b0 	.word	0x080068b0

08005c60 <__swsetup_r>:
 8005c60:	4b32      	ldr	r3, [pc, #200]	; (8005d2c <__swsetup_r+0xcc>)
 8005c62:	b570      	push	{r4, r5, r6, lr}
 8005c64:	681d      	ldr	r5, [r3, #0]
 8005c66:	4606      	mov	r6, r0
 8005c68:	460c      	mov	r4, r1
 8005c6a:	b125      	cbz	r5, 8005c76 <__swsetup_r+0x16>
 8005c6c:	69ab      	ldr	r3, [r5, #24]
 8005c6e:	b913      	cbnz	r3, 8005c76 <__swsetup_r+0x16>
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 f97d 	bl	8005f70 <__sinit>
 8005c76:	4b2e      	ldr	r3, [pc, #184]	; (8005d30 <__swsetup_r+0xd0>)
 8005c78:	429c      	cmp	r4, r3
 8005c7a:	d10f      	bne.n	8005c9c <__swsetup_r+0x3c>
 8005c7c:	686c      	ldr	r4, [r5, #4]
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c84:	0719      	lsls	r1, r3, #28
 8005c86:	d42c      	bmi.n	8005ce2 <__swsetup_r+0x82>
 8005c88:	06dd      	lsls	r5, r3, #27
 8005c8a:	d411      	bmi.n	8005cb0 <__swsetup_r+0x50>
 8005c8c:	2309      	movs	r3, #9
 8005c8e:	6033      	str	r3, [r6, #0]
 8005c90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c94:	81a3      	strh	r3, [r4, #12]
 8005c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c9a:	e03e      	b.n	8005d1a <__swsetup_r+0xba>
 8005c9c:	4b25      	ldr	r3, [pc, #148]	; (8005d34 <__swsetup_r+0xd4>)
 8005c9e:	429c      	cmp	r4, r3
 8005ca0:	d101      	bne.n	8005ca6 <__swsetup_r+0x46>
 8005ca2:	68ac      	ldr	r4, [r5, #8]
 8005ca4:	e7eb      	b.n	8005c7e <__swsetup_r+0x1e>
 8005ca6:	4b24      	ldr	r3, [pc, #144]	; (8005d38 <__swsetup_r+0xd8>)
 8005ca8:	429c      	cmp	r4, r3
 8005caa:	bf08      	it	eq
 8005cac:	68ec      	ldreq	r4, [r5, #12]
 8005cae:	e7e6      	b.n	8005c7e <__swsetup_r+0x1e>
 8005cb0:	0758      	lsls	r0, r3, #29
 8005cb2:	d512      	bpl.n	8005cda <__swsetup_r+0x7a>
 8005cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cb6:	b141      	cbz	r1, 8005cca <__swsetup_r+0x6a>
 8005cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cbc:	4299      	cmp	r1, r3
 8005cbe:	d002      	beq.n	8005cc6 <__swsetup_r+0x66>
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f000 fa59 	bl	8006178 <_free_r>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	6363      	str	r3, [r4, #52]	; 0x34
 8005cca:	89a3      	ldrh	r3, [r4, #12]
 8005ccc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cd0:	81a3      	strh	r3, [r4, #12]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	6063      	str	r3, [r4, #4]
 8005cd6:	6923      	ldr	r3, [r4, #16]
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	f043 0308 	orr.w	r3, r3, #8
 8005ce0:	81a3      	strh	r3, [r4, #12]
 8005ce2:	6923      	ldr	r3, [r4, #16]
 8005ce4:	b94b      	cbnz	r3, 8005cfa <__swsetup_r+0x9a>
 8005ce6:	89a3      	ldrh	r3, [r4, #12]
 8005ce8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf0:	d003      	beq.n	8005cfa <__swsetup_r+0x9a>
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f000 f9ff 	bl	80060f8 <__smakebuf_r>
 8005cfa:	89a0      	ldrh	r0, [r4, #12]
 8005cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d00:	f010 0301 	ands.w	r3, r0, #1
 8005d04:	d00a      	beq.n	8005d1c <__swsetup_r+0xbc>
 8005d06:	2300      	movs	r3, #0
 8005d08:	60a3      	str	r3, [r4, #8]
 8005d0a:	6963      	ldr	r3, [r4, #20]
 8005d0c:	425b      	negs	r3, r3
 8005d0e:	61a3      	str	r3, [r4, #24]
 8005d10:	6923      	ldr	r3, [r4, #16]
 8005d12:	b943      	cbnz	r3, 8005d26 <__swsetup_r+0xc6>
 8005d14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d18:	d1ba      	bne.n	8005c90 <__swsetup_r+0x30>
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	0781      	lsls	r1, r0, #30
 8005d1e:	bf58      	it	pl
 8005d20:	6963      	ldrpl	r3, [r4, #20]
 8005d22:	60a3      	str	r3, [r4, #8]
 8005d24:	e7f4      	b.n	8005d10 <__swsetup_r+0xb0>
 8005d26:	2000      	movs	r0, #0
 8005d28:	e7f7      	b.n	8005d1a <__swsetup_r+0xba>
 8005d2a:	bf00      	nop
 8005d2c:	20000024 	.word	0x20000024
 8005d30:	080068d0 	.word	0x080068d0
 8005d34:	080068f0 	.word	0x080068f0
 8005d38:	080068b0 	.word	0x080068b0

08005d3c <__sflush_r>:
 8005d3c:	898a      	ldrh	r2, [r1, #12]
 8005d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d42:	4605      	mov	r5, r0
 8005d44:	0710      	lsls	r0, r2, #28
 8005d46:	460c      	mov	r4, r1
 8005d48:	d458      	bmi.n	8005dfc <__sflush_r+0xc0>
 8005d4a:	684b      	ldr	r3, [r1, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dc05      	bgt.n	8005d5c <__sflush_r+0x20>
 8005d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	dc02      	bgt.n	8005d5c <__sflush_r+0x20>
 8005d56:	2000      	movs	r0, #0
 8005d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d5e:	2e00      	cmp	r6, #0
 8005d60:	d0f9      	beq.n	8005d56 <__sflush_r+0x1a>
 8005d62:	2300      	movs	r3, #0
 8005d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d68:	682f      	ldr	r7, [r5, #0]
 8005d6a:	602b      	str	r3, [r5, #0]
 8005d6c:	d032      	beq.n	8005dd4 <__sflush_r+0x98>
 8005d6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d70:	89a3      	ldrh	r3, [r4, #12]
 8005d72:	075a      	lsls	r2, r3, #29
 8005d74:	d505      	bpl.n	8005d82 <__sflush_r+0x46>
 8005d76:	6863      	ldr	r3, [r4, #4]
 8005d78:	1ac0      	subs	r0, r0, r3
 8005d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d7c:	b10b      	cbz	r3, 8005d82 <__sflush_r+0x46>
 8005d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d80:	1ac0      	subs	r0, r0, r3
 8005d82:	2300      	movs	r3, #0
 8005d84:	4602      	mov	r2, r0
 8005d86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d88:	6a21      	ldr	r1, [r4, #32]
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	47b0      	blx	r6
 8005d8e:	1c43      	adds	r3, r0, #1
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	d106      	bne.n	8005da2 <__sflush_r+0x66>
 8005d94:	6829      	ldr	r1, [r5, #0]
 8005d96:	291d      	cmp	r1, #29
 8005d98:	d82c      	bhi.n	8005df4 <__sflush_r+0xb8>
 8005d9a:	4a2a      	ldr	r2, [pc, #168]	; (8005e44 <__sflush_r+0x108>)
 8005d9c:	40ca      	lsrs	r2, r1
 8005d9e:	07d6      	lsls	r6, r2, #31
 8005da0:	d528      	bpl.n	8005df4 <__sflush_r+0xb8>
 8005da2:	2200      	movs	r2, #0
 8005da4:	6062      	str	r2, [r4, #4]
 8005da6:	04d9      	lsls	r1, r3, #19
 8005da8:	6922      	ldr	r2, [r4, #16]
 8005daa:	6022      	str	r2, [r4, #0]
 8005dac:	d504      	bpl.n	8005db8 <__sflush_r+0x7c>
 8005dae:	1c42      	adds	r2, r0, #1
 8005db0:	d101      	bne.n	8005db6 <__sflush_r+0x7a>
 8005db2:	682b      	ldr	r3, [r5, #0]
 8005db4:	b903      	cbnz	r3, 8005db8 <__sflush_r+0x7c>
 8005db6:	6560      	str	r0, [r4, #84]	; 0x54
 8005db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dba:	602f      	str	r7, [r5, #0]
 8005dbc:	2900      	cmp	r1, #0
 8005dbe:	d0ca      	beq.n	8005d56 <__sflush_r+0x1a>
 8005dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dc4:	4299      	cmp	r1, r3
 8005dc6:	d002      	beq.n	8005dce <__sflush_r+0x92>
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f000 f9d5 	bl	8006178 <_free_r>
 8005dce:	2000      	movs	r0, #0
 8005dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8005dd2:	e7c1      	b.n	8005d58 <__sflush_r+0x1c>
 8005dd4:	6a21      	ldr	r1, [r4, #32]
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4628      	mov	r0, r5
 8005dda:	47b0      	blx	r6
 8005ddc:	1c41      	adds	r1, r0, #1
 8005dde:	d1c7      	bne.n	8005d70 <__sflush_r+0x34>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0c4      	beq.n	8005d70 <__sflush_r+0x34>
 8005de6:	2b1d      	cmp	r3, #29
 8005de8:	d001      	beq.n	8005dee <__sflush_r+0xb2>
 8005dea:	2b16      	cmp	r3, #22
 8005dec:	d101      	bne.n	8005df2 <__sflush_r+0xb6>
 8005dee:	602f      	str	r7, [r5, #0]
 8005df0:	e7b1      	b.n	8005d56 <__sflush_r+0x1a>
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005df8:	81a3      	strh	r3, [r4, #12]
 8005dfa:	e7ad      	b.n	8005d58 <__sflush_r+0x1c>
 8005dfc:	690f      	ldr	r7, [r1, #16]
 8005dfe:	2f00      	cmp	r7, #0
 8005e00:	d0a9      	beq.n	8005d56 <__sflush_r+0x1a>
 8005e02:	0793      	lsls	r3, r2, #30
 8005e04:	680e      	ldr	r6, [r1, #0]
 8005e06:	bf08      	it	eq
 8005e08:	694b      	ldreq	r3, [r1, #20]
 8005e0a:	600f      	str	r7, [r1, #0]
 8005e0c:	bf18      	it	ne
 8005e0e:	2300      	movne	r3, #0
 8005e10:	eba6 0807 	sub.w	r8, r6, r7
 8005e14:	608b      	str	r3, [r1, #8]
 8005e16:	f1b8 0f00 	cmp.w	r8, #0
 8005e1a:	dd9c      	ble.n	8005d56 <__sflush_r+0x1a>
 8005e1c:	6a21      	ldr	r1, [r4, #32]
 8005e1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e20:	4643      	mov	r3, r8
 8005e22:	463a      	mov	r2, r7
 8005e24:	4628      	mov	r0, r5
 8005e26:	47b0      	blx	r6
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	dc06      	bgt.n	8005e3a <__sflush_r+0xfe>
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e32:	81a3      	strh	r3, [r4, #12]
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e38:	e78e      	b.n	8005d58 <__sflush_r+0x1c>
 8005e3a:	4407      	add	r7, r0
 8005e3c:	eba8 0800 	sub.w	r8, r8, r0
 8005e40:	e7e9      	b.n	8005e16 <__sflush_r+0xda>
 8005e42:	bf00      	nop
 8005e44:	20400001 	.word	0x20400001

08005e48 <_fflush_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	690b      	ldr	r3, [r1, #16]
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	460c      	mov	r4, r1
 8005e50:	b913      	cbnz	r3, 8005e58 <_fflush_r+0x10>
 8005e52:	2500      	movs	r5, #0
 8005e54:	4628      	mov	r0, r5
 8005e56:	bd38      	pop	{r3, r4, r5, pc}
 8005e58:	b118      	cbz	r0, 8005e62 <_fflush_r+0x1a>
 8005e5a:	6983      	ldr	r3, [r0, #24]
 8005e5c:	b90b      	cbnz	r3, 8005e62 <_fflush_r+0x1a>
 8005e5e:	f000 f887 	bl	8005f70 <__sinit>
 8005e62:	4b14      	ldr	r3, [pc, #80]	; (8005eb4 <_fflush_r+0x6c>)
 8005e64:	429c      	cmp	r4, r3
 8005e66:	d11b      	bne.n	8005ea0 <_fflush_r+0x58>
 8005e68:	686c      	ldr	r4, [r5, #4]
 8005e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0ef      	beq.n	8005e52 <_fflush_r+0xa>
 8005e72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e74:	07d0      	lsls	r0, r2, #31
 8005e76:	d404      	bmi.n	8005e82 <_fflush_r+0x3a>
 8005e78:	0599      	lsls	r1, r3, #22
 8005e7a:	d402      	bmi.n	8005e82 <_fflush_r+0x3a>
 8005e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e7e:	f000 f915 	bl	80060ac <__retarget_lock_acquire_recursive>
 8005e82:	4628      	mov	r0, r5
 8005e84:	4621      	mov	r1, r4
 8005e86:	f7ff ff59 	bl	8005d3c <__sflush_r>
 8005e8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e8c:	07da      	lsls	r2, r3, #31
 8005e8e:	4605      	mov	r5, r0
 8005e90:	d4e0      	bmi.n	8005e54 <_fflush_r+0xc>
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	059b      	lsls	r3, r3, #22
 8005e96:	d4dd      	bmi.n	8005e54 <_fflush_r+0xc>
 8005e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e9a:	f000 f908 	bl	80060ae <__retarget_lock_release_recursive>
 8005e9e:	e7d9      	b.n	8005e54 <_fflush_r+0xc>
 8005ea0:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <_fflush_r+0x70>)
 8005ea2:	429c      	cmp	r4, r3
 8005ea4:	d101      	bne.n	8005eaa <_fflush_r+0x62>
 8005ea6:	68ac      	ldr	r4, [r5, #8]
 8005ea8:	e7df      	b.n	8005e6a <_fflush_r+0x22>
 8005eaa:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <_fflush_r+0x74>)
 8005eac:	429c      	cmp	r4, r3
 8005eae:	bf08      	it	eq
 8005eb0:	68ec      	ldreq	r4, [r5, #12]
 8005eb2:	e7da      	b.n	8005e6a <_fflush_r+0x22>
 8005eb4:	080068d0 	.word	0x080068d0
 8005eb8:	080068f0 	.word	0x080068f0
 8005ebc:	080068b0 	.word	0x080068b0

08005ec0 <std>:
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	b510      	push	{r4, lr}
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8005eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ece:	6083      	str	r3, [r0, #8]
 8005ed0:	8181      	strh	r1, [r0, #12]
 8005ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8005ed4:	81c2      	strh	r2, [r0, #14]
 8005ed6:	6183      	str	r3, [r0, #24]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	2208      	movs	r2, #8
 8005edc:	305c      	adds	r0, #92	; 0x5c
 8005ede:	f7ff fdef 	bl	8005ac0 <memset>
 8005ee2:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <std+0x38>)
 8005ee4:	6263      	str	r3, [r4, #36]	; 0x24
 8005ee6:	4b05      	ldr	r3, [pc, #20]	; (8005efc <std+0x3c>)
 8005ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005eea:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <std+0x40>)
 8005eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005eee:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <std+0x44>)
 8005ef0:	6224      	str	r4, [r4, #32]
 8005ef2:	6323      	str	r3, [r4, #48]	; 0x30
 8005ef4:	bd10      	pop	{r4, pc}
 8005ef6:	bf00      	nop
 8005ef8:	080062ed 	.word	0x080062ed
 8005efc:	0800630f 	.word	0x0800630f
 8005f00:	08006347 	.word	0x08006347
 8005f04:	0800636b 	.word	0x0800636b

08005f08 <_cleanup_r>:
 8005f08:	4901      	ldr	r1, [pc, #4]	; (8005f10 <_cleanup_r+0x8>)
 8005f0a:	f000 b8af 	b.w	800606c <_fwalk_reent>
 8005f0e:	bf00      	nop
 8005f10:	08005e49 	.word	0x08005e49

08005f14 <__sfmoreglue>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	1e4a      	subs	r2, r1, #1
 8005f18:	2568      	movs	r5, #104	; 0x68
 8005f1a:	4355      	muls	r5, r2
 8005f1c:	460e      	mov	r6, r1
 8005f1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f22:	f000 f979 	bl	8006218 <_malloc_r>
 8005f26:	4604      	mov	r4, r0
 8005f28:	b140      	cbz	r0, 8005f3c <__sfmoreglue+0x28>
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	e9c0 1600 	strd	r1, r6, [r0]
 8005f30:	300c      	adds	r0, #12
 8005f32:	60a0      	str	r0, [r4, #8]
 8005f34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f38:	f7ff fdc2 	bl	8005ac0 <memset>
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}

08005f40 <__sfp_lock_acquire>:
 8005f40:	4801      	ldr	r0, [pc, #4]	; (8005f48 <__sfp_lock_acquire+0x8>)
 8005f42:	f000 b8b3 	b.w	80060ac <__retarget_lock_acquire_recursive>
 8005f46:	bf00      	nop
 8005f48:	2000081c 	.word	0x2000081c

08005f4c <__sfp_lock_release>:
 8005f4c:	4801      	ldr	r0, [pc, #4]	; (8005f54 <__sfp_lock_release+0x8>)
 8005f4e:	f000 b8ae 	b.w	80060ae <__retarget_lock_release_recursive>
 8005f52:	bf00      	nop
 8005f54:	2000081c 	.word	0x2000081c

08005f58 <__sinit_lock_acquire>:
 8005f58:	4801      	ldr	r0, [pc, #4]	; (8005f60 <__sinit_lock_acquire+0x8>)
 8005f5a:	f000 b8a7 	b.w	80060ac <__retarget_lock_acquire_recursive>
 8005f5e:	bf00      	nop
 8005f60:	20000817 	.word	0x20000817

08005f64 <__sinit_lock_release>:
 8005f64:	4801      	ldr	r0, [pc, #4]	; (8005f6c <__sinit_lock_release+0x8>)
 8005f66:	f000 b8a2 	b.w	80060ae <__retarget_lock_release_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	20000817 	.word	0x20000817

08005f70 <__sinit>:
 8005f70:	b510      	push	{r4, lr}
 8005f72:	4604      	mov	r4, r0
 8005f74:	f7ff fff0 	bl	8005f58 <__sinit_lock_acquire>
 8005f78:	69a3      	ldr	r3, [r4, #24]
 8005f7a:	b11b      	cbz	r3, 8005f84 <__sinit+0x14>
 8005f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f80:	f7ff bff0 	b.w	8005f64 <__sinit_lock_release>
 8005f84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f88:	6523      	str	r3, [r4, #80]	; 0x50
 8005f8a:	4b13      	ldr	r3, [pc, #76]	; (8005fd8 <__sinit+0x68>)
 8005f8c:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <__sinit+0x6c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f92:	42a3      	cmp	r3, r4
 8005f94:	bf04      	itt	eq
 8005f96:	2301      	moveq	r3, #1
 8005f98:	61a3      	streq	r3, [r4, #24]
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f000 f820 	bl	8005fe0 <__sfp>
 8005fa0:	6060      	str	r0, [r4, #4]
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 f81c 	bl	8005fe0 <__sfp>
 8005fa8:	60a0      	str	r0, [r4, #8]
 8005faa:	4620      	mov	r0, r4
 8005fac:	f000 f818 	bl	8005fe0 <__sfp>
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	60e0      	str	r0, [r4, #12]
 8005fb4:	2104      	movs	r1, #4
 8005fb6:	6860      	ldr	r0, [r4, #4]
 8005fb8:	f7ff ff82 	bl	8005ec0 <std>
 8005fbc:	68a0      	ldr	r0, [r4, #8]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	2109      	movs	r1, #9
 8005fc2:	f7ff ff7d 	bl	8005ec0 <std>
 8005fc6:	68e0      	ldr	r0, [r4, #12]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	2112      	movs	r1, #18
 8005fcc:	f7ff ff78 	bl	8005ec0 <std>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	61a3      	str	r3, [r4, #24]
 8005fd4:	e7d2      	b.n	8005f7c <__sinit+0xc>
 8005fd6:	bf00      	nop
 8005fd8:	080068ac 	.word	0x080068ac
 8005fdc:	08005f09 	.word	0x08005f09

08005fe0 <__sfp>:
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe2:	4607      	mov	r7, r0
 8005fe4:	f7ff ffac 	bl	8005f40 <__sfp_lock_acquire>
 8005fe8:	4b1e      	ldr	r3, [pc, #120]	; (8006064 <__sfp+0x84>)
 8005fea:	681e      	ldr	r6, [r3, #0]
 8005fec:	69b3      	ldr	r3, [r6, #24]
 8005fee:	b913      	cbnz	r3, 8005ff6 <__sfp+0x16>
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f7ff ffbd 	bl	8005f70 <__sinit>
 8005ff6:	3648      	adds	r6, #72	; 0x48
 8005ff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	d503      	bpl.n	8006008 <__sfp+0x28>
 8006000:	6833      	ldr	r3, [r6, #0]
 8006002:	b30b      	cbz	r3, 8006048 <__sfp+0x68>
 8006004:	6836      	ldr	r6, [r6, #0]
 8006006:	e7f7      	b.n	8005ff8 <__sfp+0x18>
 8006008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800600c:	b9d5      	cbnz	r5, 8006044 <__sfp+0x64>
 800600e:	4b16      	ldr	r3, [pc, #88]	; (8006068 <__sfp+0x88>)
 8006010:	60e3      	str	r3, [r4, #12]
 8006012:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006016:	6665      	str	r5, [r4, #100]	; 0x64
 8006018:	f000 f847 	bl	80060aa <__retarget_lock_init_recursive>
 800601c:	f7ff ff96 	bl	8005f4c <__sfp_lock_release>
 8006020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006028:	6025      	str	r5, [r4, #0]
 800602a:	61a5      	str	r5, [r4, #24]
 800602c:	2208      	movs	r2, #8
 800602e:	4629      	mov	r1, r5
 8006030:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006034:	f7ff fd44 	bl	8005ac0 <memset>
 8006038:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800603c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006040:	4620      	mov	r0, r4
 8006042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006044:	3468      	adds	r4, #104	; 0x68
 8006046:	e7d9      	b.n	8005ffc <__sfp+0x1c>
 8006048:	2104      	movs	r1, #4
 800604a:	4638      	mov	r0, r7
 800604c:	f7ff ff62 	bl	8005f14 <__sfmoreglue>
 8006050:	4604      	mov	r4, r0
 8006052:	6030      	str	r0, [r6, #0]
 8006054:	2800      	cmp	r0, #0
 8006056:	d1d5      	bne.n	8006004 <__sfp+0x24>
 8006058:	f7ff ff78 	bl	8005f4c <__sfp_lock_release>
 800605c:	230c      	movs	r3, #12
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	e7ee      	b.n	8006040 <__sfp+0x60>
 8006062:	bf00      	nop
 8006064:	080068ac 	.word	0x080068ac
 8006068:	ffff0001 	.word	0xffff0001

0800606c <_fwalk_reent>:
 800606c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006070:	4606      	mov	r6, r0
 8006072:	4688      	mov	r8, r1
 8006074:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006078:	2700      	movs	r7, #0
 800607a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800607e:	f1b9 0901 	subs.w	r9, r9, #1
 8006082:	d505      	bpl.n	8006090 <_fwalk_reent+0x24>
 8006084:	6824      	ldr	r4, [r4, #0]
 8006086:	2c00      	cmp	r4, #0
 8006088:	d1f7      	bne.n	800607a <_fwalk_reent+0xe>
 800608a:	4638      	mov	r0, r7
 800608c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006090:	89ab      	ldrh	r3, [r5, #12]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d907      	bls.n	80060a6 <_fwalk_reent+0x3a>
 8006096:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800609a:	3301      	adds	r3, #1
 800609c:	d003      	beq.n	80060a6 <_fwalk_reent+0x3a>
 800609e:	4629      	mov	r1, r5
 80060a0:	4630      	mov	r0, r6
 80060a2:	47c0      	blx	r8
 80060a4:	4307      	orrs	r7, r0
 80060a6:	3568      	adds	r5, #104	; 0x68
 80060a8:	e7e9      	b.n	800607e <_fwalk_reent+0x12>

080060aa <__retarget_lock_init_recursive>:
 80060aa:	4770      	bx	lr

080060ac <__retarget_lock_acquire_recursive>:
 80060ac:	4770      	bx	lr

080060ae <__retarget_lock_release_recursive>:
 80060ae:	4770      	bx	lr

080060b0 <__swhatbuf_r>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	460e      	mov	r6, r1
 80060b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b8:	2900      	cmp	r1, #0
 80060ba:	b096      	sub	sp, #88	; 0x58
 80060bc:	4614      	mov	r4, r2
 80060be:	461d      	mov	r5, r3
 80060c0:	da07      	bge.n	80060d2 <__swhatbuf_r+0x22>
 80060c2:	2300      	movs	r3, #0
 80060c4:	602b      	str	r3, [r5, #0]
 80060c6:	89b3      	ldrh	r3, [r6, #12]
 80060c8:	061a      	lsls	r2, r3, #24
 80060ca:	d410      	bmi.n	80060ee <__swhatbuf_r+0x3e>
 80060cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060d0:	e00e      	b.n	80060f0 <__swhatbuf_r+0x40>
 80060d2:	466a      	mov	r2, sp
 80060d4:	f000 f970 	bl	80063b8 <_fstat_r>
 80060d8:	2800      	cmp	r0, #0
 80060da:	dbf2      	blt.n	80060c2 <__swhatbuf_r+0x12>
 80060dc:	9a01      	ldr	r2, [sp, #4]
 80060de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060e6:	425a      	negs	r2, r3
 80060e8:	415a      	adcs	r2, r3
 80060ea:	602a      	str	r2, [r5, #0]
 80060ec:	e7ee      	b.n	80060cc <__swhatbuf_r+0x1c>
 80060ee:	2340      	movs	r3, #64	; 0x40
 80060f0:	2000      	movs	r0, #0
 80060f2:	6023      	str	r3, [r4, #0]
 80060f4:	b016      	add	sp, #88	; 0x58
 80060f6:	bd70      	pop	{r4, r5, r6, pc}

080060f8 <__smakebuf_r>:
 80060f8:	898b      	ldrh	r3, [r1, #12]
 80060fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060fc:	079d      	lsls	r5, r3, #30
 80060fe:	4606      	mov	r6, r0
 8006100:	460c      	mov	r4, r1
 8006102:	d507      	bpl.n	8006114 <__smakebuf_r+0x1c>
 8006104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	6123      	str	r3, [r4, #16]
 800610c:	2301      	movs	r3, #1
 800610e:	6163      	str	r3, [r4, #20]
 8006110:	b002      	add	sp, #8
 8006112:	bd70      	pop	{r4, r5, r6, pc}
 8006114:	ab01      	add	r3, sp, #4
 8006116:	466a      	mov	r2, sp
 8006118:	f7ff ffca 	bl	80060b0 <__swhatbuf_r>
 800611c:	9900      	ldr	r1, [sp, #0]
 800611e:	4605      	mov	r5, r0
 8006120:	4630      	mov	r0, r6
 8006122:	f000 f879 	bl	8006218 <_malloc_r>
 8006126:	b948      	cbnz	r0, 800613c <__smakebuf_r+0x44>
 8006128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800612c:	059a      	lsls	r2, r3, #22
 800612e:	d4ef      	bmi.n	8006110 <__smakebuf_r+0x18>
 8006130:	f023 0303 	bic.w	r3, r3, #3
 8006134:	f043 0302 	orr.w	r3, r3, #2
 8006138:	81a3      	strh	r3, [r4, #12]
 800613a:	e7e3      	b.n	8006104 <__smakebuf_r+0xc>
 800613c:	4b0d      	ldr	r3, [pc, #52]	; (8006174 <__smakebuf_r+0x7c>)
 800613e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006140:	89a3      	ldrh	r3, [r4, #12]
 8006142:	6020      	str	r0, [r4, #0]
 8006144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006148:	81a3      	strh	r3, [r4, #12]
 800614a:	9b00      	ldr	r3, [sp, #0]
 800614c:	6163      	str	r3, [r4, #20]
 800614e:	9b01      	ldr	r3, [sp, #4]
 8006150:	6120      	str	r0, [r4, #16]
 8006152:	b15b      	cbz	r3, 800616c <__smakebuf_r+0x74>
 8006154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006158:	4630      	mov	r0, r6
 800615a:	f000 f93f 	bl	80063dc <_isatty_r>
 800615e:	b128      	cbz	r0, 800616c <__smakebuf_r+0x74>
 8006160:	89a3      	ldrh	r3, [r4, #12]
 8006162:	f023 0303 	bic.w	r3, r3, #3
 8006166:	f043 0301 	orr.w	r3, r3, #1
 800616a:	81a3      	strh	r3, [r4, #12]
 800616c:	89a0      	ldrh	r0, [r4, #12]
 800616e:	4305      	orrs	r5, r0
 8006170:	81a5      	strh	r5, [r4, #12]
 8006172:	e7cd      	b.n	8006110 <__smakebuf_r+0x18>
 8006174:	08005f09 	.word	0x08005f09

08006178 <_free_r>:
 8006178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800617a:	2900      	cmp	r1, #0
 800617c:	d048      	beq.n	8006210 <_free_r+0x98>
 800617e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006182:	9001      	str	r0, [sp, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f1a1 0404 	sub.w	r4, r1, #4
 800618a:	bfb8      	it	lt
 800618c:	18e4      	addlt	r4, r4, r3
 800618e:	f000 f947 	bl	8006420 <__malloc_lock>
 8006192:	4a20      	ldr	r2, [pc, #128]	; (8006214 <_free_r+0x9c>)
 8006194:	9801      	ldr	r0, [sp, #4]
 8006196:	6813      	ldr	r3, [r2, #0]
 8006198:	4615      	mov	r5, r2
 800619a:	b933      	cbnz	r3, 80061aa <_free_r+0x32>
 800619c:	6063      	str	r3, [r4, #4]
 800619e:	6014      	str	r4, [r2, #0]
 80061a0:	b003      	add	sp, #12
 80061a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061a6:	f000 b941 	b.w	800642c <__malloc_unlock>
 80061aa:	42a3      	cmp	r3, r4
 80061ac:	d90b      	bls.n	80061c6 <_free_r+0x4e>
 80061ae:	6821      	ldr	r1, [r4, #0]
 80061b0:	1862      	adds	r2, r4, r1
 80061b2:	4293      	cmp	r3, r2
 80061b4:	bf04      	itt	eq
 80061b6:	681a      	ldreq	r2, [r3, #0]
 80061b8:	685b      	ldreq	r3, [r3, #4]
 80061ba:	6063      	str	r3, [r4, #4]
 80061bc:	bf04      	itt	eq
 80061be:	1852      	addeq	r2, r2, r1
 80061c0:	6022      	streq	r2, [r4, #0]
 80061c2:	602c      	str	r4, [r5, #0]
 80061c4:	e7ec      	b.n	80061a0 <_free_r+0x28>
 80061c6:	461a      	mov	r2, r3
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	b10b      	cbz	r3, 80061d0 <_free_r+0x58>
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	d9fa      	bls.n	80061c6 <_free_r+0x4e>
 80061d0:	6811      	ldr	r1, [r2, #0]
 80061d2:	1855      	adds	r5, r2, r1
 80061d4:	42a5      	cmp	r5, r4
 80061d6:	d10b      	bne.n	80061f0 <_free_r+0x78>
 80061d8:	6824      	ldr	r4, [r4, #0]
 80061da:	4421      	add	r1, r4
 80061dc:	1854      	adds	r4, r2, r1
 80061de:	42a3      	cmp	r3, r4
 80061e0:	6011      	str	r1, [r2, #0]
 80061e2:	d1dd      	bne.n	80061a0 <_free_r+0x28>
 80061e4:	681c      	ldr	r4, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	6053      	str	r3, [r2, #4]
 80061ea:	4421      	add	r1, r4
 80061ec:	6011      	str	r1, [r2, #0]
 80061ee:	e7d7      	b.n	80061a0 <_free_r+0x28>
 80061f0:	d902      	bls.n	80061f8 <_free_r+0x80>
 80061f2:	230c      	movs	r3, #12
 80061f4:	6003      	str	r3, [r0, #0]
 80061f6:	e7d3      	b.n	80061a0 <_free_r+0x28>
 80061f8:	6825      	ldr	r5, [r4, #0]
 80061fa:	1961      	adds	r1, r4, r5
 80061fc:	428b      	cmp	r3, r1
 80061fe:	bf04      	itt	eq
 8006200:	6819      	ldreq	r1, [r3, #0]
 8006202:	685b      	ldreq	r3, [r3, #4]
 8006204:	6063      	str	r3, [r4, #4]
 8006206:	bf04      	itt	eq
 8006208:	1949      	addeq	r1, r1, r5
 800620a:	6021      	streq	r1, [r4, #0]
 800620c:	6054      	str	r4, [r2, #4]
 800620e:	e7c7      	b.n	80061a0 <_free_r+0x28>
 8006210:	b003      	add	sp, #12
 8006212:	bd30      	pop	{r4, r5, pc}
 8006214:	20000748 	.word	0x20000748

08006218 <_malloc_r>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	1ccd      	adds	r5, r1, #3
 800621c:	f025 0503 	bic.w	r5, r5, #3
 8006220:	3508      	adds	r5, #8
 8006222:	2d0c      	cmp	r5, #12
 8006224:	bf38      	it	cc
 8006226:	250c      	movcc	r5, #12
 8006228:	2d00      	cmp	r5, #0
 800622a:	4606      	mov	r6, r0
 800622c:	db01      	blt.n	8006232 <_malloc_r+0x1a>
 800622e:	42a9      	cmp	r1, r5
 8006230:	d903      	bls.n	800623a <_malloc_r+0x22>
 8006232:	230c      	movs	r3, #12
 8006234:	6033      	str	r3, [r6, #0]
 8006236:	2000      	movs	r0, #0
 8006238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800623a:	f000 f8f1 	bl	8006420 <__malloc_lock>
 800623e:	4921      	ldr	r1, [pc, #132]	; (80062c4 <_malloc_r+0xac>)
 8006240:	680a      	ldr	r2, [r1, #0]
 8006242:	4614      	mov	r4, r2
 8006244:	b99c      	cbnz	r4, 800626e <_malloc_r+0x56>
 8006246:	4f20      	ldr	r7, [pc, #128]	; (80062c8 <_malloc_r+0xb0>)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	b923      	cbnz	r3, 8006256 <_malloc_r+0x3e>
 800624c:	4621      	mov	r1, r4
 800624e:	4630      	mov	r0, r6
 8006250:	f000 f83c 	bl	80062cc <_sbrk_r>
 8006254:	6038      	str	r0, [r7, #0]
 8006256:	4629      	mov	r1, r5
 8006258:	4630      	mov	r0, r6
 800625a:	f000 f837 	bl	80062cc <_sbrk_r>
 800625e:	1c43      	adds	r3, r0, #1
 8006260:	d123      	bne.n	80062aa <_malloc_r+0x92>
 8006262:	230c      	movs	r3, #12
 8006264:	6033      	str	r3, [r6, #0]
 8006266:	4630      	mov	r0, r6
 8006268:	f000 f8e0 	bl	800642c <__malloc_unlock>
 800626c:	e7e3      	b.n	8006236 <_malloc_r+0x1e>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	1b5b      	subs	r3, r3, r5
 8006272:	d417      	bmi.n	80062a4 <_malloc_r+0x8c>
 8006274:	2b0b      	cmp	r3, #11
 8006276:	d903      	bls.n	8006280 <_malloc_r+0x68>
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	441c      	add	r4, r3
 800627c:	6025      	str	r5, [r4, #0]
 800627e:	e004      	b.n	800628a <_malloc_r+0x72>
 8006280:	6863      	ldr	r3, [r4, #4]
 8006282:	42a2      	cmp	r2, r4
 8006284:	bf0c      	ite	eq
 8006286:	600b      	streq	r3, [r1, #0]
 8006288:	6053      	strne	r3, [r2, #4]
 800628a:	4630      	mov	r0, r6
 800628c:	f000 f8ce 	bl	800642c <__malloc_unlock>
 8006290:	f104 000b 	add.w	r0, r4, #11
 8006294:	1d23      	adds	r3, r4, #4
 8006296:	f020 0007 	bic.w	r0, r0, #7
 800629a:	1ac2      	subs	r2, r0, r3
 800629c:	d0cc      	beq.n	8006238 <_malloc_r+0x20>
 800629e:	1a1b      	subs	r3, r3, r0
 80062a0:	50a3      	str	r3, [r4, r2]
 80062a2:	e7c9      	b.n	8006238 <_malloc_r+0x20>
 80062a4:	4622      	mov	r2, r4
 80062a6:	6864      	ldr	r4, [r4, #4]
 80062a8:	e7cc      	b.n	8006244 <_malloc_r+0x2c>
 80062aa:	1cc4      	adds	r4, r0, #3
 80062ac:	f024 0403 	bic.w	r4, r4, #3
 80062b0:	42a0      	cmp	r0, r4
 80062b2:	d0e3      	beq.n	800627c <_malloc_r+0x64>
 80062b4:	1a21      	subs	r1, r4, r0
 80062b6:	4630      	mov	r0, r6
 80062b8:	f000 f808 	bl	80062cc <_sbrk_r>
 80062bc:	3001      	adds	r0, #1
 80062be:	d1dd      	bne.n	800627c <_malloc_r+0x64>
 80062c0:	e7cf      	b.n	8006262 <_malloc_r+0x4a>
 80062c2:	bf00      	nop
 80062c4:	20000748 	.word	0x20000748
 80062c8:	2000074c 	.word	0x2000074c

080062cc <_sbrk_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4d06      	ldr	r5, [pc, #24]	; (80062e8 <_sbrk_r+0x1c>)
 80062d0:	2300      	movs	r3, #0
 80062d2:	4604      	mov	r4, r0
 80062d4:	4608      	mov	r0, r1
 80062d6:	602b      	str	r3, [r5, #0]
 80062d8:	f7fb f936 	bl	8001548 <_sbrk>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	d102      	bne.n	80062e6 <_sbrk_r+0x1a>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	b103      	cbz	r3, 80062e6 <_sbrk_r+0x1a>
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	bd38      	pop	{r3, r4, r5, pc}
 80062e8:	20000820 	.word	0x20000820

080062ec <__sread>:
 80062ec:	b510      	push	{r4, lr}
 80062ee:	460c      	mov	r4, r1
 80062f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f4:	f000 f8a0 	bl	8006438 <_read_r>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	bfab      	itete	ge
 80062fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006300:	181b      	addge	r3, r3, r0
 8006302:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006306:	bfac      	ite	ge
 8006308:	6563      	strge	r3, [r4, #84]	; 0x54
 800630a:	81a3      	strhlt	r3, [r4, #12]
 800630c:	bd10      	pop	{r4, pc}

0800630e <__swrite>:
 800630e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006312:	461f      	mov	r7, r3
 8006314:	898b      	ldrh	r3, [r1, #12]
 8006316:	05db      	lsls	r3, r3, #23
 8006318:	4605      	mov	r5, r0
 800631a:	460c      	mov	r4, r1
 800631c:	4616      	mov	r6, r2
 800631e:	d505      	bpl.n	800632c <__swrite+0x1e>
 8006320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006324:	2302      	movs	r3, #2
 8006326:	2200      	movs	r2, #0
 8006328:	f000 f868 	bl	80063fc <_lseek_r>
 800632c:	89a3      	ldrh	r3, [r4, #12]
 800632e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006336:	81a3      	strh	r3, [r4, #12]
 8006338:	4632      	mov	r2, r6
 800633a:	463b      	mov	r3, r7
 800633c:	4628      	mov	r0, r5
 800633e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006342:	f000 b817 	b.w	8006374 <_write_r>

08006346 <__sseek>:
 8006346:	b510      	push	{r4, lr}
 8006348:	460c      	mov	r4, r1
 800634a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800634e:	f000 f855 	bl	80063fc <_lseek_r>
 8006352:	1c43      	adds	r3, r0, #1
 8006354:	89a3      	ldrh	r3, [r4, #12]
 8006356:	bf15      	itete	ne
 8006358:	6560      	strne	r0, [r4, #84]	; 0x54
 800635a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800635e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006362:	81a3      	strheq	r3, [r4, #12]
 8006364:	bf18      	it	ne
 8006366:	81a3      	strhne	r3, [r4, #12]
 8006368:	bd10      	pop	{r4, pc}

0800636a <__sclose>:
 800636a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800636e:	f000 b813 	b.w	8006398 <_close_r>
	...

08006374 <_write_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d07      	ldr	r5, [pc, #28]	; (8006394 <_write_r+0x20>)
 8006378:	4604      	mov	r4, r0
 800637a:	4608      	mov	r0, r1
 800637c:	4611      	mov	r1, r2
 800637e:	2200      	movs	r2, #0
 8006380:	602a      	str	r2, [r5, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	f7fb f88f 	bl	80014a6 <_write>
 8006388:	1c43      	adds	r3, r0, #1
 800638a:	d102      	bne.n	8006392 <_write_r+0x1e>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	b103      	cbz	r3, 8006392 <_write_r+0x1e>
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	20000820 	.word	0x20000820

08006398 <_close_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4d06      	ldr	r5, [pc, #24]	; (80063b4 <_close_r+0x1c>)
 800639c:	2300      	movs	r3, #0
 800639e:	4604      	mov	r4, r0
 80063a0:	4608      	mov	r0, r1
 80063a2:	602b      	str	r3, [r5, #0]
 80063a4:	f7fb f89b 	bl	80014de <_close>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d102      	bne.n	80063b2 <_close_r+0x1a>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	b103      	cbz	r3, 80063b2 <_close_r+0x1a>
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	20000820 	.word	0x20000820

080063b8 <_fstat_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d07      	ldr	r5, [pc, #28]	; (80063d8 <_fstat_r+0x20>)
 80063bc:	2300      	movs	r3, #0
 80063be:	4604      	mov	r4, r0
 80063c0:	4608      	mov	r0, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	602b      	str	r3, [r5, #0]
 80063c6:	f7fb f896 	bl	80014f6 <_fstat>
 80063ca:	1c43      	adds	r3, r0, #1
 80063cc:	d102      	bne.n	80063d4 <_fstat_r+0x1c>
 80063ce:	682b      	ldr	r3, [r5, #0]
 80063d0:	b103      	cbz	r3, 80063d4 <_fstat_r+0x1c>
 80063d2:	6023      	str	r3, [r4, #0]
 80063d4:	bd38      	pop	{r3, r4, r5, pc}
 80063d6:	bf00      	nop
 80063d8:	20000820 	.word	0x20000820

080063dc <_isatty_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4d06      	ldr	r5, [pc, #24]	; (80063f8 <_isatty_r+0x1c>)
 80063e0:	2300      	movs	r3, #0
 80063e2:	4604      	mov	r4, r0
 80063e4:	4608      	mov	r0, r1
 80063e6:	602b      	str	r3, [r5, #0]
 80063e8:	f7fb f895 	bl	8001516 <_isatty>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d102      	bne.n	80063f6 <_isatty_r+0x1a>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	b103      	cbz	r3, 80063f6 <_isatty_r+0x1a>
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	20000820 	.word	0x20000820

080063fc <_lseek_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d07      	ldr	r5, [pc, #28]	; (800641c <_lseek_r+0x20>)
 8006400:	4604      	mov	r4, r0
 8006402:	4608      	mov	r0, r1
 8006404:	4611      	mov	r1, r2
 8006406:	2200      	movs	r2, #0
 8006408:	602a      	str	r2, [r5, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	f7fb f88e 	bl	800152c <_lseek>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d102      	bne.n	800641a <_lseek_r+0x1e>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	b103      	cbz	r3, 800641a <_lseek_r+0x1e>
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	20000820 	.word	0x20000820

08006420 <__malloc_lock>:
 8006420:	4801      	ldr	r0, [pc, #4]	; (8006428 <__malloc_lock+0x8>)
 8006422:	f7ff be43 	b.w	80060ac <__retarget_lock_acquire_recursive>
 8006426:	bf00      	nop
 8006428:	20000818 	.word	0x20000818

0800642c <__malloc_unlock>:
 800642c:	4801      	ldr	r0, [pc, #4]	; (8006434 <__malloc_unlock+0x8>)
 800642e:	f7ff be3e 	b.w	80060ae <__retarget_lock_release_recursive>
 8006432:	bf00      	nop
 8006434:	20000818 	.word	0x20000818

08006438 <_read_r>:
 8006438:	b538      	push	{r3, r4, r5, lr}
 800643a:	4d07      	ldr	r5, [pc, #28]	; (8006458 <_read_r+0x20>)
 800643c:	4604      	mov	r4, r0
 800643e:	4608      	mov	r0, r1
 8006440:	4611      	mov	r1, r2
 8006442:	2200      	movs	r2, #0
 8006444:	602a      	str	r2, [r5, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	f7fb f810 	bl	800146c <_read>
 800644c:	1c43      	adds	r3, r0, #1
 800644e:	d102      	bne.n	8006456 <_read_r+0x1e>
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	b103      	cbz	r3, 8006456 <_read_r+0x1e>
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	bd38      	pop	{r3, r4, r5, pc}
 8006458:	20000820 	.word	0x20000820

0800645c <_init>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	bf00      	nop
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr

08006468 <_fini>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	bf00      	nop
 800646c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646e:	bc08      	pop	{r3}
 8006470:	469e      	mov	lr, r3
 8006472:	4770      	bx	lr
