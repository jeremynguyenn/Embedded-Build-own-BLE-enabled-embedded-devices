
2_custom services.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004530  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004820  08004820  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004828  08004828  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004828  08004828  00014828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800482c  0800482c  0001482c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  20000078  080048a8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  080048a8  00020808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000215b1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003582  00000000  00000000  00041659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00044be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00045c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f514  00000000  00000000  00046bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000866c  00000000  00000000  000560d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0005e740  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004b90  00000000  00000000  0005e794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080046b0 	.word	0x080046b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	080046b0 	.word	0x080046b0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80004e4:	2006      	movs	r0, #6
 80004e6:	f001 f822 	bl	800152e <HAL_NVIC_EnableIRQ>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}

080004ee <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80004f2:	2006      	movs	r0, #6
 80004f4:	f001 f829 	bl	800154a <HAL_NVIC_DisableIRQ>
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	4b20      	ldr	r3, [pc, #128]	; (800058c <HCI_TL_SPI_Init+0x90>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	4a1f      	ldr	r2, [pc, #124]	; (800058c <HCI_TL_SPI_Init+0x90>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6313      	str	r3, [r2, #48]	; 0x30
 8000514:	4b1d      	ldr	r3, [pc, #116]	; (800058c <HCI_TL_SPI_Init+0x90>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000520:	2301      	movs	r3, #1
 8000522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000524:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	4619      	mov	r1, r3
 8000534:	4816      	ldr	r0, [pc, #88]	; (8000590 <HCI_TL_SPI_Init+0x94>)
 8000536:	f001 f875 	bl	8001624 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800053a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800053e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	4619      	mov	r1, r3
 8000552:	480f      	ldr	r0, [pc, #60]	; (8000590 <HCI_TL_SPI_Init+0x94>)
 8000554:	f001 f866 	bl	8001624 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000558:	2302      	movs	r3, #2
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <HCI_TL_SPI_Init+0x94>)
 8000570:	f001 f858 	bl	8001624 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2102      	movs	r1, #2
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <HCI_TL_SPI_Init+0x94>)
 800057a:	f001 fad3 	bl	8001b24 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 800057e:	f000 fa2f 	bl	80009e0 <BSP_SPI1_Init>
 8000582:	4603      	mov	r3, r0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40023800 	.word	0x40023800
 8000590:	40020000 	.word	0x40020000

08000594 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000598:	2101      	movs	r1, #1
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <HCI_TL_SPI_DeInit+0x24>)
 800059c:	f001 f9c6 	bl	800192c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80005a0:	2102      	movs	r1, #2
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <HCI_TL_SPI_DeInit+0x24>)
 80005a4:	f001 f9c2 	bl	800192c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80005a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <HCI_TL_SPI_DeInit+0x24>)
 80005ae:	f001 f9bd 	bl	800192c <HAL_GPIO_DeInit>
  return 0;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40020000 	.word	0x40020000

080005bc <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2102      	movs	r1, #2
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <HCI_TL_SPI_Reset+0x38>)
 80005c6:	f001 faad 	bl	8001b24 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <HCI_TL_SPI_Reset+0x38>)
 80005d2:	f001 faa7 	bl	8001b24 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005d6:	2005      	movs	r0, #5
 80005d8:	f000 fe6a 	bl	80012b0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e2:	4804      	ldr	r0, [pc, #16]	; (80005f4 <HCI_TL_SPI_Reset+0x38>)
 80005e4:	f001 fa9e 	bl	8001b24 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005e8:	2005      	movs	r0, #5
 80005ea:	f000 fe61 	bl	80012b0 <HAL_Delay>
  return 0;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40020000 	.word	0x40020000

080005f8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8000608:	2300      	movs	r3, #0
 800060a:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800060c:	4a30      	ldr	r2, [pc, #192]	; (80006d0 <HCI_TL_SPI_Receive+0xd8>)
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000616:	6018      	str	r0, [r3, #0]
 8000618:	3304      	adds	r3, #4
 800061a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 800061c:	f7ff ff67 	bl	80004ee <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2102      	movs	r1, #2
 8000624:	482b      	ldr	r0, [pc, #172]	; (80006d4 <HCI_TL_SPI_Receive+0xdc>)
 8000626:	f001 fa7d 	bl	8001b24 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800062a:	f107 0108 	add.w	r1, r7, #8
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	2205      	movs	r2, #5
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fa03 	bl	8000a40 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 800063a:	7b3b      	ldrb	r3, [r7, #12]
 800063c:	021b      	lsls	r3, r3, #8
 800063e:	b21a      	sxth	r2, r3
 8000640:	7afb      	ldrb	r3, [r7, #11]
 8000642:	b21b      	sxth	r3, r3
 8000644:	4313      	orrs	r3, r2
 8000646:	b21b      	sxth	r3, r3
 8000648:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 800064a:	8bfb      	ldrh	r3, [r7, #30]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d01e      	beq.n	800068e <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8000650:	8bfa      	ldrh	r2, [r7, #30]
 8000652:	887b      	ldrh	r3, [r7, #2]
 8000654:	429a      	cmp	r2, r3
 8000656:	d901      	bls.n	800065c <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 8000658:	887b      	ldrh	r3, [r7, #2]
 800065a:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 800065c:	2300      	movs	r3, #0
 800065e:	777b      	strb	r3, [r7, #29]
 8000660:	e010      	b.n	8000684 <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8000662:	f107 0116 	add.w	r1, r7, #22
 8000666:	f107 0317 	add.w	r3, r7, #23
 800066a:	2201      	movs	r2, #1
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f9e7 	bl	8000a40 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8000672:	7f7b      	ldrb	r3, [r7, #29]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	7dba      	ldrb	r2, [r7, #22]
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 800067e:	7f7b      	ldrb	r3, [r7, #29]
 8000680:	3301      	adds	r3, #1
 8000682:	777b      	strb	r3, [r7, #29]
 8000684:	7f7b      	ldrb	r3, [r7, #29]
 8000686:	b29b      	uxth	r3, r3
 8000688:	8bfa      	ldrh	r2, [r7, #30]
 800068a:	429a      	cmp	r2, r3
 800068c:	d8e9      	bhi.n	8000662 <HCI_TL_SPI_Receive+0x6a>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 800068e:	f000 fe03 	bl	8001298 <HAL_GetTick>
 8000692:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000694:	e006      	b.n	80006a4 <HCI_TL_SPI_Receive+0xac>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8000696:	2101      	movs	r1, #1
 8000698:	480e      	ldr	r0, [pc, #56]	; (80006d4 <HCI_TL_SPI_Receive+0xdc>)
 800069a:	f001 fa2b 	bl	8001af4 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d008      	beq.n	80006b6 <HCI_TL_SPI_Receive+0xbe>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80006a4:	f000 fdf8 	bl	8001298 <HAL_GetTick>
 80006a8:	4602      	mov	r2, r0
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006b2:	d3f0      	bcc.n	8000696 <HCI_TL_SPI_Receive+0x9e>
 80006b4:	e000      	b.n	80006b8 <HCI_TL_SPI_Receive+0xc0>
      break;
 80006b6:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80006b8:	f7ff ff12 	bl	80004e0 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2102      	movs	r1, #2
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <HCI_TL_SPI_Receive+0xdc>)
 80006c2:	f001 fa2f 	bl	8001b24 <HAL_GPIO_WritePin>

  return len;
 80006c6:	7f7b      	ldrb	r3, [r7, #29]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	080046c8 	.word	0x080046c8
 80006d4:	40020000 	.word	0x40020000

080006d8 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80006e4:	4a3f      	ldr	r2, [pc, #252]	; (80007e4 <HCI_TL_SPI_Send+0x10c>)
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ee:	6018      	str	r0, [r3, #0]
 80006f0:	3304      	adds	r3, #4
 80006f2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80006f4:	f000 fdd0 	bl	8001298 <HAL_GetTick>
 80006f8:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80006fa:	f7ff fef8 	bl	80004ee <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 80006fe:	f000 fdcb 	bl	8001298 <HAL_GetTick>
 8000702:	61f8      	str	r0, [r7, #28]

    result = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2102      	movs	r1, #2
 800070c:	4836      	ldr	r0, [pc, #216]	; (80007e8 <HCI_TL_SPI_Send+0x110>)
 800070e:	f001 fa09 	bl	8001b24 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8000712:	e00a      	b.n	800072a <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8000714:	f000 fdc0 	bl	8001298 <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	2b0f      	cmp	r3, #15
 8000720:	d903      	bls.n	800072a <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 8000722:	f06f 0302 	mvn.w	r3, #2
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8000728:	e004      	b.n	8000734 <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 800072a:	f000 f861 	bl	80007f0 <IsDataAvailable>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d0ef      	beq.n	8000714 <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	f113 0f03 	cmn.w	r3, #3
 800073a:	d105      	bne.n	8000748 <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	2102      	movs	r1, #2
 8000740:	4829      	ldr	r0, [pc, #164]	; (80007e8 <HCI_TL_SPI_Send+0x110>)
 8000742:	f001 f9ef 	bl	8001b24 <HAL_GPIO_WritePin>
      break;
 8000746:	e030      	b.n	80007aa <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000748:	f107 010c 	add.w	r1, r7, #12
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2205      	movs	r2, #5
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f974 	bl	8000a40 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8000758:	7bbb      	ldrb	r3, [r7, #14]
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	b21a      	sxth	r2, r3
 800075e:	7b7b      	ldrb	r3, [r7, #13]
 8000760:	b21b      	sxth	r3, r3
 8000762:	4313      	orrs	r3, r2
 8000764:	b21b      	sxth	r3, r3
 8000766:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8000768:	8b7a      	ldrh	r2, [r7, #26]
 800076a:	887b      	ldrh	r3, [r7, #2]
 800076c:	429a      	cmp	r2, r3
 800076e:	d306      	bcc.n	800077e <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000770:	887b      	ldrh	r3, [r7, #2]
 8000772:	461a      	mov	r2, r3
 8000774:	491d      	ldr	r1, [pc, #116]	; (80007ec <HCI_TL_SPI_Send+0x114>)
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f000 f962 	bl	8000a40 <BSP_SPI1_SendRecv>
 800077c:	e002      	b.n	8000784 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 800077e:	f06f 0301 	mvn.w	r3, #1
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2102      	movs	r1, #2
 8000788:	4817      	ldr	r0, [pc, #92]	; (80007e8 <HCI_TL_SPI_Send+0x110>)
 800078a:	f001 f9cb 	bl	8001b24 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800078e:	f000 fd83 	bl	8001298 <HAL_GetTick>
 8000792:	4602      	mov	r2, r0
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	2b0f      	cmp	r3, #15
 800079a:	d903      	bls.n	80007a4 <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 800079c:	f06f 0302 	mvn.w	r3, #2
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80007a2:	e002      	b.n	80007aa <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 80007a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	dba9      	blt.n	80006fe <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 80007aa:	f000 fd75 	bl	8001298 <HAL_GetTick>
 80007ae:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80007b0:	e006      	b.n	80007c0 <HCI_TL_SPI_Send+0xe8>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80007b2:	2101      	movs	r1, #1
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <HCI_TL_SPI_Send+0x110>)
 80007b6:	f001 f99d 	bl	8001af4 <HAL_GPIO_ReadPin>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d008      	beq.n	80007d2 <HCI_TL_SPI_Send+0xfa>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80007c0:	f000 fd6a 	bl	8001298 <HAL_GetTick>
 80007c4:	4602      	mov	r2, r0
 80007c6:	6a3b      	ldr	r3, [r7, #32]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007ce:	d3f0      	bcc.n	80007b2 <HCI_TL_SPI_Send+0xda>
 80007d0:	e000      	b.n	80007d4 <HCI_TL_SPI_Send+0xfc>
      break;
 80007d2:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80007d4:	f7ff fe84 	bl	80004e0 <HCI_TL_SPI_Enable_IRQ>

  return result;
 80007d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	080046d0 	.word	0x080046d0
 80007e8:	40020000 	.word	0x40020000
 80007ec:	20000094 	.word	0x20000094

080007f0 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80007f4:	2101      	movs	r1, #1
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <IsDataAvailable+0x1c>)
 80007f8:	f001 f97c 	bl	8001af4 <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	bf0c      	ite	eq
 8000802:	2301      	moveq	r3, #1
 8000804:	2300      	movne	r3, #0
 8000806:	b2db      	uxtb	r3, r3
}
 8000808:	4618      	mov	r0, r3
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40020000 	.word	0x40020000

08000810 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <hci_tl_lowlevel_init+0x54>)
 8000818:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <hci_tl_lowlevel_init+0x58>)
 800081c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <hci_tl_lowlevel_init+0x5c>)
 8000820:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <hci_tl_lowlevel_init+0x60>)
 8000824:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <hci_tl_lowlevel_init+0x64>)
 8000828:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <hci_tl_lowlevel_init+0x68>)
 800082c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f002 ff99 	bl	8003768 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000836:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 800083a:	4810      	ldr	r0, [pc, #64]	; (800087c <hci_tl_lowlevel_init+0x6c>)
 800083c:	f000 feb9 	bl	80015b2 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000840:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <hci_tl_lowlevel_init+0x70>)
 8000842:	2100      	movs	r1, #0
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <hci_tl_lowlevel_init+0x6c>)
 8000846:	f000 fe9a 	bl	800157e <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2006      	movs	r0, #6
 8000850:	f000 fe51 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000854:	2006      	movs	r0, #6
 8000856:	f000 fe6a 	bl	800152e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800085a:	bf00      	nop
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	080004fd 	.word	0x080004fd
 8000868:	08000595 	.word	0x08000595
 800086c:	080006d9 	.word	0x080006d9
 8000870:	080005f9 	.word	0x080005f9
 8000874:	080005bd 	.word	0x080005bd
 8000878:	08000a81 	.word	0x08000a81
 800087c:	2000073c 	.word	0x2000073c
 8000880:	08000885 	.word	0x08000885

08000884 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000888:	e005      	b.n	8000896 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800088a:	2000      	movs	r0, #0
 800088c:	f003 f8a6 	bl	80039dc <hci_notify_asynch_evt>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d105      	bne.n	80008a2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8000896:	f7ff ffab 	bl	80007f0 <IsDataAvailable>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f4      	bne.n	800088a <hci_tl_lowlevel_isr+0x6>
 80008a0:	e000      	b.n	80008a4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80008a2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <bluenrg_init>:
#include "stdlib.h"

#define bdaddre_size 6
uint8_t SERVER_BDARR[]={0x01,0x02,0x03,0x04,0x05,0x6};
void bluenrg_init(void)
	{
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af02      	add	r7, sp, #8
	const char *name ="Trix";
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <bluenrg_init+0xd4>)
 80008b0:	617b      	str	r3, [r7, #20]
	tBleStatus ret;
	uint8_t bdaddre[bdaddre_size];
	BLUENRG_memcpy(bdaddre,SERVER_BDARR,sizeof(SERVER_BDARR));
 80008b2:	4a33      	ldr	r2, [pc, #204]	; (8000980 <bluenrg_init+0xd8>)
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008bc:	6018      	str	r0, [r3, #0]
 80008be:	3304      	adds	r3, #4
 80008c0:	8019      	strh	r1, [r3, #0]
	 * 5.Initialize GAP service
	 * 6.Update characteristics
	 * 7.Add custom service
	 * */
	/*1.*/
	hci_init(0,0);
 80008c2:	2100      	movs	r1, #0
 80008c4:	2000      	movs	r0, #0
 80008c6:	f002 ff0d 	bl	80036e4 <hci_init>
	hci_reset();
 80008ca:	f002 fb01 	bl	8002ed0 <hci_reset>
	HAL_Delay(100);
 80008ce:	2064      	movs	r0, #100	; 0x64
 80008d0:	f000 fcee 	bl	80012b0 <HAL_Delay>
	ret=aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,CONFIG_DATA_PUBADDR_LEN, bdaddre);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	461a      	mov	r2, r3
 80008da:	2106      	movs	r1, #6
 80008dc:	2000      	movs	r0, #0
 80008de:	f002 fdf7 	bl	80034d0 <aci_hal_write_config_data>
 80008e2:	4603      	mov	r3, r0
 80008e4:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_hal_write_config_data failed \r\n");}
 80008e6:	7cfb      	ldrb	r3, [r7, #19]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <bluenrg_init+0x4a>
 80008ec:	4825      	ldr	r0, [pc, #148]	; (8000984 <bluenrg_init+0xdc>)
 80008ee:	f003 fa87 	bl	8003e00 <puts>
	ret=aci_gatt_init();
 80008f2:	f002 fc86 	bl	8003202 <aci_gatt_init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_init failed \r\n");}
 80008fa:	7cfb      	ldrb	r3, [r7, #19]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <bluenrg_init+0x5e>
 8000900:	4821      	ldr	r0, [pc, #132]	; (8000988 <bluenrg_init+0xe0>)
 8000902:	f003 fa7d 	bl	8003e00 <puts>
	ret=aci_gap_init(GAP_PERIPHERAL_ROLE,0,0x07,&service_handle,&dev_name_char_handle,&appearance_char_handle);
 8000906:	f107 020a 	add.w	r2, r7, #10
 800090a:	1dbb      	adds	r3, r7, #6
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	4613      	mov	r3, r2
 8000916:	2207      	movs	r2, #7
 8000918:	2100      	movs	r1, #0
 800091a:	2001      	movs	r0, #1
 800091c:	f002 fbe6 	bl	80030ec <aci_gap_init>
 8000920:	4603      	mov	r3, r0
 8000922:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gap_init failed \r\n");}
 8000924:	7cfb      	ldrb	r3, [r7, #19]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d002      	beq.n	8000930 <bluenrg_init+0x88>
 800092a:	4818      	ldr	r0, [pc, #96]	; (800098c <bluenrg_init+0xe4>)
 800092c:	f003 fa68 	bl	8003e00 <puts>
	ret=aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t*)name);
 8000930:	897c      	ldrh	r4, [r7, #10]
 8000932:	893d      	ldrh	r5, [r7, #8]
 8000934:	6978      	ldr	r0, [r7, #20]
 8000936:	f7ff fc4f 	bl	80001d8 <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	b2da      	uxtb	r2, r3
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	4613      	mov	r3, r2
 8000944:	2200      	movs	r2, #0
 8000946:	4629      	mov	r1, r5
 8000948:	4620      	mov	r0, r4
 800094a:	f002 fd33 	bl	80033b4 <aci_gatt_update_char_value>
 800094e:	4603      	mov	r3, r0
 8000950:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_update_char_value failed \r\n");}
 8000952:	7cfb      	ldrb	r3, [r7, #19]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <bluenrg_init+0xb6>
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <bluenrg_init+0xe8>)
 800095a:	f003 fa51 	bl	8003e00 <puts>
	//add custom service
	ret = add_simple_service();
 800095e:	f000 fa8d 	bl	8000e7c <add_simple_service>
 8000962:	4603      	mov	r3, r0
 8000964:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("add_simple_service failed \r\n");}
 8000966:	7cfb      	ldrb	r3, [r7, #19]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <bluenrg_init+0xca>
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <bluenrg_init+0xec>)
 800096e:	f003 fa47 	bl	8003e00 <puts>
	}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bdb0      	pop	{r4, r5, r7, pc}
 800097a:	bf00      	nop
 800097c:	080046d8 	.word	0x080046d8
 8000980:	20000000 	.word	0x20000000
 8000984:	080046e0 	.word	0x080046e0
 8000988:	08004704 	.word	0x08004704
 800098c:	0800471c 	.word	0x0800471c
 8000990:	08004734 	.word	0x08004734
 8000994:	08004758 	.word	0x08004758

08000998 <bluenrg_process>:

void bluenrg_process(void)
		{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
 800099c:	af08      	add	r7, sp, #32
			tBleStatus ret;
			uint8_t local_name[]={AD_TYPE_COMPLETE_LOCAL_NAME,'B','L','E','-','G','-','U','P'};
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <bluenrg_process+0x44>)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80009a4:	c303      	stmia	r3!, {r0, r1}
 80009a6:	701a      	strb	r2, [r3, #0]
			ret=aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR,
 80009a8:	2300      	movs	r3, #0
 80009aa:	9306      	str	r3, [sp, #24]
 80009ac:	2300      	movs	r3, #0
 80009ae:	9305      	str	r3, [sp, #20]
 80009b0:	2300      	movs	r3, #0
 80009b2:	9304      	str	r3, [sp, #16]
 80009b4:	2300      	movs	r3, #0
 80009b6:	9303      	str	r3, [sp, #12]
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	2309      	movs	r3, #9
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	2300      	movs	r3, #0
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2300      	movs	r3, #0
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2000      	movs	r0, #0
 80009cc:	f002 faa9 	bl	8002f22 <aci_gap_set_discoverable>
 80009d0:	4603      	mov	r3, r0
 80009d2:	73fb      	strb	r3, [r7, #15]
					NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);

			//if(ret !=BLE_STATUS_SUCCESS){printf("aci_gap_set_discoverable failed \r\n");}
		}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	08004774 	.word	0x08004774

080009e0 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <BSP_SPI1_Init+0x54>)
 80009ec:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <BSP_SPI1_Init+0x58>)
 80009ee:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <BSP_SPI1_Init+0x5c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	4911      	ldr	r1, [pc, #68]	; (8000a3c <BSP_SPI1_Init+0x5c>)
 80009f8:	600a      	str	r2, [r1, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d114      	bne.n	8000a28 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80009fe:	480d      	ldr	r0, [pc, #52]	; (8000a34 <BSP_SPI1_Init+0x54>)
 8000a00:	f001 ff77 	bl	80028f2 <HAL_SPI_GetState>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10e      	bne.n	8000a28 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8000a0a:	480a      	ldr	r0, [pc, #40]	; (8000a34 <BSP_SPI1_Init+0x54>)
 8000a0c:	f000 f87c 	bl	8000b08 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d108      	bne.n	8000a28 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000a16:	4807      	ldr	r0, [pc, #28]	; (8000a34 <BSP_SPI1_Init+0x54>)
 8000a18:	f000 f83a 	bl	8000a90 <MX_SPI1_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000a22:	f06f 0307 	mvn.w	r3, #7
 8000a26:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000744 	.word	0x20000744
 8000a38:	40013000 	.word	0x40013000
 8000a3c:	20000194 	.word	0x20000194

08000a40 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af02      	add	r7, sp, #8
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a58:	9200      	str	r2, [sp, #0]
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	68f9      	ldr	r1, [r7, #12]
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <BSP_SPI1_SendRecv+0x3c>)
 8000a60:	f001 fda5 	bl	80025ae <HAL_SPI_TransmitReceive>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d002      	beq.n	8000a70 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000a6a:	f06f 0305 	mvn.w	r3, #5
 8000a6e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8000a70:	697b      	ldr	r3, [r7, #20]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000744 	.word	0x20000744

08000a80 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000a84:	f000 fc08 	bl	8001298 <HAL_GetTick>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a19      	ldr	r2, [pc, #100]	; (8000b04 <MX_SPI1_Init+0x74>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2201      	movs	r2, #1
 8000ac0:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac8:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2228      	movs	r2, #40	; 0x28
 8000ace:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	220a      	movs	r2, #10
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f001 fccd 	bl	8002488 <HAL_SPI_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40013000 	.word	0x40013000

08000b08 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <SPI1_MspInit+0xc4>)
 8000b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b18:	4a2c      	ldr	r2, [pc, #176]	; (8000bcc <SPI1_MspInit+0xc4>)
 8000b1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b1e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b20:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <SPI1_MspInit+0xc4>)
 8000b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <SPI1_MspInit+0xc4>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4a25      	ldr	r2, [pc, #148]	; (8000bcc <SPI1_MspInit+0xc4>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <SPI1_MspInit+0xc4>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <SPI1_MspInit+0xc4>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a1e      	ldr	r2, [pc, #120]	; (8000bcc <SPI1_MspInit+0xc4>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <SPI1_MspInit+0xc4>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 0302 	and.w	r3, r3, #2
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000b64:	2340      	movs	r3, #64	; 0x40
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000b74:	2305      	movs	r3, #5
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <SPI1_MspInit+0xc8>)
 8000b80:	f000 fd50 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000b94:	2305      	movs	r3, #5
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <SPI1_MspInit+0xc8>)
 8000ba0:	f000 fd40 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <SPI1_MspInit+0xcc>)
 8000bc0:	f000 fd30 	bl	8001624 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	3728      	adds	r7, #40	; 0x28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <__io_putchar>:
/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int __io_putchar (int ch)
	{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR&0x0080)){
 8000be0:	bf00      	nop
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <__io_putchar+0x2c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f9      	beq.n	8000be2 <__io_putchar+0xa>
	}
	USART2->DR=(ch);
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <__io_putchar+0x2c>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6053      	str	r3, [r2, #4]
	//HAL_UART_Transmit(&huart2,((uint8_t *)ch),1,100);
	return ch;
 8000bf4:	687b      	ldr	r3, [r7, #4]
	}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40004400 	.word	0x40004400

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0c:	f000 fade 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c10:	f000 f80e 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c14:	f000 f89e 	bl	8000d54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c18:	f000 f872 	bl	8000d00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
printf("Hello from stm32\r\n");
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <main+0x24>)
 8000c1e:	f003 f8ef 	bl	8003e00 <puts>
bluenrg_init();
 8000c22:	f7ff fe41 	bl	80008a8 <bluenrg_init>

	  /*
	     * process BLE
	     *
	     * */
	  bluenrg_process();
 8000c26:	f7ff feb7 	bl	8000998 <bluenrg_process>
 8000c2a:	e7fc      	b.n	8000c26 <main+0x1e>
 8000c2c:	08004780 	.word	0x08004780

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b094      	sub	sp, #80	; 0x50
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	2230      	movs	r2, #48	; 0x30
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 f868 	bl	8003d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <SystemClock_Config+0xc8>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a26      	ldr	r2, [pc, #152]	; (8000cf8 <SystemClock_Config+0xc8>)
 8000c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
 8000c64:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <SystemClock_Config+0xc8>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a20      	ldr	r2, [pc, #128]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c90:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000ca4:	2340      	movs	r3, #64	; 0x40
 8000ca6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cac:	2304      	movs	r3, #4
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 0320 	add.w	r3, r7, #32
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 ff73 	bl	8001ba0 <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cc0:	f000 f8d6 	bl	8000e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	2102      	movs	r1, #2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 f9d5 	bl	8002090 <HAL_RCC_ClockConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cec:	f000 f8c0 	bl	8000e70 <Error_Handler>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3750      	adds	r7, #80	; 0x50
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40007000 	.word	0x40007000

08000d00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <MX_USART2_UART_Init+0x50>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d38:	f001 feb4 	bl	8002aa4 <HAL_UART_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d42:	f000 f895 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000079c 	.word	0x2000079c
 8000d50:	40004400 	.word	0x40004400

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <MX_GPIO_Init+0x110>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a3c      	ldr	r2, [pc, #240]	; (8000e64 <MX_GPIO_Init+0x110>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <MX_GPIO_Init+0x110>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <MX_GPIO_Init+0x110>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a35      	ldr	r2, [pc, #212]	; (8000e64 <MX_GPIO_Init+0x110>)
 8000d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <MX_GPIO_Init+0x110>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <MX_GPIO_Init+0x110>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a2e      	ldr	r2, [pc, #184]	; (8000e64 <MX_GPIO_Init+0x110>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <MX_GPIO_Init+0x110>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <MX_GPIO_Init+0x110>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a27      	ldr	r2, [pc, #156]	; (8000e64 <MX_GPIO_Init+0x110>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <MX_GPIO_Init+0x110>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LED_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000de0:	4821      	ldr	r0, [pc, #132]	; (8000e68 <MX_GPIO_Init+0x114>)
 8000de2:	f000 fe9f 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	481b      	ldr	r0, [pc, #108]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000dfe:	f000 fc11 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e02:	2301      	movs	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4814      	ldr	r0, [pc, #80]	; (8000e68 <MX_GPIO_Init+0x114>)
 8000e18:	f000 fc04 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LED_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LED_Pin|GPIO_PIN_8;
 8000e1c:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <MX_GPIO_Init+0x114>)
 8000e36:	f000 fbf5 	bl	8001624 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2006      	movs	r0, #6
 8000e40:	f000 fb59 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e44:	2006      	movs	r0, #6
 8000e46:	f000 fb72 	bl	800152e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2028      	movs	r0, #40	; 0x28
 8000e50:	f000 fb51 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e54:	2028      	movs	r0, #40	; 0x28
 8000e56:	f000 fb6a 	bl	800152e <HAL_NVIC_EnableIRQ>

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020800 	.word	0x40020800

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <add_simple_service>:
const uint8_t char_uuid[16]  = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
uint16_t my_service_handle;


tBleStatus add_simple_service(void)
	{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af02      	add	r7, sp, #8
	Service_UUID_t service_uuid;
	tBleStatus ret;
	BLUENRG_memcpy(service_uuid.Service_UUID_128,SERVICE_UUID,16);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <add_simple_service+0x30>)
 8000e84:	1d3c      	adds	r4, r7, #4
 8000e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//add service
	ret=aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, 7, &my_service_handle);
 8000e8c:	1d39      	adds	r1, r7, #4
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <add_simple_service+0x34>)
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2307      	movs	r3, #7
 8000e94:	2201      	movs	r2, #1
 8000e96:	2002      	movs	r0, #2
 8000e98:	f002 f9dd 	bl	8003256 <aci_gatt_add_service>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	75fb      	strb	r3, [r7, #23]
	//if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_add_service failed\r\n");}
	return ret;
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
	}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	371c      	adds	r7, #28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd90      	pop	{r4, r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	08004794 	.word	0x08004794
 8000eb0:	200007e0 	.word	0x200007e0

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <HAL_MspInit+0x4c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <HAL_MspInit+0x4c>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <HAL_MspInit+0x4c>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <HAL_MspInit+0x4c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <HAL_MspInit+0x4c>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_MspInit+0x4c>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <HAL_UART_MspInit+0x84>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d12b      	bne.n	8000f7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <HAL_UART_MspInit+0x88>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <HAL_UART_MspInit+0x88>)
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_UART_MspInit+0x88>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <HAL_UART_MspInit+0x88>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <HAL_UART_MspInit+0x88>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_UART_MspInit+0x88>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f5e:	230c      	movs	r3, #12
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f6e:	2307      	movs	r3, #7
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <HAL_UART_MspInit+0x8c>)
 8000f7a:	f000 fb53 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40004400 	.word	0x40004400
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <NMI_Handler+0x4>

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe0:	f000 f946 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <EXTI0_IRQHandler+0x10>)
 8000fee:	f000 faf5 	bl	80015dc <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000073c 	.word	0x2000073c

08000ffc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001000:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001004:	f000 fda8 	bl	8001b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e00a      	b.n	8001034 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800101e:	f3af 8000 	nop.w
 8001022:	4601      	mov	r1, r0
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	b2ca      	uxtb	r2, r1
 800102c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	dbf0      	blt.n	800101e <_read+0x12>
	}

return len;
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e009      	b.n	800106c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fdb9 	bl	8000bd8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf1      	blt.n	8001058 <_write+0x12>
	}
	return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_close>:

int _close(int file)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	return -1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a6:	605a      	str	r2, [r3, #4]
	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_isatty>:

int _isatty(int file)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	return 1;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f002 fdc4 	bl	8003ca4 <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20020000 	.word	0x20020000
 8001148:	00000400 	.word	0x00000400
 800114c:	20000198 	.word	0x20000198
 8001150:	20000808 	.word	0x20000808

08001154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117e:	490e      	ldr	r1, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001194:	4c0b      	ldr	r4, [pc, #44]	; (80011c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011a2:	f7ff ffd7 	bl	8001154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f002 fd83 	bl	8003cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011aa:	f7ff fd2d 	bl	8000c08 <main>
  bx  lr    
 80011ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80011bc:	08004830 	.word	0x08004830
  ldr r2, =_sbss
 80011c0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80011c4:	20000808 	.word	0x20000808

080011c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC_IRQHandler>
	...

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <HAL_Init+0x40>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_Init+0x40>)
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_Init+0x40>)
 80011ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 f973 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	200f      	movs	r0, #15
 80011fc:	f000 f808 	bl	8001210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001200:	f7ff fe58 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023c00 	.word	0x40023c00

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x54>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x58>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001226:	fbb3 f3f1 	udiv	r3, r3, r1
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f999 	bl	8001566 <HAL_SYSTICK_Config>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e00e      	b.n	800125c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d80a      	bhi.n	800125a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800124c:	f000 f953 	bl	80014f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_InitTick+0x5c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000008 	.word	0x20000008
 8001268:	20000010 	.word	0x20000010
 800126c:	2000000c 	.word	0x2000000c

08001270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x20>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x24>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <HAL_IncTick+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000010 	.word	0x20000010
 8001294:	200007e4 	.word	0x200007e4

08001298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	200007e4 	.word	0x200007e4

080012b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b8:	f7ff ffee 	bl	8001298 <HAL_GetTick>
 80012bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012c8:	d005      	beq.n	80012d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_Delay+0x44>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4413      	add	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012d6:	bf00      	nop
 80012d8:	f7ff ffde 	bl	8001298 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d8f7      	bhi.n	80012d8 <HAL_Delay+0x28>
  {
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000010 	.word	0x20000010

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4907      	ldr	r1, [pc, #28]	; (8001394 <__NVIC_EnableIRQ+0x38>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db12      	blt.n	80013d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	f003 021f 	and.w	r2, r3, #31
 80013b0:	490a      	ldr	r1, [pc, #40]	; (80013dc <__NVIC_DisableIRQ+0x44>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	095b      	lsrs	r3, r3, #5
 80013b8:	2001      	movs	r0, #1
 80013ba:	fa00 f202 	lsl.w	r2, r0, r2
 80013be:	3320      	adds	r3, #32
 80013c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013c4:	f3bf 8f4f 	dsb	sy
}
 80013c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013ca:	f3bf 8f6f 	isb	sy
}
 80013ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ac:	d301      	bcc.n	80014b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00f      	b.n	80014d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <SysTick_Config+0x40>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ba:	210f      	movs	r1, #15
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014c0:	f7ff ff8e 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <SysTick_Config+0x40>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <SysTick_Config+0x40>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff05 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001508:	f7ff ff1a 	bl	8001340 <__NVIC_GetPriorityGrouping>
 800150c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f7ff ff8e 	bl	8001434 <NVIC_EncodePriority>
 8001518:	4602      	mov	r2, r0
 800151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff5d 	bl	80013e0 <__NVIC_SetPriority>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff0d 	bl	800135c <__NVIC_EnableIRQ>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff1d 	bl	8001398 <__NVIC_DisableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ff94 	bl	800149c <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800157e:	b480      	push	{r7}
 8001580:	b087      	sub	sp, #28
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	460b      	mov	r3, r1
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d103      	bne.n	800159e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	605a      	str	r2, [r3, #4]
      break;
 800159c:	e002      	b.n	80015a4 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	75fb      	strb	r3, [r7, #23]
      break;
 80015a2:	bf00      	nop
  }

  return status;
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	371c      	adds	r7, #28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e003      	b.n	80015ce <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80015cc:	2300      	movs	r3, #0
  }
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 031f 	and.w	r3, r3, #31
 80015ec:	2201      	movs	r2, #1
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_EXTI_IRQHandler+0x44>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4013      	ands	r3, r2
 80015fc:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d009      	beq.n	8001618 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_EXTI_IRQHandler+0x44>)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4798      	blx	r3
    }
  }
}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40013c00 	.word	0x40013c00

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	e159      	b.n	80018f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 8148 	bne.w	80018ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b01      	cmp	r3, #1
 8001668:	d005      	beq.n	8001676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001672:	2b02      	cmp	r3, #2
 8001674:	d130      	bne.n	80016d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 0201 	and.w	r2, r3, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d017      	beq.n	8001714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d123      	bne.n	8001768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	220f      	movs	r2, #15
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	08da      	lsrs	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3208      	adds	r2, #8
 8001762:	69b9      	ldr	r1, [r7, #24]
 8001764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0203 	and.w	r2, r3, #3
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80a2 	beq.w	80018ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b57      	ldr	r3, [pc, #348]	; (800190c <HAL_GPIO_Init+0x2e8>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a56      	ldr	r2, [pc, #344]	; (800190c <HAL_GPIO_Init+0x2e8>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b54      	ldr	r3, [pc, #336]	; (800190c <HAL_GPIO_Init+0x2e8>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c6:	4a52      	ldr	r2, [pc, #328]	; (8001910 <HAL_GPIO_Init+0x2ec>)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a49      	ldr	r2, [pc, #292]	; (8001914 <HAL_GPIO_Init+0x2f0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d019      	beq.n	8001826 <HAL_GPIO_Init+0x202>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a48      	ldr	r2, [pc, #288]	; (8001918 <HAL_GPIO_Init+0x2f4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_GPIO_Init+0x1fe>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a47      	ldr	r2, [pc, #284]	; (800191c <HAL_GPIO_Init+0x2f8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d00d      	beq.n	800181e <HAL_GPIO_Init+0x1fa>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_GPIO_Init+0x2fc>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d007      	beq.n	800181a <HAL_GPIO_Init+0x1f6>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a45      	ldr	r2, [pc, #276]	; (8001924 <HAL_GPIO_Init+0x300>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d101      	bne.n	8001816 <HAL_GPIO_Init+0x1f2>
 8001812:	2304      	movs	r3, #4
 8001814:	e008      	b.n	8001828 <HAL_GPIO_Init+0x204>
 8001816:	2307      	movs	r3, #7
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x204>
 800181a:	2303      	movs	r3, #3
 800181c:	e004      	b.n	8001828 <HAL_GPIO_Init+0x204>
 800181e:	2302      	movs	r3, #2
 8001820:	e002      	b.n	8001828 <HAL_GPIO_Init+0x204>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x204>
 8001826:	2300      	movs	r3, #0
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f002 0203 	and.w	r2, r2, #3
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	4093      	lsls	r3, r2
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001838:	4935      	ldr	r1, [pc, #212]	; (8001910 <HAL_GPIO_Init+0x2ec>)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001846:	4b38      	ldr	r3, [pc, #224]	; (8001928 <HAL_GPIO_Init+0x304>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800186a:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <HAL_GPIO_Init+0x304>)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001870:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <HAL_GPIO_Init+0x304>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001894:	4a24      	ldr	r2, [pc, #144]	; (8001928 <HAL_GPIO_Init+0x304>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189a:	4b23      	ldr	r3, [pc, #140]	; (8001928 <HAL_GPIO_Init+0x304>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018be:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <HAL_GPIO_Init+0x304>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c4:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_GPIO_Init+0x304>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e8:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <HAL_GPIO_Init+0x304>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	f67f aea2 	bls.w	8001640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40013800 	.word	0x40013800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020400 	.word	0x40020400
 800191c:	40020800 	.word	0x40020800
 8001920:	40020c00 	.word	0x40020c00
 8001924:	40021000 	.word	0x40021000
 8001928:	40013c00 	.word	0x40013c00

0800192c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e0bb      	b.n	8001ac0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001948:	2201      	movs	r2, #1
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	429a      	cmp	r2, r3
 8001960:	f040 80ab 	bne.w	8001aba <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001964:	4a5c      	ldr	r2, [pc, #368]	; (8001ad8 <HAL_GPIO_DeInit+0x1ac>)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	4013      	ands	r3, r2
 8001984:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a54      	ldr	r2, [pc, #336]	; (8001adc <HAL_GPIO_DeInit+0x1b0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d019      	beq.n	80019c2 <HAL_GPIO_DeInit+0x96>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a53      	ldr	r2, [pc, #332]	; (8001ae0 <HAL_GPIO_DeInit+0x1b4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_GPIO_DeInit+0x92>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a52      	ldr	r2, [pc, #328]	; (8001ae4 <HAL_GPIO_DeInit+0x1b8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d00d      	beq.n	80019ba <HAL_GPIO_DeInit+0x8e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a51      	ldr	r2, [pc, #324]	; (8001ae8 <HAL_GPIO_DeInit+0x1bc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d007      	beq.n	80019b6 <HAL_GPIO_DeInit+0x8a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a50      	ldr	r2, [pc, #320]	; (8001aec <HAL_GPIO_DeInit+0x1c0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_GPIO_DeInit+0x86>
 80019ae:	2304      	movs	r3, #4
 80019b0:	e008      	b.n	80019c4 <HAL_GPIO_DeInit+0x98>
 80019b2:	2307      	movs	r3, #7
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_DeInit+0x98>
 80019b6:	2303      	movs	r3, #3
 80019b8:	e004      	b.n	80019c4 <HAL_GPIO_DeInit+0x98>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_DeInit+0x98>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_DeInit+0x98>
 80019c2:	2300      	movs	r3, #0
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	f002 0203 	and.w	r2, r2, #3
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	4093      	lsls	r3, r2
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d132      	bne.n	8001a3a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80019d4:	4b46      	ldr	r3, [pc, #280]	; (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43db      	mvns	r3, r3
 80019dc:	4944      	ldr	r1, [pc, #272]	; (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 80019de:	4013      	ands	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80019e2:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4941      	ldr	r1, [pc, #260]	; (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80019f0:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	493d      	ldr	r1, [pc, #244]	; (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80019fe:	4b3c      	ldr	r3, [pc, #240]	; (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	493a      	ldr	r1, [pc, #232]	; (8001af0 <HAL_GPIO_DeInit+0x1c4>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001a1c:	4a2e      	ldr	r2, [pc, #184]	; (8001ad8 <HAL_GPIO_DeInit+0x1ac>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	482a      	ldr	r0, [pc, #168]	; (8001ad8 <HAL_GPIO_DeInit+0x1ac>)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	400a      	ands	r2, r1
 8001a34:	3302      	adds	r3, #2
 8001a36:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2103      	movs	r1, #3
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	08d2      	lsrs	r2, r2, #3
 8001a70:	4019      	ands	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2103      	movs	r1, #3
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	2101      	movs	r1, #1
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2103      	movs	r1, #3
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	401a      	ands	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2b0f      	cmp	r3, #15
 8001ac4:	f67f af40 	bls.w	8001948 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40013c00 	.word	0x40013c00

08001af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e001      	b.n	8001b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b34:	787b      	ldrb	r3, [r7, #1]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b40:	e003      	b.n	8001b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	041a      	lsls	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	619a      	str	r2, [r3, #24]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f806 	bl	8001b88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40013c00 	.word	0x40013c00

08001b88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e264      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d075      	beq.n	8001caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bbe:	4ba3      	ldr	r3, [pc, #652]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d00c      	beq.n	8001be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bca:	4ba0      	ldr	r3, [pc, #640]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d112      	bne.n	8001bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd6:	4b9d      	ldr	r3, [pc, #628]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001be2:	d10b      	bne.n	8001bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	4b99      	ldr	r3, [pc, #612]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d05b      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x108>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d157      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e23f      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c04:	d106      	bne.n	8001c14 <HAL_RCC_OscConfig+0x74>
 8001c06:	4b91      	ldr	r3, [pc, #580]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a90      	ldr	r2, [pc, #576]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e01d      	b.n	8001c50 <HAL_RCC_OscConfig+0xb0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x98>
 8001c1e:	4b8b      	ldr	r3, [pc, #556]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a8a      	ldr	r2, [pc, #552]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b88      	ldr	r3, [pc, #544]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a87      	ldr	r2, [pc, #540]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0xb0>
 8001c38:	4b84      	ldr	r3, [pc, #528]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a83      	ldr	r2, [pc, #524]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b81      	ldr	r3, [pc, #516]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a80      	ldr	r2, [pc, #512]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fb1e 	bl	8001298 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff fb1a 	bl	8001298 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e204      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	4b76      	ldr	r3, [pc, #472]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0xc0>
 8001c7e:	e014      	b.n	8001caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fb0a 	bl	8001298 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fb06 	bl	8001298 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e1f0      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	4b6c      	ldr	r3, [pc, #432]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0xe8>
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d063      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cb6:	4b65      	ldr	r3, [pc, #404]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00b      	beq.n	8001cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cc2:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d11c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cce:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d116      	bne.n	8001d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cda:	4b5c      	ldr	r3, [pc, #368]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x152>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e1c4      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4952      	ldr	r1, [pc, #328]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	e03a      	b.n	8001d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d020      	beq.n	8001d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d10:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <HAL_RCC_OscConfig+0x2b0>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff fabf 	bl	8001298 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fabb 	bl	8001298 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e1a5      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d30:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	4b43      	ldr	r3, [pc, #268]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4940      	ldr	r1, [pc, #256]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e015      	b.n	8001d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d52:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <HAL_RCC_OscConfig+0x2b0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff fa9e 	bl	8001298 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff fa9a 	bl	8001298 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e184      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d030      	beq.n	8001dec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d016      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d92:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <HAL_RCC_OscConfig+0x2b4>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d98:	f7ff fa7e 	bl	8001298 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da0:	f7ff fa7a 	bl	8001298 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e164      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x200>
 8001dbe:	e015      	b.n	8001dec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_RCC_OscConfig+0x2b4>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff fa67 	bl	8001298 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dce:	f7ff fa63 	bl	8001298 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e14d      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80a0 	beq.w	8001f3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10f      	bne.n	8001e2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e26:	2301      	movs	r3, #1
 8001e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_OscConfig+0x2b8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d121      	bne.n	8001e7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_RCC_OscConfig+0x2b8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_RCC_OscConfig+0x2b8>)
 8001e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e42:	f7ff fa29 	bl	8001298 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	e011      	b.n	8001e6e <HAL_RCC_OscConfig+0x2ce>
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	42470000 	.word	0x42470000
 8001e54:	42470e80 	.word	0x42470e80
 8001e58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5c:	f7ff fa1c 	bl	8001298 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e106      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6e:	4b85      	ldr	r3, [pc, #532]	; (8002084 <HAL_RCC_OscConfig+0x4e4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d106      	bne.n	8001e90 <HAL_RCC_OscConfig+0x2f0>
 8001e82:	4b81      	ldr	r3, [pc, #516]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	4a80      	ldr	r2, [pc, #512]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8e:	e01c      	b.n	8001eca <HAL_RCC_OscConfig+0x32a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	d10c      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x312>
 8001e98:	4b7b      	ldr	r3, [pc, #492]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	4a7a      	ldr	r2, [pc, #488]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea4:	4b78      	ldr	r3, [pc, #480]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea8:	4a77      	ldr	r2, [pc, #476]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb0:	e00b      	b.n	8001eca <HAL_RCC_OscConfig+0x32a>
 8001eb2:	4b75      	ldr	r3, [pc, #468]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb6:	4a74      	ldr	r2, [pc, #464]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ebe:	4b72      	ldr	r3, [pc, #456]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	4a71      	ldr	r2, [pc, #452]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
 8001ec8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d015      	beq.n	8001efe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f9e1 	bl	8001298 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7ff f9dd 	bl	8001298 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e0c5      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	4b65      	ldr	r3, [pc, #404]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ee      	beq.n	8001eda <HAL_RCC_OscConfig+0x33a>
 8001efc:	e014      	b.n	8001f28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff f9cb 	bl	8001298 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7ff f9c7 	bl	8001298 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e0af      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1c:	4b5a      	ldr	r3, [pc, #360]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1ee      	bne.n	8001f06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d105      	bne.n	8001f3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2e:	4b56      	ldr	r3, [pc, #344]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a55      	ldr	r2, [pc, #340]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 809b 	beq.w	800207a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f44:	4b50      	ldr	r3, [pc, #320]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d05c      	beq.n	800200a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d141      	bne.n	8001fdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f58:	4b4c      	ldr	r3, [pc, #304]	; (800208c <HAL_RCC_OscConfig+0x4ec>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7ff f99b 	bl	8001298 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff f997 	bl	8001298 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e081      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f78:	4b43      	ldr	r3, [pc, #268]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	019b      	lsls	r3, r3, #6
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	085b      	lsrs	r3, r3, #1
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	061b      	lsls	r3, r3, #24
 8001fa8:	4937      	ldr	r1, [pc, #220]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fae:	4b37      	ldr	r3, [pc, #220]	; (800208c <HAL_RCC_OscConfig+0x4ec>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7ff f970 	bl	8001298 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7ff f96c 	bl	8001298 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e056      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fce:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x41c>
 8001fda:	e04e      	b.n	800207a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_RCC_OscConfig+0x4ec>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7ff f959 	bl	8001298 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fea:	f7ff f955 	bl	8001298 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e03f      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffc:	4b22      	ldr	r3, [pc, #136]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f0      	bne.n	8001fea <HAL_RCC_OscConfig+0x44a>
 8002008:	e037      	b.n	800207a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e032      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002016:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <HAL_RCC_OscConfig+0x4e8>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d028      	beq.n	8002076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d121      	bne.n	8002076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d11a      	bne.n	8002076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002046:	4013      	ands	r3, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800204c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800204e:	4293      	cmp	r3, r2
 8002050:	d111      	bne.n	8002076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	3b01      	subs	r3, #1
 8002060:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d107      	bne.n	8002076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d001      	beq.n	800207a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40007000 	.word	0x40007000
 8002088:	40023800 	.word	0x40023800
 800208c:	42470060 	.word	0x42470060

08002090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0cc      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a4:	4b68      	ldr	r3, [pc, #416]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d90c      	bls.n	80020cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b65      	ldr	r3, [pc, #404]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b63      	ldr	r3, [pc, #396]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0b8      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d020      	beq.n	800211a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e4:	4b59      	ldr	r3, [pc, #356]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a58      	ldr	r2, [pc, #352]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020fc:	4b53      	ldr	r3, [pc, #332]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a52      	ldr	r2, [pc, #328]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b50      	ldr	r3, [pc, #320]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	494d      	ldr	r1, [pc, #308]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d044      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	4b47      	ldr	r3, [pc, #284]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d119      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e07f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d003      	beq.n	800214e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800214a:	2b03      	cmp	r3, #3
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214e:	4b3f      	ldr	r3, [pc, #252]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e06f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215e:	4b3b      	ldr	r3, [pc, #236]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e067      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216e:	4b37      	ldr	r3, [pc, #220]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f023 0203 	bic.w	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4934      	ldr	r1, [pc, #208]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002180:	f7ff f88a 	bl	8001298 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002186:	e00a      	b.n	800219e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002188:	f7ff f886 	bl	8001298 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e04f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	4b2b      	ldr	r3, [pc, #172]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 020c 	and.w	r2, r3, #12
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d1eb      	bne.n	8002188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d20c      	bcs.n	80021d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e032      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4916      	ldr	r1, [pc, #88]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	490e      	ldr	r1, [pc, #56]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002216:	f000 f821 	bl	800225c <HAL_RCC_GetSysClockFreq>
 800221a:	4602      	mov	r2, r0
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	490a      	ldr	r1, [pc, #40]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	5ccb      	ldrb	r3, [r1, r3]
 800222a:	fa22 f303 	lsr.w	r3, r2, r3
 800222e:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe ffea 	bl	8001210 <HAL_InitTick>

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023c00 	.word	0x40023c00
 800224c:	40023800 	.word	0x40023800
 8002250:	080047a4 	.word	0x080047a4
 8002254:	20000008 	.word	0x20000008
 8002258:	2000000c 	.word	0x2000000c

0800225c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800225c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	2300      	movs	r3, #0
 800226e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002274:	4b67      	ldr	r3, [pc, #412]	; (8002414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d00d      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x40>
 8002280:	2b08      	cmp	r3, #8
 8002282:	f200 80bd 	bhi.w	8002400 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x34>
 800228a:	2b04      	cmp	r3, #4
 800228c:	d003      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0x3a>
 800228e:	e0b7      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002290:	4b61      	ldr	r3, [pc, #388]	; (8002418 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002292:	60bb      	str	r3, [r7, #8]
       break;
 8002294:	e0b7      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002296:	4b61      	ldr	r3, [pc, #388]	; (800241c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002298:	60bb      	str	r3, [r7, #8]
      break;
 800229a:	e0b4      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800229c:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022a6:	4b5b      	ldr	r3, [pc, #364]	; (8002414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d04d      	beq.n	800234e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b2:	4b58      	ldr	r3, [pc, #352]	; (8002414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	099b      	lsrs	r3, r3, #6
 80022b8:	461a      	mov	r2, r3
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022c2:	f04f 0100 	mov.w	r1, #0
 80022c6:	ea02 0800 	and.w	r8, r2, r0
 80022ca:	ea03 0901 	and.w	r9, r3, r1
 80022ce:	4640      	mov	r0, r8
 80022d0:	4649      	mov	r1, r9
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	014b      	lsls	r3, r1, #5
 80022dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022e0:	0142      	lsls	r2, r0, #5
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	ebb0 0008 	subs.w	r0, r0, r8
 80022ea:	eb61 0109 	sbc.w	r1, r1, r9
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	018b      	lsls	r3, r1, #6
 80022f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022fc:	0182      	lsls	r2, r0, #6
 80022fe:	1a12      	subs	r2, r2, r0
 8002300:	eb63 0301 	sbc.w	r3, r3, r1
 8002304:	f04f 0000 	mov.w	r0, #0
 8002308:	f04f 0100 	mov.w	r1, #0
 800230c:	00d9      	lsls	r1, r3, #3
 800230e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002312:	00d0      	lsls	r0, r2, #3
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	eb12 0208 	adds.w	r2, r2, r8
 800231c:	eb43 0309 	adc.w	r3, r3, r9
 8002320:	f04f 0000 	mov.w	r0, #0
 8002324:	f04f 0100 	mov.w	r1, #0
 8002328:	0259      	lsls	r1, r3, #9
 800232a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800232e:	0250      	lsls	r0, r2, #9
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	461a      	mov	r2, r3
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	f7fd ff52 	bl	80001e8 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4613      	mov	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e04a      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234e:	4b31      	ldr	r3, [pc, #196]	; (8002414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	099b      	lsrs	r3, r3, #6
 8002354:	461a      	mov	r2, r3
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	ea02 0400 	and.w	r4, r2, r0
 8002366:	ea03 0501 	and.w	r5, r3, r1
 800236a:	4620      	mov	r0, r4
 800236c:	4629      	mov	r1, r5
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	014b      	lsls	r3, r1, #5
 8002378:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800237c:	0142      	lsls	r2, r0, #5
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	1b00      	subs	r0, r0, r4
 8002384:	eb61 0105 	sbc.w	r1, r1, r5
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	018b      	lsls	r3, r1, #6
 8002392:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002396:	0182      	lsls	r2, r0, #6
 8002398:	1a12      	subs	r2, r2, r0
 800239a:	eb63 0301 	sbc.w	r3, r3, r1
 800239e:	f04f 0000 	mov.w	r0, #0
 80023a2:	f04f 0100 	mov.w	r1, #0
 80023a6:	00d9      	lsls	r1, r3, #3
 80023a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023ac:	00d0      	lsls	r0, r2, #3
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	1912      	adds	r2, r2, r4
 80023b4:	eb45 0303 	adc.w	r3, r5, r3
 80023b8:	f04f 0000 	mov.w	r0, #0
 80023bc:	f04f 0100 	mov.w	r1, #0
 80023c0:	0299      	lsls	r1, r3, #10
 80023c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80023c6:	0290      	lsls	r0, r2, #10
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	f7fd ff06 	bl	80001e8 <__aeabi_uldivmod>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4613      	mov	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	3301      	adds	r3, #1
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	60bb      	str	r3, [r7, #8]
      break;
 80023fe:	e002      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002402:	60bb      	str	r3, [r7, #8]
      break;
 8002404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002406:	68bb      	ldr	r3, [r7, #8]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	00f42400 	.word	0x00f42400
 800241c:	007a1200 	.word	0x007a1200

08002420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <HAL_RCC_GetHCLKFreq+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000008 	.word	0x20000008

08002438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800243c:	f7ff fff0 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0a9b      	lsrs	r3, r3, #10
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4903      	ldr	r1, [pc, #12]	; (800245c <HAL_RCC_GetPCLK1Freq+0x24>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	080047b4 	.word	0x080047b4

08002460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002464:	f7ff ffdc 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	0b5b      	lsrs	r3, r3, #13
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	4903      	ldr	r1, [pc, #12]	; (8002484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	080047b4 	.word	0x080047b4

08002488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e07b      	b.n	8002592 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d108      	bne.n	80024b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024aa:	d009      	beq.n	80024c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
 80024b2:	e005      	b.n	80024c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f85d 	bl	800259a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002544:	ea42 0103 	orr.w	r1, r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	f003 0104 	and.w	r1, r3, #4
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	f003 0210 	and.w	r2, r3, #16
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b08c      	sub	sp, #48	; 0x30
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025bc:	2301      	movs	r3, #1
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x26>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e18a      	b.n	80028ea <HAL_SPI_TransmitReceive+0x33c>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025dc:	f7fe fe5c 	bl	8001298 <HAL_GetTick>
 80025e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d00f      	beq.n	800261e <HAL_SPI_TransmitReceive+0x70>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002604:	d107      	bne.n	8002616 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d103      	bne.n	8002616 <HAL_SPI_TransmitReceive+0x68>
 800260e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002612:	2b04      	cmp	r3, #4
 8002614:	d003      	beq.n	800261e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002616:	2302      	movs	r3, #2
 8002618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800261c:	e15b      	b.n	80028d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_SPI_TransmitReceive+0x82>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_SPI_TransmitReceive+0x82>
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d103      	bne.n	8002638 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002636:	e14e      	b.n	80028d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b04      	cmp	r3, #4
 8002642:	d003      	beq.n	800264c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2205      	movs	r2, #5
 8002648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	887a      	ldrh	r2, [r7, #2]
 8002662:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	887a      	ldrh	r2, [r7, #2]
 800266e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d007      	beq.n	80026a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800269e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026a8:	d178      	bne.n	800279c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_SPI_TransmitReceive+0x10a>
 80026b2:	8b7b      	ldrh	r3, [r7, #26]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d166      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	881a      	ldrh	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	1c9a      	adds	r2, r3, #2
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026dc:	e053      	b.n	8002786 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d11b      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x176>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d016      	beq.n	8002724 <HAL_SPI_TransmitReceive+0x176>
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d113      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	881a      	ldrh	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	1c9a      	adds	r2, r3, #2
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d119      	bne.n	8002766 <HAL_SPI_TransmitReceive+0x1b8>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d014      	beq.n	8002766 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	b292      	uxth	r2, r2
 8002748:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	1c9a      	adds	r2, r3, #2
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002762:	2301      	movs	r3, #1
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002766:	f7fe fd97 	bl	8001298 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002772:	429a      	cmp	r2, r3
 8002774:	d807      	bhi.n	8002786 <HAL_SPI_TransmitReceive+0x1d8>
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800277c:	d003      	beq.n	8002786 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002784:	e0a7      	b.n	80028d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1a6      	bne.n	80026de <HAL_SPI_TransmitReceive+0x130>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1a1      	bne.n	80026de <HAL_SPI_TransmitReceive+0x130>
 800279a:	e07c      	b.n	8002896 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_SPI_TransmitReceive+0x1fc>
 80027a4:	8b7b      	ldrh	r3, [r7, #26]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d16b      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	330c      	adds	r3, #12
 80027b4:	7812      	ldrb	r2, [r2, #0]
 80027b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027d0:	e057      	b.n	8002882 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d11c      	bne.n	800281a <HAL_SPI_TransmitReceive+0x26c>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d017      	beq.n	800281a <HAL_SPI_TransmitReceive+0x26c>
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d114      	bne.n	800281a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	330c      	adds	r3, #12
 80027fa:	7812      	ldrb	r2, [r2, #0]
 80027fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d119      	bne.n	800285c <HAL_SPI_TransmitReceive+0x2ae>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d014      	beq.n	800285c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002858:	2301      	movs	r3, #1
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800285c:	f7fe fd1c 	bl	8001298 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002868:	429a      	cmp	r2, r3
 800286a:	d803      	bhi.n	8002874 <HAL_SPI_TransmitReceive+0x2c6>
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002872:	d102      	bne.n	800287a <HAL_SPI_TransmitReceive+0x2cc>
 8002874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002880:	e029      	b.n	80028d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1a2      	bne.n	80027d2 <HAL_SPI_TransmitReceive+0x224>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d19d      	bne.n	80027d2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002898:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f8c0 	bl	8002a20 <SPI_EndRxTxTransaction>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028b2:	e010      	b.n	80028d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	e000      	b.n	80028d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80028d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3730      	adds	r7, #48	; 0x30
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002900:	b2db      	uxtb	r3, r3
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002920:	f7fe fcba 	bl	8001298 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	4413      	add	r3, r2
 800292e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002930:	f7fe fcb2 	bl	8001298 <HAL_GetTick>
 8002934:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002936:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	015b      	lsls	r3, r3, #5
 800293c:	0d1b      	lsrs	r3, r3, #20
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	fb02 f303 	mul.w	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002946:	e054      	b.n	80029f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800294e:	d050      	beq.n	80029f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002950:	f7fe fca2 	bl	8001298 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	429a      	cmp	r2, r3
 800295e:	d902      	bls.n	8002966 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d13d      	bne.n	80029e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002974:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800297e:	d111      	bne.n	80029a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002988:	d004      	beq.n	8002994 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	d107      	bne.n	80029a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ac:	d10f      	bne.n	80029ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e017      	b.n	8002a12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4013      	ands	r3, r2
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	bf0c      	ite	eq
 8002a02:	2301      	moveq	r3, #1
 8002a04:	2300      	movne	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d19b      	bne.n	8002948 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000008 	.word	0x20000008

08002a20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <SPI_EndRxTxTransaction+0x7c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1b      	ldr	r2, [pc, #108]	; (8002aa0 <SPI_EndRxTxTransaction+0x80>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	0d5b      	lsrs	r3, r3, #21
 8002a38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a3c:	fb02 f303 	mul.w	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a4a:	d112      	bne.n	8002a72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f7ff ff5a 	bl	8002910 <SPI_WaitFlagStateUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d016      	beq.n	8002a90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	f043 0220 	orr.w	r2, r3, #32
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e00f      	b.n	8002a92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a88:	2b80      	cmp	r3, #128	; 0x80
 8002a8a:	d0f2      	beq.n	8002a72 <SPI_EndRxTxTransaction+0x52>
 8002a8c:	e000      	b.n	8002a90 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a8e:	bf00      	nop
  }

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000008 	.word	0x20000008
 8002aa0:	165e9f81 	.word	0x165e9f81

08002aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e03f      	b.n	8002b36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe fa1a 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2224      	movs	r2, #36	; 0x24
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f829 	bl	8002b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b44:	b09f      	sub	sp, #124	; 0x7c
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b56:	68d9      	ldr	r1, [r3, #12]
 8002b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	ea40 0301 	orr.w	r3, r0, r1
 8002b60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b84:	f021 010c 	bic.w	r1, r1, #12
 8002b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9e:	6999      	ldr	r1, [r3, #24]
 8002ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	ea40 0301 	orr.w	r3, r0, r1
 8002ba8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	4bc5      	ldr	r3, [pc, #788]	; (8002ec4 <UART_SetConfig+0x384>)
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d004      	beq.n	8002bbe <UART_SetConfig+0x7e>
 8002bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4bc3      	ldr	r3, [pc, #780]	; (8002ec8 <UART_SetConfig+0x388>)
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d103      	bne.n	8002bc6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bbe:	f7ff fc4f 	bl	8002460 <HAL_RCC_GetPCLK2Freq>
 8002bc2:	6778      	str	r0, [r7, #116]	; 0x74
 8002bc4:	e002      	b.n	8002bcc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bc6:	f7ff fc37 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8002bca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd4:	f040 80b6 	bne.w	8002d44 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bda:	461c      	mov	r4, r3
 8002bdc:	f04f 0500 	mov.w	r5, #0
 8002be0:	4622      	mov	r2, r4
 8002be2:	462b      	mov	r3, r5
 8002be4:	1891      	adds	r1, r2, r2
 8002be6:	6439      	str	r1, [r7, #64]	; 0x40
 8002be8:	415b      	adcs	r3, r3
 8002bea:	647b      	str	r3, [r7, #68]	; 0x44
 8002bec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bf0:	1912      	adds	r2, r2, r4
 8002bf2:	eb45 0303 	adc.w	r3, r5, r3
 8002bf6:	f04f 0000 	mov.w	r0, #0
 8002bfa:	f04f 0100 	mov.w	r1, #0
 8002bfe:	00d9      	lsls	r1, r3, #3
 8002c00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c04:	00d0      	lsls	r0, r2, #3
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	1911      	adds	r1, r2, r4
 8002c0c:	6639      	str	r1, [r7, #96]	; 0x60
 8002c0e:	416b      	adcs	r3, r5
 8002c10:	667b      	str	r3, [r7, #100]	; 0x64
 8002c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	1891      	adds	r1, r2, r2
 8002c1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c20:	415b      	adcs	r3, r3
 8002c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c28:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c2c:	f7fd fadc 	bl	80001e8 <__aeabi_uldivmod>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4ba5      	ldr	r3, [pc, #660]	; (8002ecc <UART_SetConfig+0x38c>)
 8002c36:	fba3 2302 	umull	r2, r3, r3, r2
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	011e      	lsls	r6, r3, #4
 8002c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c40:	461c      	mov	r4, r3
 8002c42:	f04f 0500 	mov.w	r5, #0
 8002c46:	4622      	mov	r2, r4
 8002c48:	462b      	mov	r3, r5
 8002c4a:	1891      	adds	r1, r2, r2
 8002c4c:	6339      	str	r1, [r7, #48]	; 0x30
 8002c4e:	415b      	adcs	r3, r3
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
 8002c52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c56:	1912      	adds	r2, r2, r4
 8002c58:	eb45 0303 	adc.w	r3, r5, r3
 8002c5c:	f04f 0000 	mov.w	r0, #0
 8002c60:	f04f 0100 	mov.w	r1, #0
 8002c64:	00d9      	lsls	r1, r3, #3
 8002c66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c6a:	00d0      	lsls	r0, r2, #3
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	1911      	adds	r1, r2, r4
 8002c72:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c74:	416b      	adcs	r3, r5
 8002c76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	1891      	adds	r1, r2, r2
 8002c84:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c86:	415b      	adcs	r3, r3
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c8e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002c92:	f7fd faa9 	bl	80001e8 <__aeabi_uldivmod>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4b8c      	ldr	r3, [pc, #560]	; (8002ecc <UART_SetConfig+0x38c>)
 8002c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	2164      	movs	r1, #100	; 0x64
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	3332      	adds	r3, #50	; 0x32
 8002cae:	4a87      	ldr	r2, [pc, #540]	; (8002ecc <UART_SetConfig+0x38c>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cbc:	441e      	add	r6, r3
 8002cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f04f 0100 	mov.w	r1, #0
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	1894      	adds	r4, r2, r2
 8002ccc:	623c      	str	r4, [r7, #32]
 8002cce:	415b      	adcs	r3, r3
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cd6:	1812      	adds	r2, r2, r0
 8002cd8:	eb41 0303 	adc.w	r3, r1, r3
 8002cdc:	f04f 0400 	mov.w	r4, #0
 8002ce0:	f04f 0500 	mov.w	r5, #0
 8002ce4:	00dd      	lsls	r5, r3, #3
 8002ce6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002cea:	00d4      	lsls	r4, r2, #3
 8002cec:	4622      	mov	r2, r4
 8002cee:	462b      	mov	r3, r5
 8002cf0:	1814      	adds	r4, r2, r0
 8002cf2:	653c      	str	r4, [r7, #80]	; 0x50
 8002cf4:	414b      	adcs	r3, r1
 8002cf6:	657b      	str	r3, [r7, #84]	; 0x54
 8002cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	1891      	adds	r1, r2, r2
 8002d04:	61b9      	str	r1, [r7, #24]
 8002d06:	415b      	adcs	r3, r3
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002d12:	f7fd fa69 	bl	80001e8 <__aeabi_uldivmod>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4b6c      	ldr	r3, [pc, #432]	; (8002ecc <UART_SetConfig+0x38c>)
 8002d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	2164      	movs	r1, #100	; 0x64
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	3332      	adds	r3, #50	; 0x32
 8002d2e:	4a67      	ldr	r2, [pc, #412]	; (8002ecc <UART_SetConfig+0x38c>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	f003 0207 	and.w	r2, r3, #7
 8002d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4432      	add	r2, r6
 8002d40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d42:	e0b9      	b.n	8002eb8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d46:	461c      	mov	r4, r3
 8002d48:	f04f 0500 	mov.w	r5, #0
 8002d4c:	4622      	mov	r2, r4
 8002d4e:	462b      	mov	r3, r5
 8002d50:	1891      	adds	r1, r2, r2
 8002d52:	6139      	str	r1, [r7, #16]
 8002d54:	415b      	adcs	r3, r3
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d5c:	1912      	adds	r2, r2, r4
 8002d5e:	eb45 0303 	adc.w	r3, r5, r3
 8002d62:	f04f 0000 	mov.w	r0, #0
 8002d66:	f04f 0100 	mov.w	r1, #0
 8002d6a:	00d9      	lsls	r1, r3, #3
 8002d6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d70:	00d0      	lsls	r0, r2, #3
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	eb12 0804 	adds.w	r8, r2, r4
 8002d7a:	eb43 0905 	adc.w	r9, r3, r5
 8002d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f04f 0100 	mov.w	r1, #0
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	008b      	lsls	r3, r1, #2
 8002d92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d96:	0082      	lsls	r2, r0, #2
 8002d98:	4640      	mov	r0, r8
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	f7fd fa24 	bl	80001e8 <__aeabi_uldivmod>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4b49      	ldr	r3, [pc, #292]	; (8002ecc <UART_SetConfig+0x38c>)
 8002da6:	fba3 2302 	umull	r2, r3, r3, r2
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	011e      	lsls	r6, r3, #4
 8002dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db0:	4618      	mov	r0, r3
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	1894      	adds	r4, r2, r2
 8002dbc:	60bc      	str	r4, [r7, #8]
 8002dbe:	415b      	adcs	r3, r3
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dc6:	1812      	adds	r2, r2, r0
 8002dc8:	eb41 0303 	adc.w	r3, r1, r3
 8002dcc:	f04f 0400 	mov.w	r4, #0
 8002dd0:	f04f 0500 	mov.w	r5, #0
 8002dd4:	00dd      	lsls	r5, r3, #3
 8002dd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dda:	00d4      	lsls	r4, r2, #3
 8002ddc:	4622      	mov	r2, r4
 8002dde:	462b      	mov	r3, r5
 8002de0:	1814      	adds	r4, r2, r0
 8002de2:	64bc      	str	r4, [r7, #72]	; 0x48
 8002de4:	414b      	adcs	r3, r1
 8002de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f04f 0100 	mov.w	r1, #0
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	008b      	lsls	r3, r1, #2
 8002dfc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e00:	0082      	lsls	r2, r0, #2
 8002e02:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002e06:	f7fd f9ef 	bl	80001e8 <__aeabi_uldivmod>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <UART_SetConfig+0x38c>)
 8002e10:	fba3 1302 	umull	r1, r3, r3, r2
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	2164      	movs	r1, #100	; 0x64
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	3332      	adds	r3, #50	; 0x32
 8002e22:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <UART_SetConfig+0x38c>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e2e:	441e      	add	r6, r3
 8002e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e32:	4618      	mov	r0, r3
 8002e34:	f04f 0100 	mov.w	r1, #0
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	1894      	adds	r4, r2, r2
 8002e3e:	603c      	str	r4, [r7, #0]
 8002e40:	415b      	adcs	r3, r3
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e48:	1812      	adds	r2, r2, r0
 8002e4a:	eb41 0303 	adc.w	r3, r1, r3
 8002e4e:	f04f 0400 	mov.w	r4, #0
 8002e52:	f04f 0500 	mov.w	r5, #0
 8002e56:	00dd      	lsls	r5, r3, #3
 8002e58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e5c:	00d4      	lsls	r4, r2, #3
 8002e5e:	4622      	mov	r2, r4
 8002e60:	462b      	mov	r3, r5
 8002e62:	eb12 0a00 	adds.w	sl, r2, r0
 8002e66:	eb43 0b01 	adc.w	fp, r3, r1
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f04f 0100 	mov.w	r1, #0
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	008b      	lsls	r3, r1, #2
 8002e7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e82:	0082      	lsls	r2, r0, #2
 8002e84:	4650      	mov	r0, sl
 8002e86:	4659      	mov	r1, fp
 8002e88:	f7fd f9ae 	bl	80001e8 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <UART_SetConfig+0x38c>)
 8002e92:	fba3 1302 	umull	r1, r3, r3, r2
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	2164      	movs	r1, #100	; 0x64
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	3332      	adds	r3, #50	; 0x32
 8002ea4:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <UART_SetConfig+0x38c>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	f003 020f 	and.w	r2, r3, #15
 8002eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4432      	add	r2, r6
 8002eb6:	609a      	str	r2, [r3, #8]
}
 8002eb8:	bf00      	nop
 8002eba:	377c      	adds	r7, #124	; 0x7c
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40011000 	.word	0x40011000
 8002ec8:	40011400 	.word	0x40011400
 8002ecc:	51eb851f 	.word	0x51eb851f

08002ed0 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002eda:	f107 0308 	add.w	r3, r7, #8
 8002ede:	2218      	movs	r2, #24
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 ff16 	bl	8003d14 <memset>
  rq.ogf = 0x03;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8002eec:	2303      	movs	r3, #3
 8002eee:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8002ef0:	1dfb      	adds	r3, r7, #7
 8002ef2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002ef8:	f107 0308 	add.w	r3, r7, #8
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fc52 	bl	80037a8 <hci_send_req>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	da01      	bge.n	8002f0e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8002f0a:	23ff      	movs	r3, #255	; 0xff
 8002f0c:	e005      	b.n	8002f1a <hci_reset+0x4a>
  if (status) {
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <hci_reset+0x48>
    return status;
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	e000      	b.n	8002f1a <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8002f22:	b5b0      	push	{r4, r5, r7, lr}
 8002f24:	b0ce      	sub	sp, #312	; 0x138
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4605      	mov	r5, r0
 8002f2a:	460c      	mov	r4, r1
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	1dfb      	adds	r3, r7, #7
 8002f32:	462a      	mov	r2, r5
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	1d3b      	adds	r3, r7, #4
 8002f38:	4622      	mov	r2, r4
 8002f3a:	801a      	strh	r2, [r3, #0]
 8002f3c:	1cbb      	adds	r3, r7, #2
 8002f3e:	4602      	mov	r2, r0
 8002f40:	801a      	strh	r2, [r3, #0]
 8002f42:	1dbb      	adds	r3, r7, #6
 8002f44:	460a      	mov	r2, r1
 8002f46:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8002f48:	f107 030c 	add.w	r3, r7, #12
 8002f4c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8002f50:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8002f54:	3308      	adds	r3, #8
 8002f56:	f107 020c 	add.w	r2, r7, #12
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8002f60:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8002f64:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8002f68:	4413      	add	r3, r2
 8002f6a:	3309      	adds	r3, #9
 8002f6c:	f107 020c 	add.w	r2, r7, #12
 8002f70:	4413      	add	r3, r2
 8002f72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8002f76:	f107 030b 	add.w	r3, r7, #11
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8002f84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f88:	1dfa      	adds	r2, r7, #7
 8002f8a:	7812      	ldrb	r2, [r2, #0]
 8002f8c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8002f8e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8002f92:	3301      	adds	r3, #1
 8002f94:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8002f98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f9c:	1d3a      	adds	r2, r7, #4
 8002f9e:	8812      	ldrh	r2, [r2, #0]
 8002fa0:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8002fa4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8002fa8:	3302      	adds	r3, #2
 8002faa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8002fae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002fb2:	1cba      	adds	r2, r7, #2
 8002fb4:	8812      	ldrh	r2, [r2, #0]
 8002fb6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8002fba:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8002fc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002fc8:	1dba      	adds	r2, r7, #6
 8002fca:	7812      	ldrb	r2, [r2, #0]
 8002fcc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8002fce:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8002fd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002fdc:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8002fe0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8002fe2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8002fec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002ff0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8002ff4:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8002ff6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8003000:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003004:	3308      	adds	r3, #8
 8003006:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800300a:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fe72 	bl	8003cf8 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8003014:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8003018:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800301c:	4413      	add	r3, r2
 800301e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8003022:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003026:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800302a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800302c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003030:	3301      	adds	r3, #1
 8003032:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8003036:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800303a:	3301      	adds	r3, #1
 800303c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003040:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fe57 	bl	8003cf8 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 800304a:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800304e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003052:	4413      	add	r3, r2
 8003054:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8003058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800305c:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8003060:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003062:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003066:	3302      	adds	r3, #2
 8003068:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800306c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003070:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8003074:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8003076:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800307a:	3302      	adds	r3, #2
 800307c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003080:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003084:	2218      	movs	r2, #24
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fe43 	bl	8003d14 <memset>
  rq.ogf = 0x3f;
 800308e:	233f      	movs	r3, #63	; 0x3f
 8003090:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8003094:	2383      	movs	r3, #131	; 0x83
 8003096:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80030a2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80030a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80030aa:	f107 030b 	add.w	r3, r7, #11
 80030ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80030b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80030bc:	2100      	movs	r1, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fb72 	bl	80037a8 <hci_send_req>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	da01      	bge.n	80030ce <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 80030ca:	23ff      	movs	r3, #255	; 0xff
 80030cc:	e009      	b.n	80030e2 <aci_gap_set_discoverable+0x1c0>
  if (status) {
 80030ce:	f107 030b 	add.w	r3, r7, #11
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <aci_gap_set_discoverable+0x1be>
    return status;
 80030d8:	f107 030b 	add.w	r3, r7, #11
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	e000      	b.n	80030e2 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bdb0      	pop	{r4, r5, r7, pc}

080030ec <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b0cf      	sub	sp, #316	; 0x13c
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4604      	mov	r4, r0
 80030f4:	4608      	mov	r0, r1
 80030f6:	4611      	mov	r1, r2
 80030f8:	463a      	mov	r2, r7
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	1dfb      	adds	r3, r7, #7
 80030fe:	4622      	mov	r2, r4
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	1dbb      	adds	r3, r7, #6
 8003104:	4602      	mov	r2, r0
 8003106:	701a      	strb	r2, [r3, #0]
 8003108:	1d7b      	adds	r3, r7, #5
 800310a:	460a      	mov	r2, r1
 800310c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003116:	f107 030c 	add.w	r3, r7, #12
 800311a:	2207      	movs	r2, #7
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fdf8 	bl	8003d14 <memset>
  uint8_t index_input = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 800312a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800312e:	1dfa      	adds	r2, r7, #7
 8003130:	7812      	ldrb	r2, [r2, #0]
 8003132:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003134:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8003138:	3301      	adds	r3, #1
 800313a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800313e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003142:	1dba      	adds	r2, r7, #6
 8003144:	7812      	ldrb	r2, [r2, #0]
 8003146:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003148:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800314c:	3301      	adds	r3, #1
 800314e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8003152:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003156:	1d7a      	adds	r2, r7, #5
 8003158:	7812      	ldrb	r2, [r2, #0]
 800315a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800315c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8003160:	3301      	adds	r3, #1
 8003162:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003166:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800316a:	2218      	movs	r2, #24
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fdd0 	bl	8003d14 <memset>
  rq.ogf = 0x3f;
 8003174:	233f      	movs	r3, #63	; 0x3f
 8003176:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 800317a:	238a      	movs	r3, #138	; 0x8a
 800317c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8003188:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800318c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8003190:	f107 030c 	add.w	r3, r7, #12
 8003194:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8003198:	2307      	movs	r3, #7
 800319a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800319e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 faff 	bl	80037a8 <hci_send_req>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	da01      	bge.n	80031b4 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 80031b0:	23ff      	movs	r3, #255	; 0xff
 80031b2:	e021      	b.n	80031f8 <aci_gap_init+0x10c>
  if (resp.Status) {
 80031b4:	f107 030c 	add.w	r3, r7, #12
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <aci_gap_init+0xda>
    return resp.Status;
 80031be:	f107 030c 	add.w	r3, r7, #12
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	e018      	b.n	80031f8 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80031c6:	f107 030c 	add.w	r3, r7, #12
 80031ca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	463b      	mov	r3, r7
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 80031d6:	f107 030c 	add.w	r3, r7, #12
 80031da:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80031de:	b29a      	uxth	r2, r3
 80031e0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80031e4:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 80031e6:	f107 030c 	add.w	r3, r7, #12
 80031ea:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031f4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd90      	pop	{r4, r7, pc}

08003202 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b088      	sub	sp, #32
 8003206:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800320c:	f107 0308 	add.w	r3, r7, #8
 8003210:	2218      	movs	r2, #24
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fd7d 	bl	8003d14 <memset>
  rq.ogf = 0x3f;
 800321a:	233f      	movs	r3, #63	; 0x3f
 800321c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800321e:	f240 1301 	movw	r3, #257	; 0x101
 8003222:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003224:	1dfb      	adds	r3, r7, #7
 8003226:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003228:	2301      	movs	r3, #1
 800322a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800322c:	f107 0308 	add.w	r3, r7, #8
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fab8 	bl	80037a8 <hci_send_req>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	da01      	bge.n	8003242 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800323e:	23ff      	movs	r3, #255	; 0xff
 8003240:	e005      	b.n	800324e <aci_gatt_init+0x4c>
  if (status) {
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <aci_gatt_init+0x4a>
    return status;
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	e000      	b.n	800324e <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8003256:	b590      	push	{r4, r7, lr}
 8003258:	b0cf      	sub	sp, #316	; 0x13c
 800325a:	af00      	add	r7, sp, #0
 800325c:	4604      	mov	r4, r0
 800325e:	4638      	mov	r0, r7
 8003260:	6001      	str	r1, [r0, #0]
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	1dfb      	adds	r3, r7, #7
 8003268:	4622      	mov	r2, r4
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	1dbb      	adds	r3, r7, #6
 800326e:	4602      	mov	r2, r0
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	1d7b      	adds	r3, r7, #5
 8003274:	460a      	mov	r2, r1
 8003276:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8003278:	f107 030c 	add.w	r3, r7, #12
 800327c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8003280:	1dfb      	adds	r3, r7, #7
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d007      	beq.n	8003298 <aci_gatt_add_service+0x42>
 8003288:	1dfb      	adds	r3, r7, #7
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d101      	bne.n	8003294 <aci_gatt_add_service+0x3e>
 8003290:	2311      	movs	r3, #17
 8003292:	e002      	b.n	800329a <aci_gatt_add_service+0x44>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <aci_gatt_add_service+0x44>
 8003298:	2303      	movs	r3, #3
 800329a:	f107 020c 	add.w	r2, r7, #12
 800329e:	4413      	add	r3, r2
 80032a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80032a4:	f107 0308 	add.w	r3, r7, #8
 80032a8:	2203      	movs	r2, #3
 80032aa:	2100      	movs	r1, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fd31 	bl	8003d14 <memset>
  uint8_t index_input = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 80032b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80032bc:	1dfa      	adds	r2, r7, #7
 80032be:	7812      	ldrb	r2, [r2, #0]
 80032c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80032c2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80032c6:	3301      	adds	r3, #1
 80032c8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 80032cc:	1dfb      	adds	r3, r7, #7
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d002      	beq.n	80032da <aci_gatt_add_service+0x84>
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d004      	beq.n	80032e2 <aci_gatt_add_service+0x8c>
 80032d8:	e007      	b.n	80032ea <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 80032da:	2302      	movs	r3, #2
 80032dc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80032e0:	e005      	b.n	80032ee <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80032e2:	2310      	movs	r3, #16
 80032e4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80032e8:	e001      	b.n	80032ee <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80032ea:	2347      	movs	r3, #71	; 0x47
 80032ec:	e05d      	b.n	80033aa <aci_gatt_add_service+0x154>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 80032ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80032f2:	1c58      	adds	r0, r3, #1
 80032f4:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80032f8:	463b      	mov	r3, r7
 80032fa:	6819      	ldr	r1, [r3, #0]
 80032fc:	f000 fcfc 	bl	8003cf8 <memcpy>
    index_input += size;
 8003300:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8003304:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8003308:	4413      	add	r3, r2
 800330a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800330e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003312:	1dba      	adds	r2, r7, #6
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003318:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800331c:	3301      	adds	r3, #1
 800331e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8003322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003326:	1d7a      	adds	r2, r7, #5
 8003328:	7812      	ldrb	r2, [r2, #0]
 800332a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800332c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003330:	3301      	adds	r3, #1
 8003332:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003336:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800333a:	2218      	movs	r2, #24
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fce8 	bl	8003d14 <memset>
  rq.ogf = 0x3f;
 8003344:	233f      	movs	r3, #63	; 0x3f
 8003346:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800334a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800334e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003352:	f107 030c 	add.w	r3, r7, #12
 8003356:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800335a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800335e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8003362:	f107 0308 	add.w	r3, r7, #8
 8003366:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800336a:	2303      	movs	r3, #3
 800336c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8003370:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003374:	2100      	movs	r1, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fa16 	bl	80037a8 <hci_send_req>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	da01      	bge.n	8003386 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8003382:	23ff      	movs	r3, #255	; 0xff
 8003384:	e011      	b.n	80033aa <aci_gatt_add_service+0x154>
  if (resp.Status) {
 8003386:	f107 0308 	add.w	r3, r7, #8
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <aci_gatt_add_service+0x142>
    return resp.Status;
 8003390:	f107 0308 	add.w	r3, r7, #8
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	e008      	b.n	80033aa <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8003398:	f107 0308 	add.w	r3, r7, #8
 800339c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80033a6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd90      	pop	{r4, r7, pc}

080033b4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 80033b4:	b5b0      	push	{r4, r5, r7, lr}
 80033b6:	b0cc      	sub	sp, #304	; 0x130
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4605      	mov	r5, r0
 80033bc:	460c      	mov	r4, r1
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	1dbb      	adds	r3, r7, #6
 80033c4:	462a      	mov	r2, r5
 80033c6:	801a      	strh	r2, [r3, #0]
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	4622      	mov	r2, r4
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	1cfb      	adds	r3, r7, #3
 80033d0:	4602      	mov	r2, r0
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	1cbb      	adds	r3, r7, #2
 80033d6:	460a      	mov	r2, r1
 80033d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80033da:	f107 030c 	add.w	r3, r7, #12
 80033de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80033e2:	f107 030b 	add.w	r3, r7, #11
 80033e6:	2200      	movs	r2, #0
 80033e8:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 80033f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80033f4:	1dba      	adds	r2, r7, #6
 80033f6:	8812      	ldrh	r2, [r2, #0]
 80033f8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80033fa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80033fe:	3302      	adds	r3, #2
 8003400:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 8003404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003408:	1d3a      	adds	r2, r7, #4
 800340a:	8812      	ldrh	r2, [r2, #0]
 800340c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800340e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003412:	3302      	adds	r3, #2
 8003414:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 8003418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800341c:	1cfa      	adds	r2, r7, #3
 800341e:	7812      	ldrb	r2, [r2, #0]
 8003420:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8003422:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003426:	3301      	adds	r3, #1
 8003428:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800342c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003430:	1cba      	adds	r2, r7, #2
 8003432:	7812      	ldrb	r2, [r2, #0]
 8003434:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003436:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800343a:	3301      	adds	r3, #1
 800343c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8003440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003444:	1d98      	adds	r0, r3, #6
 8003446:	1cbb      	adds	r3, r7, #2
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003450:	f000 fc52 	bl	8003cf8 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 8003454:	1cbb      	adds	r3, r7, #2
 8003456:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	4413      	add	r3, r2
 800345e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003462:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003466:	2218      	movs	r2, #24
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fc52 	bl	8003d14 <memset>
  rq.ogf = 0x3f;
 8003470:	233f      	movs	r3, #63	; 0x3f
 8003472:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8003476:	f44f 7383 	mov.w	r3, #262	; 0x106
 800347a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800347e:	f107 030c 	add.w	r3, r7, #12
 8003482:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003486:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800348a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800348e:	f107 030b 	add.w	r3, r7, #11
 8003492:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003496:	2301      	movs	r3, #1
 8003498:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800349c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f980 	bl	80037a8 <hci_send_req>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	da01      	bge.n	80034b2 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80034ae:	23ff      	movs	r3, #255	; 0xff
 80034b0:	e009      	b.n	80034c6 <aci_gatt_update_char_value+0x112>
  if (status) {
 80034b2:	f107 030b 	add.w	r3, r7, #11
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <aci_gatt_update_char_value+0x110>
    return status;
 80034bc:	f107 030b 	add.w	r3, r7, #11
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	e000      	b.n	80034c6 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bdb0      	pop	{r4, r5, r7, pc}

080034d0 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b0cc      	sub	sp, #304	; 0x130
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	463b      	mov	r3, r7
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	1dfb      	adds	r3, r7, #7
 80034dc:	4602      	mov	r2, r0
 80034de:	701a      	strb	r2, [r3, #0]
 80034e0:	1dbb      	adds	r3, r7, #6
 80034e2:	460a      	mov	r2, r1
 80034e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80034e6:	f107 030c 	add.w	r3, r7, #12
 80034ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80034ee:	f107 030b 	add.w	r3, r7, #11
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 80034fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003500:	1dfa      	adds	r2, r7, #7
 8003502:	7812      	ldrb	r2, [r2, #0]
 8003504:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003506:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800350a:	3301      	adds	r3, #1
 800350c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 8003510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003514:	1dba      	adds	r2, r7, #6
 8003516:	7812      	ldrb	r2, [r2, #0]
 8003518:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800351a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800351e:	3301      	adds	r3, #1
 8003520:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8003524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003528:	1c98      	adds	r0, r3, #2
 800352a:	1dbb      	adds	r3, r7, #6
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	463b      	mov	r3, r7
 8003530:	6819      	ldr	r1, [r3, #0]
 8003532:	f000 fbe1 	bl	8003cf8 <memcpy>
    index_input += Length*sizeof(uint8_t);
 8003536:	1dbb      	adds	r3, r7, #6
 8003538:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	4413      	add	r3, r2
 8003540:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003544:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003548:	2218      	movs	r2, #24
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fbe1 	bl	8003d14 <memset>
  rq.ogf = 0x3f;
 8003552:	233f      	movs	r3, #63	; 0x3f
 8003554:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8003558:	230c      	movs	r3, #12
 800355a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800355e:	f107 030c 	add.w	r3, r7, #12
 8003562:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003566:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800356a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800356e:	f107 030b 	add.w	r3, r7, #11
 8003572:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800357c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f910 	bl	80037a8 <hci_send_req>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	da01      	bge.n	8003592 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800358e:	23ff      	movs	r3, #255	; 0xff
 8003590:	e009      	b.n	80035a6 <aci_hal_write_config_data+0xd6>
  if (status) {
 8003592:	f107 030b 	add.w	r3, r7, #11
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <aci_hal_write_config_data+0xd4>
    return status;
 800359c:	f107 030b 	add.w	r3, r7, #11
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	e000      	b.n	80035a6 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3308      	adds	r3, #8
 80035bc:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d001      	beq.n	80035ca <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80035c6:	2301      	movs	r3, #1
 80035c8:	e00c      	b.n	80035e4 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3302      	adds	r3, #2
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80035d8:	3b03      	subs	r3, #3
 80035da:	429a      	cmp	r2, r3
 80035dc:	d001      	beq.n	80035e2 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80035de:	2302      	movs	r3, #2
 80035e0:	e000      	b.n	80035e4 <verify_packet+0x34>
  
  return 0;      
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b0a6      	sub	sp, #152	; 0x98
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	4603      	mov	r3, r0
 80035fa:	81fb      	strh	r3, [r7, #14]
 80035fc:	460b      	mov	r3, r1
 80035fe:	81bb      	strh	r3, [r7, #12]
 8003600:	4613      	mov	r3, r2
 8003602:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8003604:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800360c:	b21a      	sxth	r2, r3
 800360e:	89fb      	ldrh	r3, [r7, #14]
 8003610:	029b      	lsls	r3, r3, #10
 8003612:	b21b      	sxth	r3, r3
 8003614:	4313      	orrs	r3, r2
 8003616:	b21b      	sxth	r3, r3
 8003618:	b29b      	uxth	r3, r3
 800361a:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800361c:	7afb      	ldrb	r3, [r7, #11]
 800361e:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8003620:	2301      	movs	r3, #1
 8003622:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003624:	f107 0318 	add.w	r3, r7, #24
 8003628:	3301      	adds	r3, #1
 800362a:	461a      	mov	r2, r3
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	8819      	ldrh	r1, [r3, #0]
 8003632:	789b      	ldrb	r3, [r3, #2]
 8003634:	8011      	strh	r1, [r2, #0]
 8003636:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003638:	f107 0318 	add.w	r3, r7, #24
 800363c:	3304      	adds	r3, #4
 800363e:	7afa      	ldrb	r2, [r7, #11]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fb58 	bl	8003cf8 <memcpy>
  
  if (hciContext.io.Send)
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <send_cmd+0x7c>)
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d009      	beq.n	8003664 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <send_cmd+0x7c>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	7afa      	ldrb	r2, [r7, #11]
 8003656:	b292      	uxth	r2, r2
 8003658:	3204      	adds	r2, #4
 800365a:	b291      	uxth	r1, r2
 800365c:	f107 0218 	add.w	r2, r7, #24
 8003660:	4610      	mov	r0, r2
 8003662:	4798      	blx	r3
  }
}
 8003664:	bf00      	nop
 8003666:	3798      	adds	r7, #152	; 0x98
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000714 	.word	0x20000714

08003670 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800367a:	e00a      	b.n	8003692 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800367c:	f107 030c 	add.w	r3, r7, #12
 8003680:	4619      	mov	r1, r3
 8003682:	6838      	ldr	r0, [r7, #0]
 8003684:	f000 fabe 	bl	8003c04 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4619      	mov	r1, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fa25 	bl	8003adc <list_insert_head>
  while (!list_is_empty(src_list))
 8003692:	6838      	ldr	r0, [r7, #0]
 8003694:	f000 fa00 	bl	8003a98 <list_is_empty>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0ee      	beq.n	800367c <move_list+0xc>
  }
}
 800369e:	bf00      	nop
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80036ae:	e009      	b.n	80036c4 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	4619      	mov	r1, r3
 80036b4:	4809      	ldr	r0, [pc, #36]	; (80036dc <free_event_list+0x34>)
 80036b6:	f000 fa7e 	bl	8003bb6 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4619      	mov	r1, r3
 80036be:	4808      	ldr	r0, [pc, #32]	; (80036e0 <free_event_list+0x38>)
 80036c0:	f000 fa32 	bl	8003b28 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80036c4:	4806      	ldr	r0, [pc, #24]	; (80036e0 <free_event_list+0x38>)
 80036c6:	f000 fac4 	bl	8003c52 <list_get_size>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	ddef      	ble.n	80036b0 <free_event_list+0x8>
  }
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	200007f0 	.word	0x200007f0
 80036e0:	200007e8 	.word	0x200007e8

080036e4 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80036f4:	4a18      	ldr	r2, [pc, #96]	; (8003758 <hci_init+0x74>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80036fa:	4818      	ldr	r0, [pc, #96]	; (800375c <hci_init+0x78>)
 80036fc:	f000 f9bc 	bl	8003a78 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8003700:	4817      	ldr	r0, [pc, #92]	; (8003760 <hci_init+0x7c>)
 8003702:	f000 f9b9 	bl	8003a78 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8003706:	f7fd f883 	bl	8000810 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800370a:	2300      	movs	r3, #0
 800370c:	73fb      	strb	r3, [r7, #15]
 800370e:	e00c      	b.n	800372a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	228c      	movs	r2, #140	; 0x8c
 8003714:	fb02 f303 	mul.w	r3, r2, r3
 8003718:	4a12      	ldr	r2, [pc, #72]	; (8003764 <hci_init+0x80>)
 800371a:	4413      	add	r3, r2
 800371c:	4619      	mov	r1, r3
 800371e:	480f      	ldr	r0, [pc, #60]	; (800375c <hci_init+0x78>)
 8003720:	f000 fa02 	bl	8003b28 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	3301      	adds	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	2b09      	cmp	r3, #9
 800372e:	d9ef      	bls.n	8003710 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <hci_init+0x74>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <hci_init+0x5c>
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <hci_init+0x74>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2000      	movs	r0, #0
 800373e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <hci_init+0x74>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <hci_init+0x6a>
 8003748:	4b03      	ldr	r3, [pc, #12]	; (8003758 <hci_init+0x74>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4798      	blx	r3
}
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000714 	.word	0x20000714
 800375c:	200007e8 	.word	0x200007e8
 8003760:	200007f0 	.word	0x200007f0
 8003764:	2000019c 	.word	0x2000019c

08003768 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <hci_register_io_bus+0x3c>)
 8003776:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <hci_register_io_bus+0x3c>)
 800377e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	4a07      	ldr	r2, [pc, #28]	; (80037a4 <hci_register_io_bus+0x3c>)
 8003786:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	4a05      	ldr	r2, [pc, #20]	; (80037a4 <hci_register_io_bus+0x3c>)
 800378e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a03      	ldr	r2, [pc, #12]	; (80037a4 <hci_register_io_bus+0x3c>)
 8003796:	6093      	str	r3, [r2, #8]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	20000714 	.word	0x20000714

080037a8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08e      	sub	sp, #56	; 0x38
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	885b      	ldrh	r3, [r3, #2]
 80037b8:	b21b      	sxth	r3, r3
 80037ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037be:	b21a      	sxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	029b      	lsls	r3, r3, #10
 80037c6:	b21b      	sxth	r3, r3
 80037c8:	4313      	orrs	r3, r2
 80037ca:	b21b      	sxth	r3, r3
 80037cc:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80037d2:	f107 0308 	add.w	r3, r7, #8
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f94e 	bl	8003a78 <list_init_head>

  free_event_list();
 80037dc:	f7ff ff64 	bl	80036a8 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8818      	ldrh	r0, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8859      	ldrh	r1, [r3, #2]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f7ff fefd 	bl	80035f0 <send_cmd>
  
  if (async)
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <hci_send_req+0x58>
  {
    return 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e0e5      	b.n	80039cc <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8003800:	f7fd fd4a 	bl	8001298 <HAL_GetTick>
 8003804:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003806:	f7fd fd47 	bl	8001298 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003814:	f200 80b6 	bhi.w	8003984 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003818:	486e      	ldr	r0, [pc, #440]	; (80039d4 <hci_send_req+0x22c>)
 800381a:	f000 f93d 	bl	8003a98 <list_is_empty>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d000      	beq.n	8003826 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003824:	e7ef      	b.n	8003806 <hci_send_req+0x5e>
      {
        break;
 8003826:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8003828:	f107 0310 	add.w	r3, r7, #16
 800382c:	4619      	mov	r1, r3
 800382e:	4869      	ldr	r0, [pc, #420]	; (80039d4 <hci_send_req+0x22c>)
 8003830:	f000 f9c1 	bl	8003bb6 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	3308      	adds	r3, #8
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b04      	cmp	r3, #4
 8003840:	d17b      	bne.n	800393a <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	3301      	adds	r3, #1
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	3308      	adds	r3, #8
 800384c:	3303      	adds	r3, #3
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003856:	3b03      	subs	r3, #3
 8003858:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b3e      	cmp	r3, #62	; 0x3e
 8003860:	d04d      	beq.n	80038fe <hci_send_req+0x156>
 8003862:	2b3e      	cmp	r3, #62	; 0x3e
 8003864:	dc6b      	bgt.n	800393e <hci_send_req+0x196>
 8003866:	2b10      	cmp	r3, #16
 8003868:	f000 808e 	beq.w	8003988 <hci_send_req+0x1e0>
 800386c:	2b10      	cmp	r3, #16
 800386e:	dc66      	bgt.n	800393e <hci_send_req+0x196>
 8003870:	2b0e      	cmp	r3, #14
 8003872:	d024      	beq.n	80038be <hci_send_req+0x116>
 8003874:	2b0f      	cmp	r3, #15
 8003876:	d162      	bne.n	800393e <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	885b      	ldrh	r3, [r3, #2]
 8003880:	b29b      	uxth	r3, r3
 8003882:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003884:	429a      	cmp	r2, r3
 8003886:	f040 8081 	bne.w	800398c <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b0f      	cmp	r3, #15
 8003890:	d004      	beq.n	800389c <hci_send_req+0xf4>
          if (cs->status) {
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d053      	beq.n	8003942 <hci_send_req+0x19a>
            goto failed;
 800389a:	e07a      	b.n	8003992 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	bf28      	it	cs
 80038a6:	461a      	movcs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6918      	ldr	r0, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	461a      	mov	r2, r3
 80038b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038b8:	f000 fa1e 	bl	8003cf8 <memcpy>
        goto done;
 80038bc:	e07a      	b.n	80039b4 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d15f      	bne.n	8003990 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	3303      	adds	r3, #3
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	3b03      	subs	r3, #3
 80038da:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	bf28      	it	cs
 80038e6:	461a      	movcs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6918      	ldr	r0, [r3, #16]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	461a      	mov	r2, r3
 80038f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f8:	f000 f9fe 	bl	8003cf8 <memcpy>
        goto done;
 80038fc:	e05a      	b.n	80039b4 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	429a      	cmp	r2, r3
 800390e:	d11a      	bne.n	8003946 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	3b01      	subs	r3, #1
 8003914:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	429a      	cmp	r2, r3
 800391e:	bf28      	it	cs
 8003920:	461a      	movcs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6918      	ldr	r0, [r3, #16]
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	1c59      	adds	r1, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	461a      	mov	r2, r3
 8003934:	f000 f9e0 	bl	8003cf8 <memcpy>
        goto done;
 8003938:	e03c      	b.n	80039b4 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800393a:	bf00      	nop
 800393c:	e004      	b.n	8003948 <hci_send_req+0x1a0>
        break;
 800393e:	bf00      	nop
 8003940:	e002      	b.n	8003948 <hci_send_req+0x1a0>
          break;
 8003942:	bf00      	nop
 8003944:	e000      	b.n	8003948 <hci_send_req+0x1a0>
          break;
 8003946:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8003948:	4823      	ldr	r0, [pc, #140]	; (80039d8 <hci_send_req+0x230>)
 800394a:	f000 f8a5 	bl	8003a98 <list_is_empty>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00d      	beq.n	8003970 <hci_send_req+0x1c8>
 8003954:	481f      	ldr	r0, [pc, #124]	; (80039d4 <hci_send_req+0x22c>)
 8003956:	f000 f89f 	bl	8003a98 <list_is_empty>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4619      	mov	r1, r3
 8003964:	481c      	ldr	r0, [pc, #112]	; (80039d8 <hci_send_req+0x230>)
 8003966:	f000 f8df 	bl	8003b28 <list_insert_tail>
      hciReadPacket=NULL;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	e008      	b.n	8003982 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	f107 0308 	add.w	r3, r7, #8
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f000 f8d5 	bl	8003b28 <list_insert_tail>
      hciReadPacket=NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
  {
 8003982:	e73d      	b.n	8003800 <hci_send_req+0x58>
        goto failed;
 8003984:	bf00      	nop
 8003986:	e004      	b.n	8003992 <hci_send_req+0x1ea>
        goto failed;
 8003988:	bf00      	nop
 800398a:	e002      	b.n	8003992 <hci_send_req+0x1ea>
          goto failed;
 800398c:	bf00      	nop
 800398e:	e000      	b.n	8003992 <hci_send_req+0x1ea>
          goto failed;
 8003990:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4619      	mov	r1, r3
 800399c:	480e      	ldr	r0, [pc, #56]	; (80039d8 <hci_send_req+0x230>)
 800399e:	f000 f89d 	bl	8003adc <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80039a2:	f107 0308 	add.w	r3, r7, #8
 80039a6:	4619      	mov	r1, r3
 80039a8:	480a      	ldr	r0, [pc, #40]	; (80039d4 <hci_send_req+0x22c>)
 80039aa:	f7ff fe61 	bl	8003670 <move_list>

  return -1;
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039b2:	e00b      	b.n	80039cc <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	4619      	mov	r1, r3
 80039b8:	4807      	ldr	r0, [pc, #28]	; (80039d8 <hci_send_req+0x230>)
 80039ba:	f000 f88f 	bl	8003adc <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	4619      	mov	r1, r3
 80039c4:	4803      	ldr	r0, [pc, #12]	; (80039d4 <hci_send_req+0x22c>)
 80039c6:	f7ff fe53 	bl	8003670 <move_list>

  return 0;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3738      	adds	r7, #56	; 0x38
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	200007f0 	.word	0x200007f0
 80039d8:	200007e8 	.word	0x200007e8

080039dc <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80039ec:	481f      	ldr	r0, [pc, #124]	; (8003a6c <hci_notify_asynch_evt+0x90>)
 80039ee:	f000 f853 	bl	8003a98 <list_is_empty>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d132      	bne.n	8003a5e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80039f8:	f107 030c 	add.w	r3, r7, #12
 80039fc:	4619      	mov	r1, r3
 80039fe:	481b      	ldr	r0, [pc, #108]	; (8003a6c <hci_notify_asynch_evt+0x90>)
 8003a00:	f000 f8d9 	bl	8003bb6 <list_remove_head>
    
    if (hciContext.io.Receive)
 8003a04:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <hci_notify_asynch_evt+0x94>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d02a      	beq.n	8003a62 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8003a0c:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <hci_notify_asynch_evt+0x94>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	3208      	adds	r2, #8
 8003a14:	2180      	movs	r1, #128	; 0x80
 8003a16:	4610      	mov	r0, r2
 8003a18:	4798      	blx	r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8003a1e:	7cfb      	ldrb	r3, [r7, #19]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d016      	beq.n	8003a52 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	7cfa      	ldrb	r2, [r7, #19]
 8003a28:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fdbe 	bl	80035b0 <verify_packet>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d105      	bne.n	8003a46 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	480d      	ldr	r0, [pc, #52]	; (8003a74 <hci_notify_asynch_evt+0x98>)
 8003a40:	f000 f872 	bl	8003b28 <list_insert_tail>
 8003a44:	e00d      	b.n	8003a62 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4808      	ldr	r0, [pc, #32]	; (8003a6c <hci_notify_asynch_evt+0x90>)
 8003a4c:	f000 f846 	bl	8003adc <list_insert_head>
 8003a50:	e007      	b.n	8003a62 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4619      	mov	r1, r3
 8003a56:	4805      	ldr	r0, [pc, #20]	; (8003a6c <hci_notify_asynch_evt+0x90>)
 8003a58:	f000 f840 	bl	8003adc <list_insert_head>
 8003a5c:	e001      	b.n	8003a62 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003a62:	697b      	ldr	r3, [r7, #20]
  
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	200007e8 	.word	0x200007e8
 8003a70:	20000714 	.word	0x20000714
 8003a74:	200007f0 	.word	0x200007f0

08003a78 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	605a      	str	r2, [r3, #4]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003aa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003aaa:	b672      	cpsid	i
}
 8003aac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d102      	bne.n	8003abe <list_is_empty+0x26>
  {
    return_value = 1;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
 8003abc:	e001      	b.n	8003ac2 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	75fb      	strb	r3, [r7, #23]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f383 8810 	msr	PRIMASK, r3
}
 8003acc:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aea:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aec:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003aee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003af0:	b672      	cpsid	i
}
 8003af2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	605a      	str	r2, [r3, #4]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f383 8810 	msr	PRIMASK, r3
}
 8003b1a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b32:	f3ef 8310 	mrs	r3, PRIMASK
 8003b36:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b38:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003b3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b3c:	b672      	cpsid	i
}
 8003b3e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f383 8810 	msr	PRIMASK, r3
}
 8003b66:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003b68:	bf00      	nop
 8003b6a:	371c      	adds	r7, #28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b80:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b82:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003b84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b86:	b672      	cpsid	i
}
 8003b88:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6852      	ldr	r2, [r2, #4]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f383 8810 	msr	PRIMASK, r3
}
 8003ba8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b086      	sub	sp, #24
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003bc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bca:	b672      	cpsid	i
}
 8003bcc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ffca 	bl	8003b74 <list_remove_node>
  (*node)->next = NULL;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2200      	movs	r2, #0
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f383 8810 	msr	PRIMASK, r3
}
 8003bfa:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003bfc:	bf00      	nop
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c12:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c14:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003c16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c18:	b672      	cpsid	i
}
 8003c1a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ffa3 	bl	8003b74 <list_remove_node>
  (*node)->next = NULL;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f383 8810 	msr	PRIMASK, r3
}
 8003c48:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003c4a:	bf00      	nop
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b089      	sub	sp, #36	; 0x24
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  int size = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c62:	613b      	str	r3, [r7, #16]
  return(result);
 8003c64:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003c66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c68:	b672      	cpsid	i
}
 8003c6a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8003c72:	e005      	b.n	8003c80 <list_get_size+0x2e>
  {
    size++;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	3301      	adds	r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d1f5      	bne.n	8003c74 <list_get_size+0x22>
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f383 8810 	msr	PRIMASK, r3
}
 8003c92:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8003c94:	69fb      	ldr	r3, [r7, #28]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3724      	adds	r7, #36	; 0x24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <__errno>:
 8003ca4:	4b01      	ldr	r3, [pc, #4]	; (8003cac <__errno+0x8>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20000014 	.word	0x20000014

08003cb0 <__libc_init_array>:
 8003cb0:	b570      	push	{r4, r5, r6, lr}
 8003cb2:	4d0d      	ldr	r5, [pc, #52]	; (8003ce8 <__libc_init_array+0x38>)
 8003cb4:	4c0d      	ldr	r4, [pc, #52]	; (8003cec <__libc_init_array+0x3c>)
 8003cb6:	1b64      	subs	r4, r4, r5
 8003cb8:	10a4      	asrs	r4, r4, #2
 8003cba:	2600      	movs	r6, #0
 8003cbc:	42a6      	cmp	r6, r4
 8003cbe:	d109      	bne.n	8003cd4 <__libc_init_array+0x24>
 8003cc0:	4d0b      	ldr	r5, [pc, #44]	; (8003cf0 <__libc_init_array+0x40>)
 8003cc2:	4c0c      	ldr	r4, [pc, #48]	; (8003cf4 <__libc_init_array+0x44>)
 8003cc4:	f000 fcf4 	bl	80046b0 <_init>
 8003cc8:	1b64      	subs	r4, r4, r5
 8003cca:	10a4      	asrs	r4, r4, #2
 8003ccc:	2600      	movs	r6, #0
 8003cce:	42a6      	cmp	r6, r4
 8003cd0:	d105      	bne.n	8003cde <__libc_init_array+0x2e>
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd8:	4798      	blx	r3
 8003cda:	3601      	adds	r6, #1
 8003cdc:	e7ee      	b.n	8003cbc <__libc_init_array+0xc>
 8003cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce2:	4798      	blx	r3
 8003ce4:	3601      	adds	r6, #1
 8003ce6:	e7f2      	b.n	8003cce <__libc_init_array+0x1e>
 8003ce8:	08004828 	.word	0x08004828
 8003cec:	08004828 	.word	0x08004828
 8003cf0:	08004828 	.word	0x08004828
 8003cf4:	0800482c 	.word	0x0800482c

08003cf8 <memcpy>:
 8003cf8:	440a      	add	r2, r1
 8003cfa:	4291      	cmp	r1, r2
 8003cfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003d00:	d100      	bne.n	8003d04 <memcpy+0xc>
 8003d02:	4770      	bx	lr
 8003d04:	b510      	push	{r4, lr}
 8003d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d0e:	4291      	cmp	r1, r2
 8003d10:	d1f9      	bne.n	8003d06 <memcpy+0xe>
 8003d12:	bd10      	pop	{r4, pc}

08003d14 <memset>:
 8003d14:	4402      	add	r2, r0
 8003d16:	4603      	mov	r3, r0
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d100      	bne.n	8003d1e <memset+0xa>
 8003d1c:	4770      	bx	lr
 8003d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d22:	e7f9      	b.n	8003d18 <memset+0x4>

08003d24 <_puts_r>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	460e      	mov	r6, r1
 8003d28:	4605      	mov	r5, r0
 8003d2a:	b118      	cbz	r0, 8003d34 <_puts_r+0x10>
 8003d2c:	6983      	ldr	r3, [r0, #24]
 8003d2e:	b90b      	cbnz	r3, 8003d34 <_puts_r+0x10>
 8003d30:	f000 fa48 	bl	80041c4 <__sinit>
 8003d34:	69ab      	ldr	r3, [r5, #24]
 8003d36:	68ac      	ldr	r4, [r5, #8]
 8003d38:	b913      	cbnz	r3, 8003d40 <_puts_r+0x1c>
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f000 fa42 	bl	80041c4 <__sinit>
 8003d40:	4b2c      	ldr	r3, [pc, #176]	; (8003df4 <_puts_r+0xd0>)
 8003d42:	429c      	cmp	r4, r3
 8003d44:	d120      	bne.n	8003d88 <_puts_r+0x64>
 8003d46:	686c      	ldr	r4, [r5, #4]
 8003d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d4a:	07db      	lsls	r3, r3, #31
 8003d4c:	d405      	bmi.n	8003d5a <_puts_r+0x36>
 8003d4e:	89a3      	ldrh	r3, [r4, #12]
 8003d50:	0598      	lsls	r0, r3, #22
 8003d52:	d402      	bmi.n	8003d5a <_puts_r+0x36>
 8003d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d56:	f000 fad3 	bl	8004300 <__retarget_lock_acquire_recursive>
 8003d5a:	89a3      	ldrh	r3, [r4, #12]
 8003d5c:	0719      	lsls	r1, r3, #28
 8003d5e:	d51d      	bpl.n	8003d9c <_puts_r+0x78>
 8003d60:	6923      	ldr	r3, [r4, #16]
 8003d62:	b1db      	cbz	r3, 8003d9c <_puts_r+0x78>
 8003d64:	3e01      	subs	r6, #1
 8003d66:	68a3      	ldr	r3, [r4, #8]
 8003d68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	60a3      	str	r3, [r4, #8]
 8003d70:	bb39      	cbnz	r1, 8003dc2 <_puts_r+0x9e>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	da38      	bge.n	8003de8 <_puts_r+0xc4>
 8003d76:	4622      	mov	r2, r4
 8003d78:	210a      	movs	r1, #10
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	f000 f848 	bl	8003e10 <__swbuf_r>
 8003d80:	3001      	adds	r0, #1
 8003d82:	d011      	beq.n	8003da8 <_puts_r+0x84>
 8003d84:	250a      	movs	r5, #10
 8003d86:	e011      	b.n	8003dac <_puts_r+0x88>
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <_puts_r+0xd4>)
 8003d8a:	429c      	cmp	r4, r3
 8003d8c:	d101      	bne.n	8003d92 <_puts_r+0x6e>
 8003d8e:	68ac      	ldr	r4, [r5, #8]
 8003d90:	e7da      	b.n	8003d48 <_puts_r+0x24>
 8003d92:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <_puts_r+0xd8>)
 8003d94:	429c      	cmp	r4, r3
 8003d96:	bf08      	it	eq
 8003d98:	68ec      	ldreq	r4, [r5, #12]
 8003d9a:	e7d5      	b.n	8003d48 <_puts_r+0x24>
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f000 f888 	bl	8003eb4 <__swsetup_r>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d0dd      	beq.n	8003d64 <_puts_r+0x40>
 8003da8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dae:	07da      	lsls	r2, r3, #31
 8003db0:	d405      	bmi.n	8003dbe <_puts_r+0x9a>
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	059b      	lsls	r3, r3, #22
 8003db6:	d402      	bmi.n	8003dbe <_puts_r+0x9a>
 8003db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dba:	f000 faa2 	bl	8004302 <__retarget_lock_release_recursive>
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	bd70      	pop	{r4, r5, r6, pc}
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da04      	bge.n	8003dd0 <_puts_r+0xac>
 8003dc6:	69a2      	ldr	r2, [r4, #24]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	dc06      	bgt.n	8003dda <_puts_r+0xb6>
 8003dcc:	290a      	cmp	r1, #10
 8003dce:	d004      	beq.n	8003dda <_puts_r+0xb6>
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	6022      	str	r2, [r4, #0]
 8003dd6:	7019      	strb	r1, [r3, #0]
 8003dd8:	e7c5      	b.n	8003d66 <_puts_r+0x42>
 8003dda:	4622      	mov	r2, r4
 8003ddc:	4628      	mov	r0, r5
 8003dde:	f000 f817 	bl	8003e10 <__swbuf_r>
 8003de2:	3001      	adds	r0, #1
 8003de4:	d1bf      	bne.n	8003d66 <_puts_r+0x42>
 8003de6:	e7df      	b.n	8003da8 <_puts_r+0x84>
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	250a      	movs	r5, #10
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	6022      	str	r2, [r4, #0]
 8003df0:	701d      	strb	r5, [r3, #0]
 8003df2:	e7db      	b.n	8003dac <_puts_r+0x88>
 8003df4:	080047e0 	.word	0x080047e0
 8003df8:	08004800 	.word	0x08004800
 8003dfc:	080047c0 	.word	0x080047c0

08003e00 <puts>:
 8003e00:	4b02      	ldr	r3, [pc, #8]	; (8003e0c <puts+0xc>)
 8003e02:	4601      	mov	r1, r0
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	f7ff bf8d 	b.w	8003d24 <_puts_r>
 8003e0a:	bf00      	nop
 8003e0c:	20000014 	.word	0x20000014

08003e10 <__swbuf_r>:
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	460e      	mov	r6, r1
 8003e14:	4614      	mov	r4, r2
 8003e16:	4605      	mov	r5, r0
 8003e18:	b118      	cbz	r0, 8003e22 <__swbuf_r+0x12>
 8003e1a:	6983      	ldr	r3, [r0, #24]
 8003e1c:	b90b      	cbnz	r3, 8003e22 <__swbuf_r+0x12>
 8003e1e:	f000 f9d1 	bl	80041c4 <__sinit>
 8003e22:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <__swbuf_r+0x98>)
 8003e24:	429c      	cmp	r4, r3
 8003e26:	d12b      	bne.n	8003e80 <__swbuf_r+0x70>
 8003e28:	686c      	ldr	r4, [r5, #4]
 8003e2a:	69a3      	ldr	r3, [r4, #24]
 8003e2c:	60a3      	str	r3, [r4, #8]
 8003e2e:	89a3      	ldrh	r3, [r4, #12]
 8003e30:	071a      	lsls	r2, r3, #28
 8003e32:	d52f      	bpl.n	8003e94 <__swbuf_r+0x84>
 8003e34:	6923      	ldr	r3, [r4, #16]
 8003e36:	b36b      	cbz	r3, 8003e94 <__swbuf_r+0x84>
 8003e38:	6923      	ldr	r3, [r4, #16]
 8003e3a:	6820      	ldr	r0, [r4, #0]
 8003e3c:	1ac0      	subs	r0, r0, r3
 8003e3e:	6963      	ldr	r3, [r4, #20]
 8003e40:	b2f6      	uxtb	r6, r6
 8003e42:	4283      	cmp	r3, r0
 8003e44:	4637      	mov	r7, r6
 8003e46:	dc04      	bgt.n	8003e52 <__swbuf_r+0x42>
 8003e48:	4621      	mov	r1, r4
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	f000 f926 	bl	800409c <_fflush_r>
 8003e50:	bb30      	cbnz	r0, 8003ea0 <__swbuf_r+0x90>
 8003e52:	68a3      	ldr	r3, [r4, #8]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	60a3      	str	r3, [r4, #8]
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	6022      	str	r2, [r4, #0]
 8003e5e:	701e      	strb	r6, [r3, #0]
 8003e60:	6963      	ldr	r3, [r4, #20]
 8003e62:	3001      	adds	r0, #1
 8003e64:	4283      	cmp	r3, r0
 8003e66:	d004      	beq.n	8003e72 <__swbuf_r+0x62>
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	07db      	lsls	r3, r3, #31
 8003e6c:	d506      	bpl.n	8003e7c <__swbuf_r+0x6c>
 8003e6e:	2e0a      	cmp	r6, #10
 8003e70:	d104      	bne.n	8003e7c <__swbuf_r+0x6c>
 8003e72:	4621      	mov	r1, r4
 8003e74:	4628      	mov	r0, r5
 8003e76:	f000 f911 	bl	800409c <_fflush_r>
 8003e7a:	b988      	cbnz	r0, 8003ea0 <__swbuf_r+0x90>
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e80:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <__swbuf_r+0x9c>)
 8003e82:	429c      	cmp	r4, r3
 8003e84:	d101      	bne.n	8003e8a <__swbuf_r+0x7a>
 8003e86:	68ac      	ldr	r4, [r5, #8]
 8003e88:	e7cf      	b.n	8003e2a <__swbuf_r+0x1a>
 8003e8a:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <__swbuf_r+0xa0>)
 8003e8c:	429c      	cmp	r4, r3
 8003e8e:	bf08      	it	eq
 8003e90:	68ec      	ldreq	r4, [r5, #12]
 8003e92:	e7ca      	b.n	8003e2a <__swbuf_r+0x1a>
 8003e94:	4621      	mov	r1, r4
 8003e96:	4628      	mov	r0, r5
 8003e98:	f000 f80c 	bl	8003eb4 <__swsetup_r>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	d0cb      	beq.n	8003e38 <__swbuf_r+0x28>
 8003ea0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003ea4:	e7ea      	b.n	8003e7c <__swbuf_r+0x6c>
 8003ea6:	bf00      	nop
 8003ea8:	080047e0 	.word	0x080047e0
 8003eac:	08004800 	.word	0x08004800
 8003eb0:	080047c0 	.word	0x080047c0

08003eb4 <__swsetup_r>:
 8003eb4:	4b32      	ldr	r3, [pc, #200]	; (8003f80 <__swsetup_r+0xcc>)
 8003eb6:	b570      	push	{r4, r5, r6, lr}
 8003eb8:	681d      	ldr	r5, [r3, #0]
 8003eba:	4606      	mov	r6, r0
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	b125      	cbz	r5, 8003eca <__swsetup_r+0x16>
 8003ec0:	69ab      	ldr	r3, [r5, #24]
 8003ec2:	b913      	cbnz	r3, 8003eca <__swsetup_r+0x16>
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	f000 f97d 	bl	80041c4 <__sinit>
 8003eca:	4b2e      	ldr	r3, [pc, #184]	; (8003f84 <__swsetup_r+0xd0>)
 8003ecc:	429c      	cmp	r4, r3
 8003ece:	d10f      	bne.n	8003ef0 <__swsetup_r+0x3c>
 8003ed0:	686c      	ldr	r4, [r5, #4]
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ed8:	0719      	lsls	r1, r3, #28
 8003eda:	d42c      	bmi.n	8003f36 <__swsetup_r+0x82>
 8003edc:	06dd      	lsls	r5, r3, #27
 8003ede:	d411      	bmi.n	8003f04 <__swsetup_r+0x50>
 8003ee0:	2309      	movs	r3, #9
 8003ee2:	6033      	str	r3, [r6, #0]
 8003ee4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ee8:	81a3      	strh	r3, [r4, #12]
 8003eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eee:	e03e      	b.n	8003f6e <__swsetup_r+0xba>
 8003ef0:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <__swsetup_r+0xd4>)
 8003ef2:	429c      	cmp	r4, r3
 8003ef4:	d101      	bne.n	8003efa <__swsetup_r+0x46>
 8003ef6:	68ac      	ldr	r4, [r5, #8]
 8003ef8:	e7eb      	b.n	8003ed2 <__swsetup_r+0x1e>
 8003efa:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <__swsetup_r+0xd8>)
 8003efc:	429c      	cmp	r4, r3
 8003efe:	bf08      	it	eq
 8003f00:	68ec      	ldreq	r4, [r5, #12]
 8003f02:	e7e6      	b.n	8003ed2 <__swsetup_r+0x1e>
 8003f04:	0758      	lsls	r0, r3, #29
 8003f06:	d512      	bpl.n	8003f2e <__swsetup_r+0x7a>
 8003f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f0a:	b141      	cbz	r1, 8003f1e <__swsetup_r+0x6a>
 8003f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f10:	4299      	cmp	r1, r3
 8003f12:	d002      	beq.n	8003f1a <__swsetup_r+0x66>
 8003f14:	4630      	mov	r0, r6
 8003f16:	f000 fa59 	bl	80043cc <_free_r>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	6363      	str	r3, [r4, #52]	; 0x34
 8003f1e:	89a3      	ldrh	r3, [r4, #12]
 8003f20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f24:	81a3      	strh	r3, [r4, #12]
 8003f26:	2300      	movs	r3, #0
 8003f28:	6063      	str	r3, [r4, #4]
 8003f2a:	6923      	ldr	r3, [r4, #16]
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	89a3      	ldrh	r3, [r4, #12]
 8003f30:	f043 0308 	orr.w	r3, r3, #8
 8003f34:	81a3      	strh	r3, [r4, #12]
 8003f36:	6923      	ldr	r3, [r4, #16]
 8003f38:	b94b      	cbnz	r3, 8003f4e <__swsetup_r+0x9a>
 8003f3a:	89a3      	ldrh	r3, [r4, #12]
 8003f3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f44:	d003      	beq.n	8003f4e <__swsetup_r+0x9a>
 8003f46:	4621      	mov	r1, r4
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f000 f9ff 	bl	800434c <__smakebuf_r>
 8003f4e:	89a0      	ldrh	r0, [r4, #12]
 8003f50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f54:	f010 0301 	ands.w	r3, r0, #1
 8003f58:	d00a      	beq.n	8003f70 <__swsetup_r+0xbc>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60a3      	str	r3, [r4, #8]
 8003f5e:	6963      	ldr	r3, [r4, #20]
 8003f60:	425b      	negs	r3, r3
 8003f62:	61a3      	str	r3, [r4, #24]
 8003f64:	6923      	ldr	r3, [r4, #16]
 8003f66:	b943      	cbnz	r3, 8003f7a <__swsetup_r+0xc6>
 8003f68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f6c:	d1ba      	bne.n	8003ee4 <__swsetup_r+0x30>
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
 8003f70:	0781      	lsls	r1, r0, #30
 8003f72:	bf58      	it	pl
 8003f74:	6963      	ldrpl	r3, [r4, #20]
 8003f76:	60a3      	str	r3, [r4, #8]
 8003f78:	e7f4      	b.n	8003f64 <__swsetup_r+0xb0>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e7f7      	b.n	8003f6e <__swsetup_r+0xba>
 8003f7e:	bf00      	nop
 8003f80:	20000014 	.word	0x20000014
 8003f84:	080047e0 	.word	0x080047e0
 8003f88:	08004800 	.word	0x08004800
 8003f8c:	080047c0 	.word	0x080047c0

08003f90 <__sflush_r>:
 8003f90:	898a      	ldrh	r2, [r1, #12]
 8003f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f96:	4605      	mov	r5, r0
 8003f98:	0710      	lsls	r0, r2, #28
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	d458      	bmi.n	8004050 <__sflush_r+0xc0>
 8003f9e:	684b      	ldr	r3, [r1, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	dc05      	bgt.n	8003fb0 <__sflush_r+0x20>
 8003fa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	dc02      	bgt.n	8003fb0 <__sflush_r+0x20>
 8003faa:	2000      	movs	r0, #0
 8003fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fb2:	2e00      	cmp	r6, #0
 8003fb4:	d0f9      	beq.n	8003faa <__sflush_r+0x1a>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fbc:	682f      	ldr	r7, [r5, #0]
 8003fbe:	602b      	str	r3, [r5, #0]
 8003fc0:	d032      	beq.n	8004028 <__sflush_r+0x98>
 8003fc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fc4:	89a3      	ldrh	r3, [r4, #12]
 8003fc6:	075a      	lsls	r2, r3, #29
 8003fc8:	d505      	bpl.n	8003fd6 <__sflush_r+0x46>
 8003fca:	6863      	ldr	r3, [r4, #4]
 8003fcc:	1ac0      	subs	r0, r0, r3
 8003fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fd0:	b10b      	cbz	r3, 8003fd6 <__sflush_r+0x46>
 8003fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fd4:	1ac0      	subs	r0, r0, r3
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fdc:	6a21      	ldr	r1, [r4, #32]
 8003fde:	4628      	mov	r0, r5
 8003fe0:	47b0      	blx	r6
 8003fe2:	1c43      	adds	r3, r0, #1
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	d106      	bne.n	8003ff6 <__sflush_r+0x66>
 8003fe8:	6829      	ldr	r1, [r5, #0]
 8003fea:	291d      	cmp	r1, #29
 8003fec:	d82c      	bhi.n	8004048 <__sflush_r+0xb8>
 8003fee:	4a2a      	ldr	r2, [pc, #168]	; (8004098 <__sflush_r+0x108>)
 8003ff0:	40ca      	lsrs	r2, r1
 8003ff2:	07d6      	lsls	r6, r2, #31
 8003ff4:	d528      	bpl.n	8004048 <__sflush_r+0xb8>
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	6062      	str	r2, [r4, #4]
 8003ffa:	04d9      	lsls	r1, r3, #19
 8003ffc:	6922      	ldr	r2, [r4, #16]
 8003ffe:	6022      	str	r2, [r4, #0]
 8004000:	d504      	bpl.n	800400c <__sflush_r+0x7c>
 8004002:	1c42      	adds	r2, r0, #1
 8004004:	d101      	bne.n	800400a <__sflush_r+0x7a>
 8004006:	682b      	ldr	r3, [r5, #0]
 8004008:	b903      	cbnz	r3, 800400c <__sflush_r+0x7c>
 800400a:	6560      	str	r0, [r4, #84]	; 0x54
 800400c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800400e:	602f      	str	r7, [r5, #0]
 8004010:	2900      	cmp	r1, #0
 8004012:	d0ca      	beq.n	8003faa <__sflush_r+0x1a>
 8004014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004018:	4299      	cmp	r1, r3
 800401a:	d002      	beq.n	8004022 <__sflush_r+0x92>
 800401c:	4628      	mov	r0, r5
 800401e:	f000 f9d5 	bl	80043cc <_free_r>
 8004022:	2000      	movs	r0, #0
 8004024:	6360      	str	r0, [r4, #52]	; 0x34
 8004026:	e7c1      	b.n	8003fac <__sflush_r+0x1c>
 8004028:	6a21      	ldr	r1, [r4, #32]
 800402a:	2301      	movs	r3, #1
 800402c:	4628      	mov	r0, r5
 800402e:	47b0      	blx	r6
 8004030:	1c41      	adds	r1, r0, #1
 8004032:	d1c7      	bne.n	8003fc4 <__sflush_r+0x34>
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0c4      	beq.n	8003fc4 <__sflush_r+0x34>
 800403a:	2b1d      	cmp	r3, #29
 800403c:	d001      	beq.n	8004042 <__sflush_r+0xb2>
 800403e:	2b16      	cmp	r3, #22
 8004040:	d101      	bne.n	8004046 <__sflush_r+0xb6>
 8004042:	602f      	str	r7, [r5, #0]
 8004044:	e7b1      	b.n	8003faa <__sflush_r+0x1a>
 8004046:	89a3      	ldrh	r3, [r4, #12]
 8004048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800404c:	81a3      	strh	r3, [r4, #12]
 800404e:	e7ad      	b.n	8003fac <__sflush_r+0x1c>
 8004050:	690f      	ldr	r7, [r1, #16]
 8004052:	2f00      	cmp	r7, #0
 8004054:	d0a9      	beq.n	8003faa <__sflush_r+0x1a>
 8004056:	0793      	lsls	r3, r2, #30
 8004058:	680e      	ldr	r6, [r1, #0]
 800405a:	bf08      	it	eq
 800405c:	694b      	ldreq	r3, [r1, #20]
 800405e:	600f      	str	r7, [r1, #0]
 8004060:	bf18      	it	ne
 8004062:	2300      	movne	r3, #0
 8004064:	eba6 0807 	sub.w	r8, r6, r7
 8004068:	608b      	str	r3, [r1, #8]
 800406a:	f1b8 0f00 	cmp.w	r8, #0
 800406e:	dd9c      	ble.n	8003faa <__sflush_r+0x1a>
 8004070:	6a21      	ldr	r1, [r4, #32]
 8004072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004074:	4643      	mov	r3, r8
 8004076:	463a      	mov	r2, r7
 8004078:	4628      	mov	r0, r5
 800407a:	47b0      	blx	r6
 800407c:	2800      	cmp	r0, #0
 800407e:	dc06      	bgt.n	800408e <__sflush_r+0xfe>
 8004080:	89a3      	ldrh	r3, [r4, #12]
 8004082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004086:	81a3      	strh	r3, [r4, #12]
 8004088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800408c:	e78e      	b.n	8003fac <__sflush_r+0x1c>
 800408e:	4407      	add	r7, r0
 8004090:	eba8 0800 	sub.w	r8, r8, r0
 8004094:	e7e9      	b.n	800406a <__sflush_r+0xda>
 8004096:	bf00      	nop
 8004098:	20400001 	.word	0x20400001

0800409c <_fflush_r>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	690b      	ldr	r3, [r1, #16]
 80040a0:	4605      	mov	r5, r0
 80040a2:	460c      	mov	r4, r1
 80040a4:	b913      	cbnz	r3, 80040ac <_fflush_r+0x10>
 80040a6:	2500      	movs	r5, #0
 80040a8:	4628      	mov	r0, r5
 80040aa:	bd38      	pop	{r3, r4, r5, pc}
 80040ac:	b118      	cbz	r0, 80040b6 <_fflush_r+0x1a>
 80040ae:	6983      	ldr	r3, [r0, #24]
 80040b0:	b90b      	cbnz	r3, 80040b6 <_fflush_r+0x1a>
 80040b2:	f000 f887 	bl	80041c4 <__sinit>
 80040b6:	4b14      	ldr	r3, [pc, #80]	; (8004108 <_fflush_r+0x6c>)
 80040b8:	429c      	cmp	r4, r3
 80040ba:	d11b      	bne.n	80040f4 <_fflush_r+0x58>
 80040bc:	686c      	ldr	r4, [r5, #4]
 80040be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0ef      	beq.n	80040a6 <_fflush_r+0xa>
 80040c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040c8:	07d0      	lsls	r0, r2, #31
 80040ca:	d404      	bmi.n	80040d6 <_fflush_r+0x3a>
 80040cc:	0599      	lsls	r1, r3, #22
 80040ce:	d402      	bmi.n	80040d6 <_fflush_r+0x3a>
 80040d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040d2:	f000 f915 	bl	8004300 <__retarget_lock_acquire_recursive>
 80040d6:	4628      	mov	r0, r5
 80040d8:	4621      	mov	r1, r4
 80040da:	f7ff ff59 	bl	8003f90 <__sflush_r>
 80040de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040e0:	07da      	lsls	r2, r3, #31
 80040e2:	4605      	mov	r5, r0
 80040e4:	d4e0      	bmi.n	80040a8 <_fflush_r+0xc>
 80040e6:	89a3      	ldrh	r3, [r4, #12]
 80040e8:	059b      	lsls	r3, r3, #22
 80040ea:	d4dd      	bmi.n	80040a8 <_fflush_r+0xc>
 80040ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040ee:	f000 f908 	bl	8004302 <__retarget_lock_release_recursive>
 80040f2:	e7d9      	b.n	80040a8 <_fflush_r+0xc>
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <_fflush_r+0x70>)
 80040f6:	429c      	cmp	r4, r3
 80040f8:	d101      	bne.n	80040fe <_fflush_r+0x62>
 80040fa:	68ac      	ldr	r4, [r5, #8]
 80040fc:	e7df      	b.n	80040be <_fflush_r+0x22>
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <_fflush_r+0x74>)
 8004100:	429c      	cmp	r4, r3
 8004102:	bf08      	it	eq
 8004104:	68ec      	ldreq	r4, [r5, #12]
 8004106:	e7da      	b.n	80040be <_fflush_r+0x22>
 8004108:	080047e0 	.word	0x080047e0
 800410c:	08004800 	.word	0x08004800
 8004110:	080047c0 	.word	0x080047c0

08004114 <std>:
 8004114:	2300      	movs	r3, #0
 8004116:	b510      	push	{r4, lr}
 8004118:	4604      	mov	r4, r0
 800411a:	e9c0 3300 	strd	r3, r3, [r0]
 800411e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004122:	6083      	str	r3, [r0, #8]
 8004124:	8181      	strh	r1, [r0, #12]
 8004126:	6643      	str	r3, [r0, #100]	; 0x64
 8004128:	81c2      	strh	r2, [r0, #14]
 800412a:	6183      	str	r3, [r0, #24]
 800412c:	4619      	mov	r1, r3
 800412e:	2208      	movs	r2, #8
 8004130:	305c      	adds	r0, #92	; 0x5c
 8004132:	f7ff fdef 	bl	8003d14 <memset>
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <std+0x38>)
 8004138:	6263      	str	r3, [r4, #36]	; 0x24
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <std+0x3c>)
 800413c:	62a3      	str	r3, [r4, #40]	; 0x28
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <std+0x40>)
 8004140:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <std+0x44>)
 8004144:	6224      	str	r4, [r4, #32]
 8004146:	6323      	str	r3, [r4, #48]	; 0x30
 8004148:	bd10      	pop	{r4, pc}
 800414a:	bf00      	nop
 800414c:	08004541 	.word	0x08004541
 8004150:	08004563 	.word	0x08004563
 8004154:	0800459b 	.word	0x0800459b
 8004158:	080045bf 	.word	0x080045bf

0800415c <_cleanup_r>:
 800415c:	4901      	ldr	r1, [pc, #4]	; (8004164 <_cleanup_r+0x8>)
 800415e:	f000 b8af 	b.w	80042c0 <_fwalk_reent>
 8004162:	bf00      	nop
 8004164:	0800409d 	.word	0x0800409d

08004168 <__sfmoreglue>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	1e4a      	subs	r2, r1, #1
 800416c:	2568      	movs	r5, #104	; 0x68
 800416e:	4355      	muls	r5, r2
 8004170:	460e      	mov	r6, r1
 8004172:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004176:	f000 f979 	bl	800446c <_malloc_r>
 800417a:	4604      	mov	r4, r0
 800417c:	b140      	cbz	r0, 8004190 <__sfmoreglue+0x28>
 800417e:	2100      	movs	r1, #0
 8004180:	e9c0 1600 	strd	r1, r6, [r0]
 8004184:	300c      	adds	r0, #12
 8004186:	60a0      	str	r0, [r4, #8]
 8004188:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800418c:	f7ff fdc2 	bl	8003d14 <memset>
 8004190:	4620      	mov	r0, r4
 8004192:	bd70      	pop	{r4, r5, r6, pc}

08004194 <__sfp_lock_acquire>:
 8004194:	4801      	ldr	r0, [pc, #4]	; (800419c <__sfp_lock_acquire+0x8>)
 8004196:	f000 b8b3 	b.w	8004300 <__retarget_lock_acquire_recursive>
 800419a:	bf00      	nop
 800419c:	20000800 	.word	0x20000800

080041a0 <__sfp_lock_release>:
 80041a0:	4801      	ldr	r0, [pc, #4]	; (80041a8 <__sfp_lock_release+0x8>)
 80041a2:	f000 b8ae 	b.w	8004302 <__retarget_lock_release_recursive>
 80041a6:	bf00      	nop
 80041a8:	20000800 	.word	0x20000800

080041ac <__sinit_lock_acquire>:
 80041ac:	4801      	ldr	r0, [pc, #4]	; (80041b4 <__sinit_lock_acquire+0x8>)
 80041ae:	f000 b8a7 	b.w	8004300 <__retarget_lock_acquire_recursive>
 80041b2:	bf00      	nop
 80041b4:	200007fb 	.word	0x200007fb

080041b8 <__sinit_lock_release>:
 80041b8:	4801      	ldr	r0, [pc, #4]	; (80041c0 <__sinit_lock_release+0x8>)
 80041ba:	f000 b8a2 	b.w	8004302 <__retarget_lock_release_recursive>
 80041be:	bf00      	nop
 80041c0:	200007fb 	.word	0x200007fb

080041c4 <__sinit>:
 80041c4:	b510      	push	{r4, lr}
 80041c6:	4604      	mov	r4, r0
 80041c8:	f7ff fff0 	bl	80041ac <__sinit_lock_acquire>
 80041cc:	69a3      	ldr	r3, [r4, #24]
 80041ce:	b11b      	cbz	r3, 80041d8 <__sinit+0x14>
 80041d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041d4:	f7ff bff0 	b.w	80041b8 <__sinit_lock_release>
 80041d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80041dc:	6523      	str	r3, [r4, #80]	; 0x50
 80041de:	4b13      	ldr	r3, [pc, #76]	; (800422c <__sinit+0x68>)
 80041e0:	4a13      	ldr	r2, [pc, #76]	; (8004230 <__sinit+0x6c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80041e6:	42a3      	cmp	r3, r4
 80041e8:	bf04      	itt	eq
 80041ea:	2301      	moveq	r3, #1
 80041ec:	61a3      	streq	r3, [r4, #24]
 80041ee:	4620      	mov	r0, r4
 80041f0:	f000 f820 	bl	8004234 <__sfp>
 80041f4:	6060      	str	r0, [r4, #4]
 80041f6:	4620      	mov	r0, r4
 80041f8:	f000 f81c 	bl	8004234 <__sfp>
 80041fc:	60a0      	str	r0, [r4, #8]
 80041fe:	4620      	mov	r0, r4
 8004200:	f000 f818 	bl	8004234 <__sfp>
 8004204:	2200      	movs	r2, #0
 8004206:	60e0      	str	r0, [r4, #12]
 8004208:	2104      	movs	r1, #4
 800420a:	6860      	ldr	r0, [r4, #4]
 800420c:	f7ff ff82 	bl	8004114 <std>
 8004210:	68a0      	ldr	r0, [r4, #8]
 8004212:	2201      	movs	r2, #1
 8004214:	2109      	movs	r1, #9
 8004216:	f7ff ff7d 	bl	8004114 <std>
 800421a:	68e0      	ldr	r0, [r4, #12]
 800421c:	2202      	movs	r2, #2
 800421e:	2112      	movs	r1, #18
 8004220:	f7ff ff78 	bl	8004114 <std>
 8004224:	2301      	movs	r3, #1
 8004226:	61a3      	str	r3, [r4, #24]
 8004228:	e7d2      	b.n	80041d0 <__sinit+0xc>
 800422a:	bf00      	nop
 800422c:	080047bc 	.word	0x080047bc
 8004230:	0800415d 	.word	0x0800415d

08004234 <__sfp>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	4607      	mov	r7, r0
 8004238:	f7ff ffac 	bl	8004194 <__sfp_lock_acquire>
 800423c:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <__sfp+0x84>)
 800423e:	681e      	ldr	r6, [r3, #0]
 8004240:	69b3      	ldr	r3, [r6, #24]
 8004242:	b913      	cbnz	r3, 800424a <__sfp+0x16>
 8004244:	4630      	mov	r0, r6
 8004246:	f7ff ffbd 	bl	80041c4 <__sinit>
 800424a:	3648      	adds	r6, #72	; 0x48
 800424c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004250:	3b01      	subs	r3, #1
 8004252:	d503      	bpl.n	800425c <__sfp+0x28>
 8004254:	6833      	ldr	r3, [r6, #0]
 8004256:	b30b      	cbz	r3, 800429c <__sfp+0x68>
 8004258:	6836      	ldr	r6, [r6, #0]
 800425a:	e7f7      	b.n	800424c <__sfp+0x18>
 800425c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004260:	b9d5      	cbnz	r5, 8004298 <__sfp+0x64>
 8004262:	4b16      	ldr	r3, [pc, #88]	; (80042bc <__sfp+0x88>)
 8004264:	60e3      	str	r3, [r4, #12]
 8004266:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800426a:	6665      	str	r5, [r4, #100]	; 0x64
 800426c:	f000 f847 	bl	80042fe <__retarget_lock_init_recursive>
 8004270:	f7ff ff96 	bl	80041a0 <__sfp_lock_release>
 8004274:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004278:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800427c:	6025      	str	r5, [r4, #0]
 800427e:	61a5      	str	r5, [r4, #24]
 8004280:	2208      	movs	r2, #8
 8004282:	4629      	mov	r1, r5
 8004284:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004288:	f7ff fd44 	bl	8003d14 <memset>
 800428c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004290:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004294:	4620      	mov	r0, r4
 8004296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004298:	3468      	adds	r4, #104	; 0x68
 800429a:	e7d9      	b.n	8004250 <__sfp+0x1c>
 800429c:	2104      	movs	r1, #4
 800429e:	4638      	mov	r0, r7
 80042a0:	f7ff ff62 	bl	8004168 <__sfmoreglue>
 80042a4:	4604      	mov	r4, r0
 80042a6:	6030      	str	r0, [r6, #0]
 80042a8:	2800      	cmp	r0, #0
 80042aa:	d1d5      	bne.n	8004258 <__sfp+0x24>
 80042ac:	f7ff ff78 	bl	80041a0 <__sfp_lock_release>
 80042b0:	230c      	movs	r3, #12
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	e7ee      	b.n	8004294 <__sfp+0x60>
 80042b6:	bf00      	nop
 80042b8:	080047bc 	.word	0x080047bc
 80042bc:	ffff0001 	.word	0xffff0001

080042c0 <_fwalk_reent>:
 80042c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042c4:	4606      	mov	r6, r0
 80042c6:	4688      	mov	r8, r1
 80042c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80042cc:	2700      	movs	r7, #0
 80042ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042d2:	f1b9 0901 	subs.w	r9, r9, #1
 80042d6:	d505      	bpl.n	80042e4 <_fwalk_reent+0x24>
 80042d8:	6824      	ldr	r4, [r4, #0]
 80042da:	2c00      	cmp	r4, #0
 80042dc:	d1f7      	bne.n	80042ce <_fwalk_reent+0xe>
 80042de:	4638      	mov	r0, r7
 80042e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042e4:	89ab      	ldrh	r3, [r5, #12]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d907      	bls.n	80042fa <_fwalk_reent+0x3a>
 80042ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042ee:	3301      	adds	r3, #1
 80042f0:	d003      	beq.n	80042fa <_fwalk_reent+0x3a>
 80042f2:	4629      	mov	r1, r5
 80042f4:	4630      	mov	r0, r6
 80042f6:	47c0      	blx	r8
 80042f8:	4307      	orrs	r7, r0
 80042fa:	3568      	adds	r5, #104	; 0x68
 80042fc:	e7e9      	b.n	80042d2 <_fwalk_reent+0x12>

080042fe <__retarget_lock_init_recursive>:
 80042fe:	4770      	bx	lr

08004300 <__retarget_lock_acquire_recursive>:
 8004300:	4770      	bx	lr

08004302 <__retarget_lock_release_recursive>:
 8004302:	4770      	bx	lr

08004304 <__swhatbuf_r>:
 8004304:	b570      	push	{r4, r5, r6, lr}
 8004306:	460e      	mov	r6, r1
 8004308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800430c:	2900      	cmp	r1, #0
 800430e:	b096      	sub	sp, #88	; 0x58
 8004310:	4614      	mov	r4, r2
 8004312:	461d      	mov	r5, r3
 8004314:	da07      	bge.n	8004326 <__swhatbuf_r+0x22>
 8004316:	2300      	movs	r3, #0
 8004318:	602b      	str	r3, [r5, #0]
 800431a:	89b3      	ldrh	r3, [r6, #12]
 800431c:	061a      	lsls	r2, r3, #24
 800431e:	d410      	bmi.n	8004342 <__swhatbuf_r+0x3e>
 8004320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004324:	e00e      	b.n	8004344 <__swhatbuf_r+0x40>
 8004326:	466a      	mov	r2, sp
 8004328:	f000 f970 	bl	800460c <_fstat_r>
 800432c:	2800      	cmp	r0, #0
 800432e:	dbf2      	blt.n	8004316 <__swhatbuf_r+0x12>
 8004330:	9a01      	ldr	r2, [sp, #4]
 8004332:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004336:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800433a:	425a      	negs	r2, r3
 800433c:	415a      	adcs	r2, r3
 800433e:	602a      	str	r2, [r5, #0]
 8004340:	e7ee      	b.n	8004320 <__swhatbuf_r+0x1c>
 8004342:	2340      	movs	r3, #64	; 0x40
 8004344:	2000      	movs	r0, #0
 8004346:	6023      	str	r3, [r4, #0]
 8004348:	b016      	add	sp, #88	; 0x58
 800434a:	bd70      	pop	{r4, r5, r6, pc}

0800434c <__smakebuf_r>:
 800434c:	898b      	ldrh	r3, [r1, #12]
 800434e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004350:	079d      	lsls	r5, r3, #30
 8004352:	4606      	mov	r6, r0
 8004354:	460c      	mov	r4, r1
 8004356:	d507      	bpl.n	8004368 <__smakebuf_r+0x1c>
 8004358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	6123      	str	r3, [r4, #16]
 8004360:	2301      	movs	r3, #1
 8004362:	6163      	str	r3, [r4, #20]
 8004364:	b002      	add	sp, #8
 8004366:	bd70      	pop	{r4, r5, r6, pc}
 8004368:	ab01      	add	r3, sp, #4
 800436a:	466a      	mov	r2, sp
 800436c:	f7ff ffca 	bl	8004304 <__swhatbuf_r>
 8004370:	9900      	ldr	r1, [sp, #0]
 8004372:	4605      	mov	r5, r0
 8004374:	4630      	mov	r0, r6
 8004376:	f000 f879 	bl	800446c <_malloc_r>
 800437a:	b948      	cbnz	r0, 8004390 <__smakebuf_r+0x44>
 800437c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004380:	059a      	lsls	r2, r3, #22
 8004382:	d4ef      	bmi.n	8004364 <__smakebuf_r+0x18>
 8004384:	f023 0303 	bic.w	r3, r3, #3
 8004388:	f043 0302 	orr.w	r3, r3, #2
 800438c:	81a3      	strh	r3, [r4, #12]
 800438e:	e7e3      	b.n	8004358 <__smakebuf_r+0xc>
 8004390:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <__smakebuf_r+0x7c>)
 8004392:	62b3      	str	r3, [r6, #40]	; 0x28
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	6020      	str	r0, [r4, #0]
 8004398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439c:	81a3      	strh	r3, [r4, #12]
 800439e:	9b00      	ldr	r3, [sp, #0]
 80043a0:	6163      	str	r3, [r4, #20]
 80043a2:	9b01      	ldr	r3, [sp, #4]
 80043a4:	6120      	str	r0, [r4, #16]
 80043a6:	b15b      	cbz	r3, 80043c0 <__smakebuf_r+0x74>
 80043a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ac:	4630      	mov	r0, r6
 80043ae:	f000 f93f 	bl	8004630 <_isatty_r>
 80043b2:	b128      	cbz	r0, 80043c0 <__smakebuf_r+0x74>
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	f023 0303 	bic.w	r3, r3, #3
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	81a3      	strh	r3, [r4, #12]
 80043c0:	89a0      	ldrh	r0, [r4, #12]
 80043c2:	4305      	orrs	r5, r0
 80043c4:	81a5      	strh	r5, [r4, #12]
 80043c6:	e7cd      	b.n	8004364 <__smakebuf_r+0x18>
 80043c8:	0800415d 	.word	0x0800415d

080043cc <_free_r>:
 80043cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043ce:	2900      	cmp	r1, #0
 80043d0:	d048      	beq.n	8004464 <_free_r+0x98>
 80043d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d6:	9001      	str	r0, [sp, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f1a1 0404 	sub.w	r4, r1, #4
 80043de:	bfb8      	it	lt
 80043e0:	18e4      	addlt	r4, r4, r3
 80043e2:	f000 f947 	bl	8004674 <__malloc_lock>
 80043e6:	4a20      	ldr	r2, [pc, #128]	; (8004468 <_free_r+0x9c>)
 80043e8:	9801      	ldr	r0, [sp, #4]
 80043ea:	6813      	ldr	r3, [r2, #0]
 80043ec:	4615      	mov	r5, r2
 80043ee:	b933      	cbnz	r3, 80043fe <_free_r+0x32>
 80043f0:	6063      	str	r3, [r4, #4]
 80043f2:	6014      	str	r4, [r2, #0]
 80043f4:	b003      	add	sp, #12
 80043f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043fa:	f000 b941 	b.w	8004680 <__malloc_unlock>
 80043fe:	42a3      	cmp	r3, r4
 8004400:	d90b      	bls.n	800441a <_free_r+0x4e>
 8004402:	6821      	ldr	r1, [r4, #0]
 8004404:	1862      	adds	r2, r4, r1
 8004406:	4293      	cmp	r3, r2
 8004408:	bf04      	itt	eq
 800440a:	681a      	ldreq	r2, [r3, #0]
 800440c:	685b      	ldreq	r3, [r3, #4]
 800440e:	6063      	str	r3, [r4, #4]
 8004410:	bf04      	itt	eq
 8004412:	1852      	addeq	r2, r2, r1
 8004414:	6022      	streq	r2, [r4, #0]
 8004416:	602c      	str	r4, [r5, #0]
 8004418:	e7ec      	b.n	80043f4 <_free_r+0x28>
 800441a:	461a      	mov	r2, r3
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	b10b      	cbz	r3, 8004424 <_free_r+0x58>
 8004420:	42a3      	cmp	r3, r4
 8004422:	d9fa      	bls.n	800441a <_free_r+0x4e>
 8004424:	6811      	ldr	r1, [r2, #0]
 8004426:	1855      	adds	r5, r2, r1
 8004428:	42a5      	cmp	r5, r4
 800442a:	d10b      	bne.n	8004444 <_free_r+0x78>
 800442c:	6824      	ldr	r4, [r4, #0]
 800442e:	4421      	add	r1, r4
 8004430:	1854      	adds	r4, r2, r1
 8004432:	42a3      	cmp	r3, r4
 8004434:	6011      	str	r1, [r2, #0]
 8004436:	d1dd      	bne.n	80043f4 <_free_r+0x28>
 8004438:	681c      	ldr	r4, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	6053      	str	r3, [r2, #4]
 800443e:	4421      	add	r1, r4
 8004440:	6011      	str	r1, [r2, #0]
 8004442:	e7d7      	b.n	80043f4 <_free_r+0x28>
 8004444:	d902      	bls.n	800444c <_free_r+0x80>
 8004446:	230c      	movs	r3, #12
 8004448:	6003      	str	r3, [r0, #0]
 800444a:	e7d3      	b.n	80043f4 <_free_r+0x28>
 800444c:	6825      	ldr	r5, [r4, #0]
 800444e:	1961      	adds	r1, r4, r5
 8004450:	428b      	cmp	r3, r1
 8004452:	bf04      	itt	eq
 8004454:	6819      	ldreq	r1, [r3, #0]
 8004456:	685b      	ldreq	r3, [r3, #4]
 8004458:	6063      	str	r3, [r4, #4]
 800445a:	bf04      	itt	eq
 800445c:	1949      	addeq	r1, r1, r5
 800445e:	6021      	streq	r1, [r4, #0]
 8004460:	6054      	str	r4, [r2, #4]
 8004462:	e7c7      	b.n	80043f4 <_free_r+0x28>
 8004464:	b003      	add	sp, #12
 8004466:	bd30      	pop	{r4, r5, pc}
 8004468:	20000734 	.word	0x20000734

0800446c <_malloc_r>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	1ccd      	adds	r5, r1, #3
 8004470:	f025 0503 	bic.w	r5, r5, #3
 8004474:	3508      	adds	r5, #8
 8004476:	2d0c      	cmp	r5, #12
 8004478:	bf38      	it	cc
 800447a:	250c      	movcc	r5, #12
 800447c:	2d00      	cmp	r5, #0
 800447e:	4606      	mov	r6, r0
 8004480:	db01      	blt.n	8004486 <_malloc_r+0x1a>
 8004482:	42a9      	cmp	r1, r5
 8004484:	d903      	bls.n	800448e <_malloc_r+0x22>
 8004486:	230c      	movs	r3, #12
 8004488:	6033      	str	r3, [r6, #0]
 800448a:	2000      	movs	r0, #0
 800448c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800448e:	f000 f8f1 	bl	8004674 <__malloc_lock>
 8004492:	4921      	ldr	r1, [pc, #132]	; (8004518 <_malloc_r+0xac>)
 8004494:	680a      	ldr	r2, [r1, #0]
 8004496:	4614      	mov	r4, r2
 8004498:	b99c      	cbnz	r4, 80044c2 <_malloc_r+0x56>
 800449a:	4f20      	ldr	r7, [pc, #128]	; (800451c <_malloc_r+0xb0>)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	b923      	cbnz	r3, 80044aa <_malloc_r+0x3e>
 80044a0:	4621      	mov	r1, r4
 80044a2:	4630      	mov	r0, r6
 80044a4:	f000 f83c 	bl	8004520 <_sbrk_r>
 80044a8:	6038      	str	r0, [r7, #0]
 80044aa:	4629      	mov	r1, r5
 80044ac:	4630      	mov	r0, r6
 80044ae:	f000 f837 	bl	8004520 <_sbrk_r>
 80044b2:	1c43      	adds	r3, r0, #1
 80044b4:	d123      	bne.n	80044fe <_malloc_r+0x92>
 80044b6:	230c      	movs	r3, #12
 80044b8:	6033      	str	r3, [r6, #0]
 80044ba:	4630      	mov	r0, r6
 80044bc:	f000 f8e0 	bl	8004680 <__malloc_unlock>
 80044c0:	e7e3      	b.n	800448a <_malloc_r+0x1e>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	1b5b      	subs	r3, r3, r5
 80044c6:	d417      	bmi.n	80044f8 <_malloc_r+0x8c>
 80044c8:	2b0b      	cmp	r3, #11
 80044ca:	d903      	bls.n	80044d4 <_malloc_r+0x68>
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	441c      	add	r4, r3
 80044d0:	6025      	str	r5, [r4, #0]
 80044d2:	e004      	b.n	80044de <_malloc_r+0x72>
 80044d4:	6863      	ldr	r3, [r4, #4]
 80044d6:	42a2      	cmp	r2, r4
 80044d8:	bf0c      	ite	eq
 80044da:	600b      	streq	r3, [r1, #0]
 80044dc:	6053      	strne	r3, [r2, #4]
 80044de:	4630      	mov	r0, r6
 80044e0:	f000 f8ce 	bl	8004680 <__malloc_unlock>
 80044e4:	f104 000b 	add.w	r0, r4, #11
 80044e8:	1d23      	adds	r3, r4, #4
 80044ea:	f020 0007 	bic.w	r0, r0, #7
 80044ee:	1ac2      	subs	r2, r0, r3
 80044f0:	d0cc      	beq.n	800448c <_malloc_r+0x20>
 80044f2:	1a1b      	subs	r3, r3, r0
 80044f4:	50a3      	str	r3, [r4, r2]
 80044f6:	e7c9      	b.n	800448c <_malloc_r+0x20>
 80044f8:	4622      	mov	r2, r4
 80044fa:	6864      	ldr	r4, [r4, #4]
 80044fc:	e7cc      	b.n	8004498 <_malloc_r+0x2c>
 80044fe:	1cc4      	adds	r4, r0, #3
 8004500:	f024 0403 	bic.w	r4, r4, #3
 8004504:	42a0      	cmp	r0, r4
 8004506:	d0e3      	beq.n	80044d0 <_malloc_r+0x64>
 8004508:	1a21      	subs	r1, r4, r0
 800450a:	4630      	mov	r0, r6
 800450c:	f000 f808 	bl	8004520 <_sbrk_r>
 8004510:	3001      	adds	r0, #1
 8004512:	d1dd      	bne.n	80044d0 <_malloc_r+0x64>
 8004514:	e7cf      	b.n	80044b6 <_malloc_r+0x4a>
 8004516:	bf00      	nop
 8004518:	20000734 	.word	0x20000734
 800451c:	20000738 	.word	0x20000738

08004520 <_sbrk_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4d06      	ldr	r5, [pc, #24]	; (800453c <_sbrk_r+0x1c>)
 8004524:	2300      	movs	r3, #0
 8004526:	4604      	mov	r4, r0
 8004528:	4608      	mov	r0, r1
 800452a:	602b      	str	r3, [r5, #0]
 800452c:	f7fc fddc 	bl	80010e8 <_sbrk>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_sbrk_r+0x1a>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b103      	cbz	r3, 800453a <_sbrk_r+0x1a>
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	20000804 	.word	0x20000804

08004540 <__sread>:
 8004540:	b510      	push	{r4, lr}
 8004542:	460c      	mov	r4, r1
 8004544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004548:	f000 f8a0 	bl	800468c <_read_r>
 800454c:	2800      	cmp	r0, #0
 800454e:	bfab      	itete	ge
 8004550:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004552:	89a3      	ldrhlt	r3, [r4, #12]
 8004554:	181b      	addge	r3, r3, r0
 8004556:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800455a:	bfac      	ite	ge
 800455c:	6563      	strge	r3, [r4, #84]	; 0x54
 800455e:	81a3      	strhlt	r3, [r4, #12]
 8004560:	bd10      	pop	{r4, pc}

08004562 <__swrite>:
 8004562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004566:	461f      	mov	r7, r3
 8004568:	898b      	ldrh	r3, [r1, #12]
 800456a:	05db      	lsls	r3, r3, #23
 800456c:	4605      	mov	r5, r0
 800456e:	460c      	mov	r4, r1
 8004570:	4616      	mov	r6, r2
 8004572:	d505      	bpl.n	8004580 <__swrite+0x1e>
 8004574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004578:	2302      	movs	r3, #2
 800457a:	2200      	movs	r2, #0
 800457c:	f000 f868 	bl	8004650 <_lseek_r>
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800458a:	81a3      	strh	r3, [r4, #12]
 800458c:	4632      	mov	r2, r6
 800458e:	463b      	mov	r3, r7
 8004590:	4628      	mov	r0, r5
 8004592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004596:	f000 b817 	b.w	80045c8 <_write_r>

0800459a <__sseek>:
 800459a:	b510      	push	{r4, lr}
 800459c:	460c      	mov	r4, r1
 800459e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a2:	f000 f855 	bl	8004650 <_lseek_r>
 80045a6:	1c43      	adds	r3, r0, #1
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	bf15      	itete	ne
 80045ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80045ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045b6:	81a3      	strheq	r3, [r4, #12]
 80045b8:	bf18      	it	ne
 80045ba:	81a3      	strhne	r3, [r4, #12]
 80045bc:	bd10      	pop	{r4, pc}

080045be <__sclose>:
 80045be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c2:	f000 b813 	b.w	80045ec <_close_r>
	...

080045c8 <_write_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4d07      	ldr	r5, [pc, #28]	; (80045e8 <_write_r+0x20>)
 80045cc:	4604      	mov	r4, r0
 80045ce:	4608      	mov	r0, r1
 80045d0:	4611      	mov	r1, r2
 80045d2:	2200      	movs	r2, #0
 80045d4:	602a      	str	r2, [r5, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	f7fc fd35 	bl	8001046 <_write>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d102      	bne.n	80045e6 <_write_r+0x1e>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	b103      	cbz	r3, 80045e6 <_write_r+0x1e>
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	20000804 	.word	0x20000804

080045ec <_close_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4d06      	ldr	r5, [pc, #24]	; (8004608 <_close_r+0x1c>)
 80045f0:	2300      	movs	r3, #0
 80045f2:	4604      	mov	r4, r0
 80045f4:	4608      	mov	r0, r1
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	f7fc fd41 	bl	800107e <_close>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_close_r+0x1a>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_close_r+0x1a>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	20000804 	.word	0x20000804

0800460c <_fstat_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4d07      	ldr	r5, [pc, #28]	; (800462c <_fstat_r+0x20>)
 8004610:	2300      	movs	r3, #0
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	4611      	mov	r1, r2
 8004618:	602b      	str	r3, [r5, #0]
 800461a:	f7fc fd3c 	bl	8001096 <_fstat>
 800461e:	1c43      	adds	r3, r0, #1
 8004620:	d102      	bne.n	8004628 <_fstat_r+0x1c>
 8004622:	682b      	ldr	r3, [r5, #0]
 8004624:	b103      	cbz	r3, 8004628 <_fstat_r+0x1c>
 8004626:	6023      	str	r3, [r4, #0]
 8004628:	bd38      	pop	{r3, r4, r5, pc}
 800462a:	bf00      	nop
 800462c:	20000804 	.word	0x20000804

08004630 <_isatty_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4d06      	ldr	r5, [pc, #24]	; (800464c <_isatty_r+0x1c>)
 8004634:	2300      	movs	r3, #0
 8004636:	4604      	mov	r4, r0
 8004638:	4608      	mov	r0, r1
 800463a:	602b      	str	r3, [r5, #0]
 800463c:	f7fc fd3b 	bl	80010b6 <_isatty>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d102      	bne.n	800464a <_isatty_r+0x1a>
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	b103      	cbz	r3, 800464a <_isatty_r+0x1a>
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	bd38      	pop	{r3, r4, r5, pc}
 800464c:	20000804 	.word	0x20000804

08004650 <_lseek_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	4d07      	ldr	r5, [pc, #28]	; (8004670 <_lseek_r+0x20>)
 8004654:	4604      	mov	r4, r0
 8004656:	4608      	mov	r0, r1
 8004658:	4611      	mov	r1, r2
 800465a:	2200      	movs	r2, #0
 800465c:	602a      	str	r2, [r5, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	f7fc fd34 	bl	80010cc <_lseek>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d102      	bne.n	800466e <_lseek_r+0x1e>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	b103      	cbz	r3, 800466e <_lseek_r+0x1e>
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	20000804 	.word	0x20000804

08004674 <__malloc_lock>:
 8004674:	4801      	ldr	r0, [pc, #4]	; (800467c <__malloc_lock+0x8>)
 8004676:	f7ff be43 	b.w	8004300 <__retarget_lock_acquire_recursive>
 800467a:	bf00      	nop
 800467c:	200007fc 	.word	0x200007fc

08004680 <__malloc_unlock>:
 8004680:	4801      	ldr	r0, [pc, #4]	; (8004688 <__malloc_unlock+0x8>)
 8004682:	f7ff be3e 	b.w	8004302 <__retarget_lock_release_recursive>
 8004686:	bf00      	nop
 8004688:	200007fc 	.word	0x200007fc

0800468c <_read_r>:
 800468c:	b538      	push	{r3, r4, r5, lr}
 800468e:	4d07      	ldr	r5, [pc, #28]	; (80046ac <_read_r+0x20>)
 8004690:	4604      	mov	r4, r0
 8004692:	4608      	mov	r0, r1
 8004694:	4611      	mov	r1, r2
 8004696:	2200      	movs	r2, #0
 8004698:	602a      	str	r2, [r5, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	f7fc fcb6 	bl	800100c <_read>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_read_r+0x1e>
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_read_r+0x1e>
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	20000804 	.word	0x20000804

080046b0 <_init>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	bf00      	nop
 80046b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b6:	bc08      	pop	{r3}
 80046b8:	469e      	mov	lr, r3
 80046ba:	4770      	bx	lr

080046bc <_fini>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr
