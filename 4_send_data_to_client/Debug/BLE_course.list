
BLE_course.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004384  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004648  08004648  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004648  08004648  00014648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004650  08004650  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004650  08004650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  20000078  080046d0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  080046d0  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204e6  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b9  00000000  00000000  0004058e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00043948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  000449b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019995  00000000  00000000  000458f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d78  00000000  00000000  0005f28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000922c6  00000000  00000000  00074005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001062cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b58  00000000  00000000  00106320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004504 	.word	0x08004504

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08004504 	.word	0x08004504

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80004e4:	2006      	movs	r0, #6
 80004e6:	f000 fffa 	bl	80014de <HAL_NVIC_EnableIRQ>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}

080004ee <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80004f2:	2006      	movs	r0, #6
 80004f4:	f001 f801 	bl	80014fa <HAL_NVIC_DisableIRQ>
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	4b20      	ldr	r3, [pc, #128]	; (800058c <HCI_TL_SPI_Init+0x90>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	4a1f      	ldr	r2, [pc, #124]	; (800058c <HCI_TL_SPI_Init+0x90>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6313      	str	r3, [r2, #48]	; 0x30
 8000514:	4b1d      	ldr	r3, [pc, #116]	; (800058c <HCI_TL_SPI_Init+0x90>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000520:	2301      	movs	r3, #1
 8000522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000524:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	4619      	mov	r1, r3
 8000534:	4816      	ldr	r0, [pc, #88]	; (8000590 <HCI_TL_SPI_Init+0x94>)
 8000536:	f001 f84d 	bl	80015d4 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800053a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800053e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	4619      	mov	r1, r3
 8000552:	480f      	ldr	r0, [pc, #60]	; (8000590 <HCI_TL_SPI_Init+0x94>)
 8000554:	f001 f83e 	bl	80015d4 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000558:	2302      	movs	r3, #2
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <HCI_TL_SPI_Init+0x94>)
 8000570:	f001 f830 	bl	80015d4 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2102      	movs	r1, #2
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <HCI_TL_SPI_Init+0x94>)
 800057a:	f001 faab 	bl	8001ad4 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 800057e:	f000 fa23 	bl	80009c8 <BSP_SPI1_Init>
 8000582:	4603      	mov	r3, r0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40023800 	.word	0x40023800
 8000590:	40020000 	.word	0x40020000

08000594 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000598:	2101      	movs	r1, #1
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <HCI_TL_SPI_DeInit+0x24>)
 800059c:	f001 f99e 	bl	80018dc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80005a0:	2102      	movs	r1, #2
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <HCI_TL_SPI_DeInit+0x24>)
 80005a4:	f001 f99a 	bl	80018dc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80005a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <HCI_TL_SPI_DeInit+0x24>)
 80005ae:	f001 f995 	bl	80018dc <HAL_GPIO_DeInit>
  return 0;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40020000 	.word	0x40020000

080005bc <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2102      	movs	r1, #2
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <HCI_TL_SPI_Reset+0x38>)
 80005c6:	f001 fa85 	bl	8001ad4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <HCI_TL_SPI_Reset+0x38>)
 80005d2:	f001 fa7f 	bl	8001ad4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005d6:	2005      	movs	r0, #5
 80005d8:	f000 fe42 	bl	8001260 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e2:	4804      	ldr	r0, [pc, #16]	; (80005f4 <HCI_TL_SPI_Reset+0x38>)
 80005e4:	f001 fa76 	bl	8001ad4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005e8:	2005      	movs	r0, #5
 80005ea:	f000 fe39 	bl	8001260 <HAL_Delay>
  return 0;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40020000 	.word	0x40020000

080005f8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8000608:	2300      	movs	r3, #0
 800060a:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800060c:	4a30      	ldr	r2, [pc, #192]	; (80006d0 <HCI_TL_SPI_Receive+0xd8>)
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000616:	6018      	str	r0, [r3, #0]
 8000618:	3304      	adds	r3, #4
 800061a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 800061c:	f7ff ff67 	bl	80004ee <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2102      	movs	r1, #2
 8000624:	482b      	ldr	r0, [pc, #172]	; (80006d4 <HCI_TL_SPI_Receive+0xdc>)
 8000626:	f001 fa55 	bl	8001ad4 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800062a:	f107 0108 	add.w	r1, r7, #8
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	2205      	movs	r2, #5
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f9f7 	bl	8000a28 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 800063a:	7b3b      	ldrb	r3, [r7, #12]
 800063c:	021b      	lsls	r3, r3, #8
 800063e:	b21a      	sxth	r2, r3
 8000640:	7afb      	ldrb	r3, [r7, #11]
 8000642:	b21b      	sxth	r3, r3
 8000644:	4313      	orrs	r3, r2
 8000646:	b21b      	sxth	r3, r3
 8000648:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 800064a:	8bfb      	ldrh	r3, [r7, #30]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d01e      	beq.n	800068e <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8000650:	8bfa      	ldrh	r2, [r7, #30]
 8000652:	887b      	ldrh	r3, [r7, #2]
 8000654:	429a      	cmp	r2, r3
 8000656:	d901      	bls.n	800065c <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 8000658:	887b      	ldrh	r3, [r7, #2]
 800065a:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 800065c:	2300      	movs	r3, #0
 800065e:	777b      	strb	r3, [r7, #29]
 8000660:	e010      	b.n	8000684 <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8000662:	f107 0116 	add.w	r1, r7, #22
 8000666:	f107 0317 	add.w	r3, r7, #23
 800066a:	2201      	movs	r2, #1
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f9db 	bl	8000a28 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8000672:	7f7b      	ldrb	r3, [r7, #29]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	7dba      	ldrb	r2, [r7, #22]
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 800067e:	7f7b      	ldrb	r3, [r7, #29]
 8000680:	3301      	adds	r3, #1
 8000682:	777b      	strb	r3, [r7, #29]
 8000684:	7f7b      	ldrb	r3, [r7, #29]
 8000686:	b29b      	uxth	r3, r3
 8000688:	8bfa      	ldrh	r2, [r7, #30]
 800068a:	429a      	cmp	r2, r3
 800068c:	d8e9      	bhi.n	8000662 <HCI_TL_SPI_Receive+0x6a>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 800068e:	f000 fddb 	bl	8001248 <HAL_GetTick>
 8000692:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000694:	e006      	b.n	80006a4 <HCI_TL_SPI_Receive+0xac>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8000696:	2101      	movs	r1, #1
 8000698:	480e      	ldr	r0, [pc, #56]	; (80006d4 <HCI_TL_SPI_Receive+0xdc>)
 800069a:	f001 fa03 	bl	8001aa4 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d008      	beq.n	80006b6 <HCI_TL_SPI_Receive+0xbe>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80006a4:	f000 fdd0 	bl	8001248 <HAL_GetTick>
 80006a8:	4602      	mov	r2, r0
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006b2:	d3f0      	bcc.n	8000696 <HCI_TL_SPI_Receive+0x9e>
 80006b4:	e000      	b.n	80006b8 <HCI_TL_SPI_Receive+0xc0>
      break;
 80006b6:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80006b8:	f7ff ff12 	bl	80004e0 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2102      	movs	r1, #2
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <HCI_TL_SPI_Receive+0xdc>)
 80006c2:	f001 fa07 	bl	8001ad4 <HAL_GPIO_WritePin>

  return len;
 80006c6:	7f7b      	ldrb	r3, [r7, #29]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	0800451c 	.word	0x0800451c
 80006d4:	40020000 	.word	0x40020000

080006d8 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80006e4:	4a3f      	ldr	r2, [pc, #252]	; (80007e4 <HCI_TL_SPI_Send+0x10c>)
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ee:	6018      	str	r0, [r3, #0]
 80006f0:	3304      	adds	r3, #4
 80006f2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80006f4:	f000 fda8 	bl	8001248 <HAL_GetTick>
 80006f8:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80006fa:	f7ff fef8 	bl	80004ee <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 80006fe:	f000 fda3 	bl	8001248 <HAL_GetTick>
 8000702:	61f8      	str	r0, [r7, #28]

    result = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2102      	movs	r1, #2
 800070c:	4836      	ldr	r0, [pc, #216]	; (80007e8 <HCI_TL_SPI_Send+0x110>)
 800070e:	f001 f9e1 	bl	8001ad4 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8000712:	e00a      	b.n	800072a <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8000714:	f000 fd98 	bl	8001248 <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	2b0f      	cmp	r3, #15
 8000720:	d903      	bls.n	800072a <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 8000722:	f06f 0302 	mvn.w	r3, #2
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8000728:	e004      	b.n	8000734 <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 800072a:	f000 f861 	bl	80007f0 <IsDataAvailable>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d0ef      	beq.n	8000714 <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	f113 0f03 	cmn.w	r3, #3
 800073a:	d105      	bne.n	8000748 <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	2102      	movs	r1, #2
 8000740:	4829      	ldr	r0, [pc, #164]	; (80007e8 <HCI_TL_SPI_Send+0x110>)
 8000742:	f001 f9c7 	bl	8001ad4 <HAL_GPIO_WritePin>
      break;
 8000746:	e030      	b.n	80007aa <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000748:	f107 010c 	add.w	r1, r7, #12
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2205      	movs	r2, #5
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f968 	bl	8000a28 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8000758:	7bbb      	ldrb	r3, [r7, #14]
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	b21a      	sxth	r2, r3
 800075e:	7b7b      	ldrb	r3, [r7, #13]
 8000760:	b21b      	sxth	r3, r3
 8000762:	4313      	orrs	r3, r2
 8000764:	b21b      	sxth	r3, r3
 8000766:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8000768:	8b7a      	ldrh	r2, [r7, #26]
 800076a:	887b      	ldrh	r3, [r7, #2]
 800076c:	429a      	cmp	r2, r3
 800076e:	d306      	bcc.n	800077e <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000770:	887b      	ldrh	r3, [r7, #2]
 8000772:	461a      	mov	r2, r3
 8000774:	491d      	ldr	r1, [pc, #116]	; (80007ec <HCI_TL_SPI_Send+0x114>)
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f000 f956 	bl	8000a28 <BSP_SPI1_SendRecv>
 800077c:	e002      	b.n	8000784 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 800077e:	f06f 0301 	mvn.w	r3, #1
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2102      	movs	r1, #2
 8000788:	4817      	ldr	r0, [pc, #92]	; (80007e8 <HCI_TL_SPI_Send+0x110>)
 800078a:	f001 f9a3 	bl	8001ad4 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800078e:	f000 fd5b 	bl	8001248 <HAL_GetTick>
 8000792:	4602      	mov	r2, r0
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	2b0f      	cmp	r3, #15
 800079a:	d903      	bls.n	80007a4 <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 800079c:	f06f 0302 	mvn.w	r3, #2
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80007a2:	e002      	b.n	80007aa <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 80007a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	dba9      	blt.n	80006fe <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 80007aa:	f000 fd4d 	bl	8001248 <HAL_GetTick>
 80007ae:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80007b0:	e006      	b.n	80007c0 <HCI_TL_SPI_Send+0xe8>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80007b2:	2101      	movs	r1, #1
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <HCI_TL_SPI_Send+0x110>)
 80007b6:	f001 f975 	bl	8001aa4 <HAL_GPIO_ReadPin>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d008      	beq.n	80007d2 <HCI_TL_SPI_Send+0xfa>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80007c0:	f000 fd42 	bl	8001248 <HAL_GetTick>
 80007c4:	4602      	mov	r2, r0
 80007c6:	6a3b      	ldr	r3, [r7, #32]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007ce:	d3f0      	bcc.n	80007b2 <HCI_TL_SPI_Send+0xda>
 80007d0:	e000      	b.n	80007d4 <HCI_TL_SPI_Send+0xfc>
      break;
 80007d2:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80007d4:	f7ff fe84 	bl	80004e0 <HCI_TL_SPI_Enable_IRQ>

  return result;
 80007d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	08004524 	.word	0x08004524
 80007e8:	40020000 	.word	0x40020000
 80007ec:	20000094 	.word	0x20000094

080007f0 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80007f4:	2101      	movs	r1, #1
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <IsDataAvailable+0x1c>)
 80007f8:	f001 f954 	bl	8001aa4 <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	bf0c      	ite	eq
 8000802:	2301      	moveq	r3, #1
 8000804:	2300      	movne	r3, #0
 8000806:	b2db      	uxtb	r3, r3
}
 8000808:	4618      	mov	r0, r3
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40020000 	.word	0x40020000

08000810 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <hci_tl_lowlevel_init+0x54>)
 8000818:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <hci_tl_lowlevel_init+0x58>)
 800081c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <hci_tl_lowlevel_init+0x5c>)
 8000820:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <hci_tl_lowlevel_init+0x60>)
 8000824:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <hci_tl_lowlevel_init+0x64>)
 8000828:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <hci_tl_lowlevel_init+0x68>)
 800082c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f002 fec3 	bl	80035bc <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000836:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 800083a:	4810      	ldr	r0, [pc, #64]	; (800087c <hci_tl_lowlevel_init+0x6c>)
 800083c:	f000 fe91 	bl	8001562 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000840:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <hci_tl_lowlevel_init+0x70>)
 8000842:	2100      	movs	r1, #0
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <hci_tl_lowlevel_init+0x6c>)
 8000846:	f000 fe72 	bl	800152e <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2006      	movs	r0, #6
 8000850:	f000 fe29 	bl	80014a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000854:	2006      	movs	r0, #6
 8000856:	f000 fe42 	bl	80014de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800085a:	bf00      	nop
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	080004fd 	.word	0x080004fd
 8000868:	08000595 	.word	0x08000595
 800086c:	080006d9 	.word	0x080006d9
 8000870:	080005f9 	.word	0x080005f9
 8000874:	080005bd 	.word	0x080005bd
 8000878:	08000a69 	.word	0x08000a69
 800087c:	2000073c 	.word	0x2000073c
 8000880:	08000885 	.word	0x08000885

08000884 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000888:	e005      	b.n	8000896 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800088a:	2000      	movs	r0, #0
 800088c:	f002 ffd0 	bl	8003830 <hci_notify_asynch_evt>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d105      	bne.n	80008a2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8000896:	f7ff ffab 	bl	80007f0 <IsDataAvailable>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f4      	bne.n	800088a <hci_tl_lowlevel_isr+0x6>
 80008a0:	e000      	b.n	80008a4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80008a2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <bluenrg_init>:
#include "stdlib.h"

#define bdaddre_size 6
uint8_t SERVER_BDARR[]={0x01,0x02,0x03,0x04,0x05,0x6};
void bluenrg_init(void)
	{
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af02      	add	r7, sp, #8
	const char *name ="Trix";
 80008ae:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <bluenrg_init+0xc0>)
 80008b0:	617b      	str	r3, [r7, #20]
	tBleStatus ret;
	uint8_t bdaddre[bdaddre_size];
	BLUENRG_memcpy(bdaddre,SERVER_BDARR,sizeof(SERVER_BDARR));
 80008b2:	4a2e      	ldr	r2, [pc, #184]	; (800096c <bluenrg_init+0xc4>)
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008bc:	6018      	str	r0, [r3, #0]
 80008be:	3304      	adds	r3, #4
 80008c0:	8019      	strh	r1, [r3, #0]
	 * 5.Initialize GAP service
	 * 6.Update characteristics
	 * 7.Add custom service
	 * */
	/*1.*/
	hci_init(0,0);
 80008c2:	2100      	movs	r1, #0
 80008c4:	2000      	movs	r0, #0
 80008c6:	f002 fe37 	bl	8003538 <hci_init>
	hci_reset();
 80008ca:	f002 fad9 	bl	8002e80 <hci_reset>
	HAL_Delay(100);
 80008ce:	2064      	movs	r0, #100	; 0x64
 80008d0:	f000 fcc6 	bl	8001260 <HAL_Delay>
	ret=aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,CONFIG_DATA_PUBADDR_LEN, bdaddre);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	461a      	mov	r2, r3
 80008da:	2106      	movs	r1, #6
 80008dc:	2000      	movs	r0, #0
 80008de:	f002 fd20 	bl	8003322 <aci_hal_write_config_data>
 80008e2:	4603      	mov	r3, r0
 80008e4:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_hal_write_config_data failed \r\n");}
 80008e6:	7cfb      	ldrb	r3, [r7, #19]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <bluenrg_init+0x4a>
 80008ec:	4820      	ldr	r0, [pc, #128]	; (8000970 <bluenrg_init+0xc8>)
 80008ee:	f003 f9b1 	bl	8003c54 <puts>
	ret=aci_gatt_init();
 80008f2:	f002 fc5e 	bl	80031b2 <aci_gatt_init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_init failed \r\n");}
 80008fa:	7cfb      	ldrb	r3, [r7, #19]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <bluenrg_init+0x5e>
 8000900:	481c      	ldr	r0, [pc, #112]	; (8000974 <bluenrg_init+0xcc>)
 8000902:	f003 f9a7 	bl	8003c54 <puts>
	ret=aci_gap_init(GAP_PERIPHERAL_ROLE,0,0x07,&service_handle,&dev_name_char_handle,&appearance_char_handle);
 8000906:	f107 020a 	add.w	r2, r7, #10
 800090a:	1dbb      	adds	r3, r7, #6
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	4613      	mov	r3, r2
 8000916:	2207      	movs	r2, #7
 8000918:	2100      	movs	r1, #0
 800091a:	2001      	movs	r0, #1
 800091c:	f002 fbbe 	bl	800309c <aci_gap_init>
 8000920:	4603      	mov	r3, r0
 8000922:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gap_init failed \r\n");}
 8000924:	7cfb      	ldrb	r3, [r7, #19]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d002      	beq.n	8000930 <bluenrg_init+0x88>
 800092a:	4813      	ldr	r0, [pc, #76]	; (8000978 <bluenrg_init+0xd0>)
 800092c:	f003 f992 	bl	8003c54 <puts>
	ret=aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t*)name);
 8000930:	897c      	ldrh	r4, [r7, #10]
 8000932:	893d      	ldrh	r5, [r7, #8]
 8000934:	6978      	ldr	r0, [r7, #20]
 8000936:	f7ff fc4f 	bl	80001d8 <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	b2da      	uxtb	r2, r3
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	4613      	mov	r3, r2
 8000944:	2200      	movs	r2, #0
 8000946:	4629      	mov	r1, r5
 8000948:	4620      	mov	r0, r4
 800094a:	f002 fc5c 	bl	8003206 <aci_gatt_update_char_value>
 800094e:	4603      	mov	r3, r0
 8000950:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_update_char_value failed \r\n");}
 8000952:	7cfb      	ldrb	r3, [r7, #19]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <bluenrg_init+0xb6>
 8000958:	4808      	ldr	r0, [pc, #32]	; (800097c <bluenrg_init+0xd4>)
 800095a:	f003 f97b 	bl	8003c54 <puts>
	//add custom service
	}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bdb0      	pop	{r4, r5, r7, pc}
 8000966:	bf00      	nop
 8000968:	0800452c 	.word	0x0800452c
 800096c:	20000000 	.word	0x20000000
 8000970:	08004534 	.word	0x08004534
 8000974:	08004558 	.word	0x08004558
 8000978:	08004570 	.word	0x08004570
 800097c:	08004588 	.word	0x08004588

08000980 <bluenrg_process>:

void bluenrg_process(void)
		{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af08      	add	r7, sp, #32
			tBleStatus ret;
			uint8_t local_name[]={AD_TYPE_COMPLETE_LOCAL_NAME,'B','L','E','-','G','-','U','P'};
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <bluenrg_process+0x44>)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	ca07      	ldmia	r2, {r0, r1, r2}
 800098c:	c303      	stmia	r3!, {r0, r1}
 800098e:	701a      	strb	r2, [r3, #0]
			ret=aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR,
 8000990:	2300      	movs	r3, #0
 8000992:	9306      	str	r3, [sp, #24]
 8000994:	2300      	movs	r3, #0
 8000996:	9305      	str	r3, [sp, #20]
 8000998:	2300      	movs	r3, #0
 800099a:	9304      	str	r3, [sp, #16]
 800099c:	2300      	movs	r3, #0
 800099e:	9303      	str	r3, [sp, #12]
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	9302      	str	r3, [sp, #8]
 80009a4:	2309      	movs	r3, #9
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2300      	movs	r3, #0
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2000      	movs	r0, #0
 80009b4:	f002 fa8d 	bl	8002ed2 <aci_gap_set_discoverable>
 80009b8:	4603      	mov	r3, r0
 80009ba:	73fb      	strb	r3, [r7, #15]
					NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);

			//if(ret !=BLE_STATUS_SUCCESS){printf("aci_gap_set_discoverable failed \r\n");}
		}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	080045ac 	.word	0x080045ac

080009c8 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <BSP_SPI1_Init+0x54>)
 80009d4:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <BSP_SPI1_Init+0x58>)
 80009d6:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <BSP_SPI1_Init+0x5c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	4911      	ldr	r1, [pc, #68]	; (8000a24 <BSP_SPI1_Init+0x5c>)
 80009e0:	600a      	str	r2, [r1, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d114      	bne.n	8000a10 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80009e6:	480d      	ldr	r0, [pc, #52]	; (8000a1c <BSP_SPI1_Init+0x54>)
 80009e8:	f001 ff5b 	bl	80028a2 <HAL_SPI_GetState>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d10e      	bne.n	8000a10 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 80009f2:	480a      	ldr	r0, [pc, #40]	; (8000a1c <BSP_SPI1_Init+0x54>)
 80009f4:	f000 f87c 	bl	8000af0 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d108      	bne.n	8000a10 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <BSP_SPI1_Init+0x54>)
 8000a00:	f000 f83a 	bl	8000a78 <MX_SPI1_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d002      	beq.n	8000a10 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000a0a:	f06f 0307 	mvn.w	r3, #7
 8000a0e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000a10:	687b      	ldr	r3, [r7, #4]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000744 	.word	0x20000744
 8000a20:	40013000 	.word	0x40013000
 8000a24:	20000194 	.word	0x20000194

08000a28 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	4613      	mov	r3, r2
 8000a34:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a40:	9200      	str	r2, [sp, #0]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	68f9      	ldr	r1, [r7, #12]
 8000a46:	4807      	ldr	r0, [pc, #28]	; (8000a64 <BSP_SPI1_SendRecv+0x3c>)
 8000a48:	f001 fd89 	bl	800255e <HAL_SPI_TransmitReceive>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d002      	beq.n	8000a58 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000a52:	f06f 0305 	mvn.w	r3, #5
 8000a56:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8000a58:	697b      	ldr	r3, [r7, #20]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000744 	.word	0x20000744

08000a68 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000a6c:	f000 fbec 	bl	8001248 <HAL_GetTick>
 8000a70:	4603      	mov	r3, r0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a19      	ldr	r2, [pc, #100]	; (8000aec <MX_SPI1_Init+0x74>)
 8000a88:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a90:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab0:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2228      	movs	r2, #40	; 0x28
 8000ab6:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	220a      	movs	r2, #10
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f001 fcb1 	bl	8002438 <HAL_SPI_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40013000 	.word	0x40013000

08000af0 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <SPI1_MspInit+0xc4>)
 8000afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b00:	4a2c      	ldr	r2, [pc, #176]	; (8000bb4 <SPI1_MspInit+0xc4>)
 8000b02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b06:	6453      	str	r3, [r2, #68]	; 0x44
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <SPI1_MspInit+0xc4>)
 8000b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <SPI1_MspInit+0xc4>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <SPI1_MspInit+0xc4>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6313      	str	r3, [r2, #48]	; 0x30
 8000b24:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <SPI1_MspInit+0xc4>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <SPI1_MspInit+0xc4>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a1e      	ldr	r2, [pc, #120]	; (8000bb4 <SPI1_MspInit+0xc4>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <SPI1_MspInit+0xc4>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000b4c:	2340      	movs	r3, #64	; 0x40
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000b5c:	2305      	movs	r3, #5
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4814      	ldr	r0, [pc, #80]	; (8000bb8 <SPI1_MspInit+0xc8>)
 8000b68:	f000 fd34 	bl	80015d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <SPI1_MspInit+0xc8>)
 8000b88:	f000 fd24 	bl	80015d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000b9c:	2305      	movs	r3, #5
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <SPI1_MspInit+0xcc>)
 8000ba8:	f000 fd14 	bl	80015d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <__io_putchar>:
/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int __io_putchar (int ch)
	{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR&0x0080)){
 8000bc8:	bf00      	nop
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <__io_putchar+0x2c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f9      	beq.n	8000bca <__io_putchar+0xa>
	}
	USART2->DR=(ch);
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <__io_putchar+0x2c>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6053      	str	r3, [r2, #4]
	//HAL_UART_Transmit(&huart2,((uint8_t *)ch),1,100);
	return ch;
 8000bdc:	687b      	ldr	r3, [r7, #4]
	}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40004400 	.word	0x40004400

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf4:	f000 fac2 	bl	800117c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf8:	f000 f80e 	bl	8000c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfc:	f000 f89e 	bl	8000d3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c00:	f000 f872 	bl	8000ce8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
printf("Hello from stm32\r\n");
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <main+0x24>)
 8000c06:	f003 f825 	bl	8003c54 <puts>
bluenrg_init();
 8000c0a:	f7ff fe4d 	bl	80008a8 <bluenrg_init>

	  /*
	     * process BLE
	     *
	     * */
	  bluenrg_process();
 8000c0e:	f7ff feb7 	bl	8000980 <bluenrg_process>
 8000c12:	e7fc      	b.n	8000c0e <main+0x1e>
 8000c14:	080045b8 	.word	0x080045b8

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b094      	sub	sp, #80	; 0x50
 8000c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 0320 	add.w	r3, r7, #32
 8000c22:	2230      	movs	r2, #48	; 0x30
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f002 ff9e 	bl	8003b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <SystemClock_Config+0xc8>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	4a26      	ldr	r2, [pc, #152]	; (8000ce0 <SystemClock_Config+0xc8>)
 8000c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4c:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <SystemClock_Config+0xc8>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <SystemClock_Config+0xcc>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a20      	ldr	r2, [pc, #128]	; (8000ce4 <SystemClock_Config+0xcc>)
 8000c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <SystemClock_Config+0xcc>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c74:	2301      	movs	r3, #1
 8000c76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c78:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000c8c:	2340      	movs	r3, #64	; 0x40
 8000c8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c94:	2304      	movs	r3, #4
 8000c96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c98:	f107 0320 	add.w	r3, r7, #32
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 ff57 	bl	8001b50 <HAL_RCC_OscConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ca8:	f000 f8d6 	bl	8000e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cac:	230f      	movs	r3, #15
 8000cae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 f9b9 	bl	8002040 <HAL_RCC_ClockConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cd4:	f000 f8c0 	bl	8000e58 <Error_Handler>
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3750      	adds	r7, #80	; 0x50
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40007000 	.word	0x40007000

08000ce8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <MX_USART2_UART_Init+0x50>)
 8000cf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	220c      	movs	r2, #12
 8000d10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_USART2_UART_Init+0x4c>)
 8000d20:	f001 fe98 	bl	8002a54 <HAL_UART_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d2a:	f000 f895 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000079c 	.word	0x2000079c
 8000d38:	40004400 	.word	0x40004400

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <MX_GPIO_Init+0x110>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a3c      	ldr	r2, [pc, #240]	; (8000e4c <MX_GPIO_Init+0x110>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b3a      	ldr	r3, [pc, #232]	; (8000e4c <MX_GPIO_Init+0x110>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <MX_GPIO_Init+0x110>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a35      	ldr	r2, [pc, #212]	; (8000e4c <MX_GPIO_Init+0x110>)
 8000d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <MX_GPIO_Init+0x110>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <MX_GPIO_Init+0x110>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a2e      	ldr	r2, [pc, #184]	; (8000e4c <MX_GPIO_Init+0x110>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <MX_GPIO_Init+0x110>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <MX_GPIO_Init+0x110>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a27      	ldr	r2, [pc, #156]	; (8000e4c <MX_GPIO_Init+0x110>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <MX_GPIO_Init+0x110>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LED_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000dc8:	4821      	ldr	r0, [pc, #132]	; (8000e50 <MX_GPIO_Init+0x114>)
 8000dca:	f000 fe83 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	481b      	ldr	r0, [pc, #108]	; (8000e54 <MX_GPIO_Init+0x118>)
 8000de6:	f000 fbf5 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dea:	2301      	movs	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4814      	ldr	r0, [pc, #80]	; (8000e50 <MX_GPIO_Init+0x114>)
 8000e00:	f000 fbe8 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LED_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LED_Pin|GPIO_PIN_8;
 8000e04:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <MX_GPIO_Init+0x114>)
 8000e1e:	f000 fbd9 	bl	80015d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2006      	movs	r0, #6
 8000e28:	f000 fb3d 	bl	80014a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e2c:	2006      	movs	r0, #6
 8000e2e:	f000 fb56 	bl	80014de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2028      	movs	r0, #40	; 0x28
 8000e38:	f000 fb35 	bl	80014a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e3c:	2028      	movs	r0, #40	; 0x28
 8000e3e:	f000 fb4e 	bl	80014de <HAL_NVIC_EnableIRQ>

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000
 8000e54:	40020800 	.word	0x40020800

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <HAL_UART_MspInit+0x84>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d12b      	bne.n	8000f2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_UART_MspInit+0x88>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_UART_MspInit+0x88>)
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_UART_MspInit+0x88>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_UART_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <HAL_UART_MspInit+0x88>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_UART_MspInit+0x88>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f0e:	230c      	movs	r3, #12
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f1e:	2307      	movs	r3, #7
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_UART_MspInit+0x8c>)
 8000f2a:	f000 fb53 	bl	80015d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40004400 	.word	0x40004400
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020000 	.word	0x40020000

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f946 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <EXTI0_IRQHandler+0x10>)
 8000f9e:	f000 faf5 	bl	800158c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000073c 	.word	0x2000073c

08000fac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fb0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fb4:	f000 fda8 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	e00a      	b.n	8000fe4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fce:	f3af 8000 	nop.w
 8000fd2:	4601      	mov	r1, r0
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	60ba      	str	r2, [r7, #8]
 8000fda:	b2ca      	uxtb	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf0      	blt.n	8000fce <_read+0x12>
	}

return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e009      	b.n	800101c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fdd5 	bl	8000bc0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	dbf1      	blt.n	8001008 <_write+0x12>
	}
	return len;
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_close>:

int _close(int file)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	return -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001056:	605a      	str	r2, [r3, #4]
	return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <_isatty>:

int _isatty(int file)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
	return 1;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	return 0;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a0:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <_sbrk+0x5c>)
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <_sbrk+0x60>)
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <_sbrk+0x64>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <_sbrk+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d207      	bcs.n	80010d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c8:	f002 fd16 	bl	8003af8 <__errno>
 80010cc:	4603      	mov	r3, r0
 80010ce:	220c      	movs	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d6:	e009      	b.n	80010ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <_sbrk+0x64>)
 80010e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20020000 	.word	0x20020000
 80010f8:	00000400 	.word	0x00000400
 80010fc:	20000198 	.word	0x20000198
 8001100:	20000808 	.word	0x20000808

08001104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <SystemInit+0x20>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <SystemInit+0x20>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001160 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800112e:	490e      	ldr	r1, [pc, #56]	; (8001168 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001144:	4c0b      	ldr	r4, [pc, #44]	; (8001174 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001152:	f7ff ffd7 	bl	8001104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001156:	f002 fcd5 	bl	8003b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff fd49 	bl	8000bf0 <main>
  bx  lr    
 800115e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001160:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001168:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800116c:	08004658 	.word	0x08004658
  ldr r2, =_sbss
 8001170:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001174:	20000804 	.word	0x20000804

08001178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <HAL_Init+0x40>)
 8001186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_Init+0x40>)
 8001192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_Init+0x40>)
 800119e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 f973 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011aa:	200f      	movs	r0, #15
 80011ac:	f000 f808 	bl	80011c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b0:	f7ff fe58 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023c00 	.word	0x40023c00

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x54>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_InitTick+0x58>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f999 	bl	8001516 <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00e      	b.n	800120c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d80a      	bhi.n	800120a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011fc:	f000 f953 	bl	80014a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001200:	4a06      	ldr	r2, [pc, #24]	; (800121c <HAL_InitTick+0x5c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	e000      	b.n	800120c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000008 	.word	0x20000008
 8001218:	20000010 	.word	0x20000010
 800121c:	2000000c 	.word	0x2000000c

08001220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000010 	.word	0x20000010
 8001244:	200007e0 	.word	0x200007e0

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200007e0 	.word	0x200007e0

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_Delay+0x44>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffde 	bl	8001248 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000010 	.word	0x20000010

080012a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c4:	4013      	ands	r3, r2
 80012c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012da:	4a04      	ldr	r2, [pc, #16]	; (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	60d3      	str	r3, [r2, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <__NVIC_GetPriorityGrouping+0x18>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	f003 0307 	and.w	r3, r3, #7
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	db0b      	blt.n	8001336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f003 021f 	and.w	r2, r3, #31
 8001324:	4907      	ldr	r1, [pc, #28]	; (8001344 <__NVIC_EnableIRQ+0x38>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	2001      	movs	r0, #1
 800132e:	fa00 f202 	lsl.w	r2, r0, r2
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000e100 	.word	0xe000e100

08001348 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db12      	blt.n	8001380 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	490a      	ldr	r1, [pc, #40]	; (800138c <__NVIC_DisableIRQ+0x44>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	3320      	adds	r3, #32
 8001370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001374:	f3bf 8f4f 	dsb	sy
}
 8001378:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800137a:	f3bf 8f6f 	isb	sy
}
 800137e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	; (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001470:	f7ff ff8e 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff05 	bl	80012a8 <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b8:	f7ff ff1a 	bl	80012f0 <__NVIC_GetPriorityGrouping>
 80014bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	6978      	ldr	r0, [r7, #20]
 80014c4:	f7ff ff8e 	bl	80013e4 <NVIC_EncodePriority>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff5d 	bl	8001390 <__NVIC_SetPriority>
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff0d 	bl	800130c <__NVIC_EnableIRQ>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff1d 	bl	8001348 <__NVIC_DisableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ff94 	bl	800144c <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800152e:	b480      	push	{r7}
 8001530:	b087      	sub	sp, #28
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	460b      	mov	r3, r1
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001540:	7afb      	ldrb	r3, [r7, #11]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d103      	bne.n	800154e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	605a      	str	r2, [r3, #4]
      break;
 800154c:	e002      	b.n	8001554 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	75fb      	strb	r3, [r7, #23]
      break;
 8001552:	bf00      	nop
  }

  return status;
 8001554:	7dfb      	ldrb	r3, [r7, #23]
}
 8001556:	4618      	mov	r0, r3
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e003      	b.n	800157e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800157c:	2300      	movs	r3, #0
  }
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 031f 	and.w	r3, r3, #31
 800159c:	2201      	movs	r2, #1
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_EXTI_IRQHandler+0x44>)
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	4013      	ands	r3, r2
 80015ac:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d009      	beq.n	80015c8 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <HAL_EXTI_IRQHandler+0x44>)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4798      	blx	r3
    }
  }
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	e159      	b.n	80018a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f0:	2201      	movs	r2, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	429a      	cmp	r2, r3
 800160a:	f040 8148 	bne.w	800189e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d005      	beq.n	8001626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001622:	2b02      	cmp	r3, #2
 8001624:	d130      	bne.n	8001688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800165c:	2201      	movs	r2, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 0201 	and.w	r2, r3, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b03      	cmp	r3, #3
 8001692:	d017      	beq.n	80016c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d123      	bne.n	8001718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	08da      	lsrs	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3208      	adds	r2, #8
 80016d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	69b9      	ldr	r1, [r7, #24]
 8001714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80a2 	beq.w	800189e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b57      	ldr	r3, [pc, #348]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a56      	ldr	r2, [pc, #344]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b54      	ldr	r3, [pc, #336]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001776:	4a52      	ldr	r2, [pc, #328]	; (80018c0 <HAL_GPIO_Init+0x2ec>)
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a49      	ldr	r2, [pc, #292]	; (80018c4 <HAL_GPIO_Init+0x2f0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x202>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a48      	ldr	r2, [pc, #288]	; (80018c8 <HAL_GPIO_Init+0x2f4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x1fe>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a47      	ldr	r2, [pc, #284]	; (80018cc <HAL_GPIO_Init+0x2f8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a46      	ldr	r2, [pc, #280]	; (80018d0 <HAL_GPIO_Init+0x2fc>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x1f6>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a45      	ldr	r2, [pc, #276]	; (80018d4 <HAL_GPIO_Init+0x300>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x1f2>
 80017c2:	2304      	movs	r3, #4
 80017c4:	e008      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e004      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017d6:	2300      	movs	r3, #0
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f002 0203 	and.w	r2, r2, #3
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	4093      	lsls	r3, r2
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e8:	4935      	ldr	r1, [pc, #212]	; (80018c0 <HAL_GPIO_Init+0x2ec>)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	3302      	adds	r3, #2
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <HAL_GPIO_Init+0x304>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800181a:	4a2f      	ldr	r2, [pc, #188]	; (80018d8 <HAL_GPIO_Init+0x304>)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001820:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001844:	4a24      	ldr	r2, [pc, #144]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_GPIO_Init+0x304>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800186e:	4a1a      	ldr	r2, [pc, #104]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_GPIO_Init+0x304>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3301      	adds	r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	f67f aea2 	bls.w	80015f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40013800 	.word	0x40013800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40013c00 	.word	0x40013c00

080018dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e0bb      	b.n	8001a70 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f8:	2201      	movs	r2, #1
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	429a      	cmp	r2, r3
 8001910:	f040 80ab 	bne.w	8001a6a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001914:	4a5c      	ldr	r2, [pc, #368]	; (8001a88 <HAL_GPIO_DeInit+0x1ac>)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	4013      	ands	r3, r2
 8001934:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a54      	ldr	r2, [pc, #336]	; (8001a8c <HAL_GPIO_DeInit+0x1b0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d019      	beq.n	8001972 <HAL_GPIO_DeInit+0x96>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a53      	ldr	r2, [pc, #332]	; (8001a90 <HAL_GPIO_DeInit+0x1b4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_DeInit+0x92>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a52      	ldr	r2, [pc, #328]	; (8001a94 <HAL_GPIO_DeInit+0x1b8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00d      	beq.n	800196a <HAL_GPIO_DeInit+0x8e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a51      	ldr	r2, [pc, #324]	; (8001a98 <HAL_GPIO_DeInit+0x1bc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d007      	beq.n	8001966 <HAL_GPIO_DeInit+0x8a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a50      	ldr	r2, [pc, #320]	; (8001a9c <HAL_GPIO_DeInit+0x1c0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_GPIO_DeInit+0x86>
 800195e:	2304      	movs	r3, #4
 8001960:	e008      	b.n	8001974 <HAL_GPIO_DeInit+0x98>
 8001962:	2307      	movs	r3, #7
 8001964:	e006      	b.n	8001974 <HAL_GPIO_DeInit+0x98>
 8001966:	2303      	movs	r3, #3
 8001968:	e004      	b.n	8001974 <HAL_GPIO_DeInit+0x98>
 800196a:	2302      	movs	r3, #2
 800196c:	e002      	b.n	8001974 <HAL_GPIO_DeInit+0x98>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_GPIO_DeInit+0x98>
 8001972:	2300      	movs	r3, #0
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	f002 0203 	and.w	r2, r2, #3
 800197a:	0092      	lsls	r2, r2, #2
 800197c:	4093      	lsls	r3, r2
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	429a      	cmp	r2, r3
 8001982:	d132      	bne.n	80019ea <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001984:	4b46      	ldr	r3, [pc, #280]	; (8001aa0 <HAL_GPIO_DeInit+0x1c4>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	43db      	mvns	r3, r3
 800198c:	4944      	ldr	r1, [pc, #272]	; (8001aa0 <HAL_GPIO_DeInit+0x1c4>)
 800198e:	4013      	ands	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001992:	4b43      	ldr	r3, [pc, #268]	; (8001aa0 <HAL_GPIO_DeInit+0x1c4>)
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
 800199a:	4941      	ldr	r1, [pc, #260]	; (8001aa0 <HAL_GPIO_DeInit+0x1c4>)
 800199c:	4013      	ands	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80019a0:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <HAL_GPIO_DeInit+0x1c4>)
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	493d      	ldr	r1, [pc, #244]	; (8001aa0 <HAL_GPIO_DeInit+0x1c4>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80019ae:	4b3c      	ldr	r3, [pc, #240]	; (8001aa0 <HAL_GPIO_DeInit+0x1c4>)
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	493a      	ldr	r1, [pc, #232]	; (8001aa0 <HAL_GPIO_DeInit+0x1c4>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	220f      	movs	r2, #15
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80019cc:	4a2e      	ldr	r2, [pc, #184]	; (8001a88 <HAL_GPIO_DeInit+0x1ac>)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	43da      	mvns	r2, r3
 80019dc:	482a      	ldr	r0, [pc, #168]	; (8001a88 <HAL_GPIO_DeInit+0x1ac>)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	400a      	ands	r2, r1
 80019e4:	3302      	adds	r3, #2
 80019e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2103      	movs	r1, #3
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	401a      	ands	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	08d2      	lsrs	r2, r2, #3
 8001a20:	4019      	ands	r1, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2103      	movs	r1, #3
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	2101      	movs	r1, #1
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	401a      	ands	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	401a      	ands	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2b0f      	cmp	r3, #15
 8001a74:	f67f af40 	bls.w	80018f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	371c      	adds	r7, #28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40013c00 	.word	0x40013c00

08001aa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
 8001ac0:	e001      	b.n	8001ac6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae4:	787b      	ldrb	r3, [r7, #1]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af0:	e003      	b.n	8001afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	041a      	lsls	r2, r3, #16
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	619a      	str	r2, [r3, #24]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f806 	bl	8001b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40013c00 	.word	0x40013c00

08001b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e264      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d075      	beq.n	8001c5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b6e:	4ba3      	ldr	r3, [pc, #652]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d00c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7a:	4ba0      	ldr	r3, [pc, #640]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d112      	bne.n	8001bac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b86:	4b9d      	ldr	r3, [pc, #628]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b92:	d10b      	bne.n	8001bac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	4b99      	ldr	r3, [pc, #612]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d05b      	beq.n	8001c58 <HAL_RCC_OscConfig+0x108>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d157      	bne.n	8001c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e23f      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb4:	d106      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x74>
 8001bb6:	4b91      	ldr	r3, [pc, #580]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a90      	ldr	r2, [pc, #576]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e01d      	b.n	8001c00 <HAL_RCC_OscConfig+0xb0>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x98>
 8001bce:	4b8b      	ldr	r3, [pc, #556]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a8a      	ldr	r2, [pc, #552]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b88      	ldr	r3, [pc, #544]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a87      	ldr	r2, [pc, #540]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0xb0>
 8001be8:	4b84      	ldr	r3, [pc, #528]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a83      	ldr	r2, [pc, #524]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b81      	ldr	r3, [pc, #516]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a80      	ldr	r2, [pc, #512]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fb1e 	bl	8001248 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fb1a 	bl	8001248 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e204      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	4b76      	ldr	r3, [pc, #472]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0xc0>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fb0a 	bl	8001248 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fb06 	bl	8001248 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e1f0      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	4b6c      	ldr	r3, [pc, #432]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0xe8>
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d063      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c66:	4b65      	ldr	r3, [pc, #404]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c72:	4b62      	ldr	r3, [pc, #392]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d11c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7e:	4b5f      	ldr	r3, [pc, #380]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d116      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	4b5c      	ldr	r3, [pc, #368]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x152>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e1c4      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	4b56      	ldr	r3, [pc, #344]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4952      	ldr	r1, [pc, #328]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	e03a      	b.n	8001d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc0:	4b4f      	ldr	r3, [pc, #316]	; (8001e00 <HAL_RCC_OscConfig+0x2b0>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff fabf 	bl	8001248 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff fabb 	bl	8001248 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e1a5      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b43      	ldr	r3, [pc, #268]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4940      	ldr	r1, [pc, #256]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
 8001d00:	e015      	b.n	8001d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d02:	4b3f      	ldr	r3, [pc, #252]	; (8001e00 <HAL_RCC_OscConfig+0x2b0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff fa9e 	bl	8001248 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d10:	f7ff fa9a 	bl	8001248 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e184      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d030      	beq.n	8001d9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d016      	beq.n	8001d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d42:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <HAL_RCC_OscConfig+0x2b4>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7ff fa7e 	bl	8001248 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff fa7a 	bl	8001248 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e164      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x200>
 8001d6e:	e015      	b.n	8001d9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d70:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_RCC_OscConfig+0x2b4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7ff fa67 	bl	8001248 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fa63 	bl	8001248 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e14d      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80a0 	beq.w	8001eea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10f      	bne.n	8001dda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_OscConfig+0x2b8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d121      	bne.n	8001e2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_RCC_OscConfig+0x2b8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <HAL_RCC_OscConfig+0x2b8>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df2:	f7ff fa29 	bl	8001248 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	e011      	b.n	8001e1e <HAL_RCC_OscConfig+0x2ce>
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	42470000 	.word	0x42470000
 8001e04:	42470e80 	.word	0x42470e80
 8001e08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0c:	f7ff fa1c 	bl	8001248 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e106      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1e:	4b85      	ldr	r3, [pc, #532]	; (8002034 <HAL_RCC_OscConfig+0x4e4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d106      	bne.n	8001e40 <HAL_RCC_OscConfig+0x2f0>
 8001e32:	4b81      	ldr	r3, [pc, #516]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a80      	ldr	r2, [pc, #512]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3e:	e01c      	b.n	8001e7a <HAL_RCC_OscConfig+0x32a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d10c      	bne.n	8001e62 <HAL_RCC_OscConfig+0x312>
 8001e48:	4b7b      	ldr	r3, [pc, #492]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4c:	4a7a      	ldr	r2, [pc, #488]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	6713      	str	r3, [r2, #112]	; 0x70
 8001e54:	4b78      	ldr	r3, [pc, #480]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	4a77      	ldr	r2, [pc, #476]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e60:	e00b      	b.n	8001e7a <HAL_RCC_OscConfig+0x32a>
 8001e62:	4b75      	ldr	r3, [pc, #468]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	4a74      	ldr	r2, [pc, #464]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6e:	4b72      	ldr	r3, [pc, #456]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	4a71      	ldr	r2, [pc, #452]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001e74:	f023 0304 	bic.w	r3, r3, #4
 8001e78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d015      	beq.n	8001eae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff f9e1 	bl	8001248 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff f9dd 	bl	8001248 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e0c5      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea0:	4b65      	ldr	r3, [pc, #404]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ee      	beq.n	8001e8a <HAL_RCC_OscConfig+0x33a>
 8001eac:	e014      	b.n	8001ed8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7ff f9cb 	bl	8001248 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7ff f9c7 	bl	8001248 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0af      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ecc:	4b5a      	ldr	r3, [pc, #360]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1ee      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d105      	bne.n	8001eea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ede:	4b56      	ldr	r3, [pc, #344]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a55      	ldr	r2, [pc, #340]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 809b 	beq.w	800202a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef4:	4b50      	ldr	r3, [pc, #320]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d05c      	beq.n	8001fba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d141      	bne.n	8001f8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f08:	4b4c      	ldr	r3, [pc, #304]	; (800203c <HAL_RCC_OscConfig+0x4ec>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7ff f99b 	bl	8001248 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f16:	f7ff f997 	bl	8001248 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e081      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f28:	4b43      	ldr	r3, [pc, #268]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f0      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69da      	ldr	r2, [r3, #28]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	019b      	lsls	r3, r3, #6
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	085b      	lsrs	r3, r3, #1
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	041b      	lsls	r3, r3, #16
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f56:	061b      	lsls	r3, r3, #24
 8001f58:	4937      	ldr	r1, [pc, #220]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <HAL_RCC_OscConfig+0x4ec>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff f970 	bl	8001248 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7ff f96c 	bl	8001248 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e056      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7e:	4b2e      	ldr	r3, [pc, #184]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x41c>
 8001f8a:	e04e      	b.n	800202a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8c:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCC_OscConfig+0x4ec>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7ff f959 	bl	8001248 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7ff f955 	bl	8001248 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e03f      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fac:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f0      	bne.n	8001f9a <HAL_RCC_OscConfig+0x44a>
 8001fb8:	e037      	b.n	800202a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e032      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <HAL_RCC_OscConfig+0x4e8>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d028      	beq.n	8002026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d121      	bne.n	8002026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d11a      	bne.n	8002026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ffc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d111      	bne.n	8002026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	085b      	lsrs	r3, r3, #1
 800200e:	3b01      	subs	r3, #1
 8002010:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d107      	bne.n	8002026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40007000 	.word	0x40007000
 8002038:	40023800 	.word	0x40023800
 800203c:	42470060 	.word	0x42470060

08002040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0cc      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b68      	ldr	r3, [pc, #416]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d90c      	bls.n	800207c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b65      	ldr	r3, [pc, #404]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0b8      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002094:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800209e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ac:	4b53      	ldr	r3, [pc, #332]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a52      	ldr	r2, [pc, #328]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	494d      	ldr	r1, [pc, #308]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d044      	beq.n	8002160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d119      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e07f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d003      	beq.n	80020fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210e:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e067      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211e:	4b37      	ldr	r3, [pc, #220]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f023 0203 	bic.w	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4934      	ldr	r1, [pc, #208]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	4313      	orrs	r3, r2
 800212e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002130:	f7ff f88a 	bl	8001248 <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	e00a      	b.n	800214e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7ff f886 	bl	8001248 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e04f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 020c 	and.w	r2, r3, #12
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	429a      	cmp	r2, r3
 800215e:	d1eb      	bne.n	8002138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d20c      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e032      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4916      	ldr	r1, [pc, #88]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	490e      	ldr	r1, [pc, #56]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021c6:	f000 f821 	bl	800220c <HAL_RCC_GetSysClockFreq>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	490a      	ldr	r1, [pc, #40]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	5ccb      	ldrb	r3, [r1, r3]
 80021da:	fa22 f303 	lsr.w	r3, r2, r3
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1c8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe ffea 	bl	80011c0 <HAL_InitTick>

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023c00 	.word	0x40023c00
 80021fc:	40023800 	.word	0x40023800
 8002200:	080045cc 	.word	0x080045cc
 8002204:	20000008 	.word	0x20000008
 8002208:	2000000c 	.word	0x2000000c

0800220c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800220c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	2300      	movs	r3, #0
 800221e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002224:	4b67      	ldr	r3, [pc, #412]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d00d      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x40>
 8002230:	2b08      	cmp	r3, #8
 8002232:	f200 80bd 	bhi.w	80023b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x34>
 800223a:	2b04      	cmp	r3, #4
 800223c:	d003      	beq.n	8002246 <HAL_RCC_GetSysClockFreq+0x3a>
 800223e:	e0b7      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002240:	4b61      	ldr	r3, [pc, #388]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002242:	60bb      	str	r3, [r7, #8]
       break;
 8002244:	e0b7      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002246:	4b61      	ldr	r3, [pc, #388]	; (80023cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002248:	60bb      	str	r3, [r7, #8]
      break;
 800224a:	e0b4      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800224c:	4b5d      	ldr	r3, [pc, #372]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002254:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002256:	4b5b      	ldr	r3, [pc, #364]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d04d      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002262:	4b58      	ldr	r3, [pc, #352]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	099b      	lsrs	r3, r3, #6
 8002268:	461a      	mov	r2, r3
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002272:	f04f 0100 	mov.w	r1, #0
 8002276:	ea02 0800 	and.w	r8, r2, r0
 800227a:	ea03 0901 	and.w	r9, r3, r1
 800227e:	4640      	mov	r0, r8
 8002280:	4649      	mov	r1, r9
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	014b      	lsls	r3, r1, #5
 800228c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002290:	0142      	lsls	r2, r0, #5
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	ebb0 0008 	subs.w	r0, r0, r8
 800229a:	eb61 0109 	sbc.w	r1, r1, r9
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	018b      	lsls	r3, r1, #6
 80022a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022ac:	0182      	lsls	r2, r0, #6
 80022ae:	1a12      	subs	r2, r2, r0
 80022b0:	eb63 0301 	sbc.w	r3, r3, r1
 80022b4:	f04f 0000 	mov.w	r0, #0
 80022b8:	f04f 0100 	mov.w	r1, #0
 80022bc:	00d9      	lsls	r1, r3, #3
 80022be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022c2:	00d0      	lsls	r0, r2, #3
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	eb12 0208 	adds.w	r2, r2, r8
 80022cc:	eb43 0309 	adc.w	r3, r3, r9
 80022d0:	f04f 0000 	mov.w	r0, #0
 80022d4:	f04f 0100 	mov.w	r1, #0
 80022d8:	0259      	lsls	r1, r3, #9
 80022da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80022de:	0250      	lsls	r0, r2, #9
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	461a      	mov	r2, r3
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	f7fd ff7a 	bl	80001e8 <__aeabi_uldivmod>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4613      	mov	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e04a      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022fe:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	461a      	mov	r2, r3
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800230e:	f04f 0100 	mov.w	r1, #0
 8002312:	ea02 0400 	and.w	r4, r2, r0
 8002316:	ea03 0501 	and.w	r5, r3, r1
 800231a:	4620      	mov	r0, r4
 800231c:	4629      	mov	r1, r5
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	014b      	lsls	r3, r1, #5
 8002328:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800232c:	0142      	lsls	r2, r0, #5
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	1b00      	subs	r0, r0, r4
 8002334:	eb61 0105 	sbc.w	r1, r1, r5
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	018b      	lsls	r3, r1, #6
 8002342:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002346:	0182      	lsls	r2, r0, #6
 8002348:	1a12      	subs	r2, r2, r0
 800234a:	eb63 0301 	sbc.w	r3, r3, r1
 800234e:	f04f 0000 	mov.w	r0, #0
 8002352:	f04f 0100 	mov.w	r1, #0
 8002356:	00d9      	lsls	r1, r3, #3
 8002358:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800235c:	00d0      	lsls	r0, r2, #3
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	1912      	adds	r2, r2, r4
 8002364:	eb45 0303 	adc.w	r3, r5, r3
 8002368:	f04f 0000 	mov.w	r0, #0
 800236c:	f04f 0100 	mov.w	r1, #0
 8002370:	0299      	lsls	r1, r3, #10
 8002372:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002376:	0290      	lsls	r0, r2, #10
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	461a      	mov	r2, r3
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	f7fd ff2e 	bl	80001e8 <__aeabi_uldivmod>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4613      	mov	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	3301      	adds	r3, #1
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	60bb      	str	r3, [r7, #8]
      break;
 80023ae:	e002      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023b2:	60bb      	str	r3, [r7, #8]
      break;
 80023b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b6:	68bb      	ldr	r3, [r7, #8]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	00f42400 	.word	0x00f42400
 80023cc:	007a1200 	.word	0x007a1200

080023d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000008 	.word	0x20000008

080023e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023ec:	f7ff fff0 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	0a9b      	lsrs	r3, r3, #10
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4903      	ldr	r1, [pc, #12]	; (800240c <HAL_RCC_GetPCLK1Freq+0x24>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002404:	4618      	mov	r0, r3
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40023800 	.word	0x40023800
 800240c:	080045dc 	.word	0x080045dc

08002410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002414:	f7ff ffdc 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0b5b      	lsrs	r3, r3, #13
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4903      	ldr	r1, [pc, #12]	; (8002434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	080045dc 	.word	0x080045dc

08002438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e07b      	b.n	8002542 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	2b00      	cmp	r3, #0
 8002450:	d108      	bne.n	8002464 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800245a:	d009      	beq.n	8002470 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
 8002462:	e005      	b.n	8002470 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f85d 	bl	800254a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f4:	ea42 0103 	orr.w	r1, r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	0c1b      	lsrs	r3, r3, #16
 800250e:	f003 0104 	and.w	r1, r3, #4
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	f003 0210 	and.w	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002530:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b08c      	sub	sp, #48	; 0x30
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800256c:	2301      	movs	r3, #1
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_SPI_TransmitReceive+0x26>
 8002580:	2302      	movs	r3, #2
 8002582:	e18a      	b.n	800289a <HAL_SPI_TransmitReceive+0x33c>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800258c:	f7fe fe5c 	bl	8001248 <HAL_GetTick>
 8002590:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d00f      	beq.n	80025ce <HAL_SPI_TransmitReceive+0x70>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025b4:	d107      	bne.n	80025c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <HAL_SPI_TransmitReceive+0x68>
 80025be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d003      	beq.n	80025ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025cc:	e15b      	b.n	8002886 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_SPI_TransmitReceive+0x82>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_SPI_TransmitReceive+0x82>
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025e6:	e14e      	b.n	8002886 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d003      	beq.n	80025fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2205      	movs	r2, #5
 80025f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	887a      	ldrh	r2, [r7, #2]
 800260c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	887a      	ldrh	r2, [r7, #2]
 8002612:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	887a      	ldrh	r2, [r7, #2]
 800261e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d007      	beq.n	8002650 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800264e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002658:	d178      	bne.n	800274c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_SPI_TransmitReceive+0x10a>
 8002662:	8b7b      	ldrh	r3, [r7, #26]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d166      	bne.n	8002736 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	881a      	ldrh	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	1c9a      	adds	r2, r3, #2
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800268c:	e053      	b.n	8002736 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b02      	cmp	r3, #2
 800269a:	d11b      	bne.n	80026d4 <HAL_SPI_TransmitReceive+0x176>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d016      	beq.n	80026d4 <HAL_SPI_TransmitReceive+0x176>
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d113      	bne.n	80026d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	1c9a      	adds	r2, r3, #2
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d119      	bne.n	8002716 <HAL_SPI_TransmitReceive+0x1b8>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d014      	beq.n	8002716 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	b292      	uxth	r2, r2
 80026f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	1c9a      	adds	r2, r3, #2
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002712:	2301      	movs	r3, #1
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002716:	f7fe fd97 	bl	8001248 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002722:	429a      	cmp	r2, r3
 8002724:	d807      	bhi.n	8002736 <HAL_SPI_TransmitReceive+0x1d8>
 8002726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800272c:	d003      	beq.n	8002736 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002734:	e0a7      	b.n	8002886 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1a6      	bne.n	800268e <HAL_SPI_TransmitReceive+0x130>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1a1      	bne.n	800268e <HAL_SPI_TransmitReceive+0x130>
 800274a:	e07c      	b.n	8002846 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <HAL_SPI_TransmitReceive+0x1fc>
 8002754:	8b7b      	ldrh	r3, [r7, #26]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d16b      	bne.n	8002832 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	330c      	adds	r3, #12
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002780:	e057      	b.n	8002832 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d11c      	bne.n	80027ca <HAL_SPI_TransmitReceive+0x26c>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d017      	beq.n	80027ca <HAL_SPI_TransmitReceive+0x26c>
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	2b01      	cmp	r3, #1
 800279e:	d114      	bne.n	80027ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	330c      	adds	r3, #12
 80027aa:	7812      	ldrb	r2, [r2, #0]
 80027ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d119      	bne.n	800280c <HAL_SPI_TransmitReceive+0x2ae>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d014      	beq.n	800280c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002808:	2301      	movs	r3, #1
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800280c:	f7fe fd1c 	bl	8001248 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002818:	429a      	cmp	r2, r3
 800281a:	d803      	bhi.n	8002824 <HAL_SPI_TransmitReceive+0x2c6>
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002822:	d102      	bne.n	800282a <HAL_SPI_TransmitReceive+0x2cc>
 8002824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002826:	2b00      	cmp	r3, #0
 8002828:	d103      	bne.n	8002832 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002830:	e029      	b.n	8002886 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1a2      	bne.n	8002782 <HAL_SPI_TransmitReceive+0x224>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d19d      	bne.n	8002782 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002848:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f8c0 	bl	80029d0 <SPI_EndRxTxTransaction>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d006      	beq.n	8002864 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002862:	e010      	b.n	8002886 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10b      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	e000      	b.n	8002886 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002884:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002896:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800289a:	4618      	mov	r0, r3
 800289c:	3730      	adds	r7, #48	; 0x30
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028b0:	b2db      	uxtb	r3, r3
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028d0:	f7fe fcba 	bl	8001248 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028e0:	f7fe fcb2 	bl	8001248 <HAL_GetTick>
 80028e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028e6:	4b39      	ldr	r3, [pc, #228]	; (80029cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	015b      	lsls	r3, r3, #5
 80028ec:	0d1b      	lsrs	r3, r3, #20
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	fb02 f303 	mul.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028f6:	e054      	b.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028fe:	d050      	beq.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002900:	f7fe fca2 	bl	8001248 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	429a      	cmp	r2, r3
 800290e:	d902      	bls.n	8002916 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d13d      	bne.n	8002992 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002924:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800292e:	d111      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002938:	d004      	beq.n	8002944 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002942:	d107      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002952:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295c:	d10f      	bne.n	800297e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800297c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e017      	b.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3b01      	subs	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d19b      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3720      	adds	r7, #32
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000008 	.word	0x20000008

080029d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <SPI_EndRxTxTransaction+0x7c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <SPI_EndRxTxTransaction+0x80>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	0d5b      	lsrs	r3, r3, #21
 80029e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029ec:	fb02 f303 	mul.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029fa:	d112      	bne.n	8002a22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f7ff ff5a 	bl	80028c0 <SPI_WaitFlagStateUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d016      	beq.n	8002a40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f043 0220 	orr.w	r2, r3, #32
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e00f      	b.n	8002a42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a38:	2b80      	cmp	r3, #128	; 0x80
 8002a3a:	d0f2      	beq.n	8002a22 <SPI_EndRxTxTransaction+0x52>
 8002a3c:	e000      	b.n	8002a40 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a3e:	bf00      	nop
  }

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000008 	.word	0x20000008
 8002a50:	165e9f81 	.word	0x165e9f81

08002a54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e03f      	b.n	8002ae6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fe fa1a 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2224      	movs	r2, #36	; 0x24
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f829 	bl	8002af0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002abc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002acc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af4:	b09f      	sub	sp, #124	; 0x7c
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b06:	68d9      	ldr	r1, [r3, #12]
 8002b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	ea40 0301 	orr.w	r3, r0, r1
 8002b10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b34:	f021 010c 	bic.w	r1, r1, #12
 8002b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4e:	6999      	ldr	r1, [r3, #24]
 8002b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	ea40 0301 	orr.w	r3, r0, r1
 8002b58:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4bc5      	ldr	r3, [pc, #788]	; (8002e74 <UART_SetConfig+0x384>)
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d004      	beq.n	8002b6e <UART_SetConfig+0x7e>
 8002b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4bc3      	ldr	r3, [pc, #780]	; (8002e78 <UART_SetConfig+0x388>)
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d103      	bne.n	8002b76 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b6e:	f7ff fc4f 	bl	8002410 <HAL_RCC_GetPCLK2Freq>
 8002b72:	6778      	str	r0, [r7, #116]	; 0x74
 8002b74:	e002      	b.n	8002b7c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b76:	f7ff fc37 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8002b7a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b84:	f040 80b6 	bne.w	8002cf4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b8a:	461c      	mov	r4, r3
 8002b8c:	f04f 0500 	mov.w	r5, #0
 8002b90:	4622      	mov	r2, r4
 8002b92:	462b      	mov	r3, r5
 8002b94:	1891      	adds	r1, r2, r2
 8002b96:	6439      	str	r1, [r7, #64]	; 0x40
 8002b98:	415b      	adcs	r3, r3
 8002b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ba0:	1912      	adds	r2, r2, r4
 8002ba2:	eb45 0303 	adc.w	r3, r5, r3
 8002ba6:	f04f 0000 	mov.w	r0, #0
 8002baa:	f04f 0100 	mov.w	r1, #0
 8002bae:	00d9      	lsls	r1, r3, #3
 8002bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bb4:	00d0      	lsls	r0, r2, #3
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	1911      	adds	r1, r2, r4
 8002bbc:	6639      	str	r1, [r7, #96]	; 0x60
 8002bbe:	416b      	adcs	r3, r5
 8002bc0:	667b      	str	r3, [r7, #100]	; 0x64
 8002bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	1891      	adds	r1, r2, r2
 8002bce:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bd0:	415b      	adcs	r3, r3
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bd8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002bdc:	f7fd fb04 	bl	80001e8 <__aeabi_uldivmod>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4ba5      	ldr	r3, [pc, #660]	; (8002e7c <UART_SetConfig+0x38c>)
 8002be6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	011e      	lsls	r6, r3, #4
 8002bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf0:	461c      	mov	r4, r3
 8002bf2:	f04f 0500 	mov.w	r5, #0
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	462b      	mov	r3, r5
 8002bfa:	1891      	adds	r1, r2, r2
 8002bfc:	6339      	str	r1, [r7, #48]	; 0x30
 8002bfe:	415b      	adcs	r3, r3
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
 8002c02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c06:	1912      	adds	r2, r2, r4
 8002c08:	eb45 0303 	adc.w	r3, r5, r3
 8002c0c:	f04f 0000 	mov.w	r0, #0
 8002c10:	f04f 0100 	mov.w	r1, #0
 8002c14:	00d9      	lsls	r1, r3, #3
 8002c16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c1a:	00d0      	lsls	r0, r2, #3
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	1911      	adds	r1, r2, r4
 8002c22:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c24:	416b      	adcs	r3, r5
 8002c26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	1891      	adds	r1, r2, r2
 8002c34:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c36:	415b      	adcs	r3, r3
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c3e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002c42:	f7fd fad1 	bl	80001e8 <__aeabi_uldivmod>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4b8c      	ldr	r3, [pc, #560]	; (8002e7c <UART_SetConfig+0x38c>)
 8002c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	2164      	movs	r1, #100	; 0x64
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	3332      	adds	r3, #50	; 0x32
 8002c5e:	4a87      	ldr	r2, [pc, #540]	; (8002e7c <UART_SetConfig+0x38c>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c6c:	441e      	add	r6, r3
 8002c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c70:	4618      	mov	r0, r3
 8002c72:	f04f 0100 	mov.w	r1, #0
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	1894      	adds	r4, r2, r2
 8002c7c:	623c      	str	r4, [r7, #32]
 8002c7e:	415b      	adcs	r3, r3
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
 8002c82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c86:	1812      	adds	r2, r2, r0
 8002c88:	eb41 0303 	adc.w	r3, r1, r3
 8002c8c:	f04f 0400 	mov.w	r4, #0
 8002c90:	f04f 0500 	mov.w	r5, #0
 8002c94:	00dd      	lsls	r5, r3, #3
 8002c96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c9a:	00d4      	lsls	r4, r2, #3
 8002c9c:	4622      	mov	r2, r4
 8002c9e:	462b      	mov	r3, r5
 8002ca0:	1814      	adds	r4, r2, r0
 8002ca2:	653c      	str	r4, [r7, #80]	; 0x50
 8002ca4:	414b      	adcs	r3, r1
 8002ca6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	461a      	mov	r2, r3
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	1891      	adds	r1, r2, r2
 8002cb4:	61b9      	str	r1, [r7, #24]
 8002cb6:	415b      	adcs	r3, r3
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cbe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002cc2:	f7fd fa91 	bl	80001e8 <__aeabi_uldivmod>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4b6c      	ldr	r3, [pc, #432]	; (8002e7c <UART_SetConfig+0x38c>)
 8002ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	2164      	movs	r1, #100	; 0x64
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	3332      	adds	r3, #50	; 0x32
 8002cde:	4a67      	ldr	r2, [pc, #412]	; (8002e7c <UART_SetConfig+0x38c>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	f003 0207 	and.w	r2, r3, #7
 8002cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4432      	add	r2, r6
 8002cf0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cf2:	e0b9      	b.n	8002e68 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf6:	461c      	mov	r4, r3
 8002cf8:	f04f 0500 	mov.w	r5, #0
 8002cfc:	4622      	mov	r2, r4
 8002cfe:	462b      	mov	r3, r5
 8002d00:	1891      	adds	r1, r2, r2
 8002d02:	6139      	str	r1, [r7, #16]
 8002d04:	415b      	adcs	r3, r3
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d0c:	1912      	adds	r2, r2, r4
 8002d0e:	eb45 0303 	adc.w	r3, r5, r3
 8002d12:	f04f 0000 	mov.w	r0, #0
 8002d16:	f04f 0100 	mov.w	r1, #0
 8002d1a:	00d9      	lsls	r1, r3, #3
 8002d1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d20:	00d0      	lsls	r0, r2, #3
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	eb12 0804 	adds.w	r8, r2, r4
 8002d2a:	eb43 0905 	adc.w	r9, r3, r5
 8002d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f04f 0100 	mov.w	r1, #0
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	008b      	lsls	r3, r1, #2
 8002d42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d46:	0082      	lsls	r2, r0, #2
 8002d48:	4640      	mov	r0, r8
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	f7fd fa4c 	bl	80001e8 <__aeabi_uldivmod>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4b49      	ldr	r3, [pc, #292]	; (8002e7c <UART_SetConfig+0x38c>)
 8002d56:	fba3 2302 	umull	r2, r3, r3, r2
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	011e      	lsls	r6, r3, #4
 8002d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d60:	4618      	mov	r0, r3
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	1894      	adds	r4, r2, r2
 8002d6c:	60bc      	str	r4, [r7, #8]
 8002d6e:	415b      	adcs	r3, r3
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d76:	1812      	adds	r2, r2, r0
 8002d78:	eb41 0303 	adc.w	r3, r1, r3
 8002d7c:	f04f 0400 	mov.w	r4, #0
 8002d80:	f04f 0500 	mov.w	r5, #0
 8002d84:	00dd      	lsls	r5, r3, #3
 8002d86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d8a:	00d4      	lsls	r4, r2, #3
 8002d8c:	4622      	mov	r2, r4
 8002d8e:	462b      	mov	r3, r5
 8002d90:	1814      	adds	r4, r2, r0
 8002d92:	64bc      	str	r4, [r7, #72]	; 0x48
 8002d94:	414b      	adcs	r3, r1
 8002d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f04f 0100 	mov.w	r1, #0
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	008b      	lsls	r3, r1, #2
 8002dac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002db0:	0082      	lsls	r2, r0, #2
 8002db2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002db6:	f7fd fa17 	bl	80001e8 <__aeabi_uldivmod>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <UART_SetConfig+0x38c>)
 8002dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	2164      	movs	r1, #100	; 0x64
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	3332      	adds	r3, #50	; 0x32
 8002dd2:	4a2a      	ldr	r2, [pc, #168]	; (8002e7c <UART_SetConfig+0x38c>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dde:	441e      	add	r6, r3
 8002de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de2:	4618      	mov	r0, r3
 8002de4:	f04f 0100 	mov.w	r1, #0
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	1894      	adds	r4, r2, r2
 8002dee:	603c      	str	r4, [r7, #0]
 8002df0:	415b      	adcs	r3, r3
 8002df2:	607b      	str	r3, [r7, #4]
 8002df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002df8:	1812      	adds	r2, r2, r0
 8002dfa:	eb41 0303 	adc.w	r3, r1, r3
 8002dfe:	f04f 0400 	mov.w	r4, #0
 8002e02:	f04f 0500 	mov.w	r5, #0
 8002e06:	00dd      	lsls	r5, r3, #3
 8002e08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e0c:	00d4      	lsls	r4, r2, #3
 8002e0e:	4622      	mov	r2, r4
 8002e10:	462b      	mov	r3, r5
 8002e12:	eb12 0a00 	adds.w	sl, r2, r0
 8002e16:	eb43 0b01 	adc.w	fp, r3, r1
 8002e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f04f 0100 	mov.w	r1, #0
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	008b      	lsls	r3, r1, #2
 8002e2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e32:	0082      	lsls	r2, r0, #2
 8002e34:	4650      	mov	r0, sl
 8002e36:	4659      	mov	r1, fp
 8002e38:	f7fd f9d6 	bl	80001e8 <__aeabi_uldivmod>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <UART_SetConfig+0x38c>)
 8002e42:	fba3 1302 	umull	r1, r3, r3, r2
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2164      	movs	r1, #100	; 0x64
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	3332      	adds	r3, #50	; 0x32
 8002e54:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <UART_SetConfig+0x38c>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	f003 020f 	and.w	r2, r3, #15
 8002e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4432      	add	r2, r6
 8002e66:	609a      	str	r2, [r3, #8]
}
 8002e68:	bf00      	nop
 8002e6a:	377c      	adds	r7, #124	; 0x7c
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e72:	bf00      	nop
 8002e74:	40011000 	.word	0x40011000
 8002e78:	40011400 	.word	0x40011400
 8002e7c:	51eb851f 	.word	0x51eb851f

08002e80 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002e8a:	f107 0308 	add.w	r3, r7, #8
 8002e8e:	2218      	movs	r2, #24
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fe68 	bl	8003b68 <memset>
  rq.ogf = 0x03;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8002ea0:	1dfb      	adds	r3, r7, #7
 8002ea2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fba4 	bl	80035fc <hci_send_req>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	da01      	bge.n	8002ebe <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8002eba:	23ff      	movs	r3, #255	; 0xff
 8002ebc:	e005      	b.n	8002eca <hci_reset+0x4a>
  if (status) {
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <hci_reset+0x48>
    return status;
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	e000      	b.n	8002eca <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8002ed2:	b5b0      	push	{r4, r5, r7, lr}
 8002ed4:	b0ce      	sub	sp, #312	; 0x138
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4605      	mov	r5, r0
 8002eda:	460c      	mov	r4, r1
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	462a      	mov	r2, r5
 8002ee4:	701a      	strb	r2, [r3, #0]
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	4622      	mov	r2, r4
 8002eea:	801a      	strh	r2, [r3, #0]
 8002eec:	1cbb      	adds	r3, r7, #2
 8002eee:	4602      	mov	r2, r0
 8002ef0:	801a      	strh	r2, [r3, #0]
 8002ef2:	1dbb      	adds	r3, r7, #6
 8002ef4:	460a      	mov	r2, r1
 8002ef6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8002ef8:	f107 030c 	add.w	r3, r7, #12
 8002efc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8002f00:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8002f04:	3308      	adds	r3, #8
 8002f06:	f107 020c 	add.w	r2, r7, #12
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8002f10:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8002f14:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8002f18:	4413      	add	r3, r2
 8002f1a:	3309      	adds	r3, #9
 8002f1c:	f107 020c 	add.w	r2, r7, #12
 8002f20:	4413      	add	r3, r2
 8002f22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8002f26:	f107 030b 	add.w	r3, r7, #11
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8002f34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f38:	1dfa      	adds	r2, r7, #7
 8002f3a:	7812      	ldrb	r2, [r2, #0]
 8002f3c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8002f3e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8002f42:	3301      	adds	r3, #1
 8002f44:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8002f48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f4c:	1d3a      	adds	r2, r7, #4
 8002f4e:	8812      	ldrh	r2, [r2, #0]
 8002f50:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8002f54:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8002f58:	3302      	adds	r3, #2
 8002f5a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8002f5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f62:	1cba      	adds	r2, r7, #2
 8002f64:	8812      	ldrh	r2, [r2, #0]
 8002f66:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8002f6a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8002f6e:	3302      	adds	r3, #2
 8002f70:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8002f74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f78:	1dba      	adds	r2, r7, #6
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8002f7e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8002f82:	3301      	adds	r3, #1
 8002f84:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8002f88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f8c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8002f90:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8002f92:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8002f96:	3301      	adds	r3, #1
 8002f98:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8002f9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002fa0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8002fa4:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8002fa6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8002faa:	3301      	adds	r3, #1
 8002fac:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8002fb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8002fba:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fdc4 	bl	8003b4c <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8002fc4:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8002fc8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8002fcc:	4413      	add	r3, r2
 8002fce:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8002fd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002fd6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8002fda:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8002fdc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8002fe6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002fea:	3301      	adds	r3, #1
 8002fec:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8002ff0:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fda9 	bl	8003b4c <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 8002ffa:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8002ffe:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003002:	4413      	add	r3, r2
 8003004:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8003008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800300c:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8003010:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003012:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003016:	3302      	adds	r3, #2
 8003018:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800301c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003020:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8003024:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8003026:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800302a:	3302      	adds	r3, #2
 800302c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003030:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003034:	2218      	movs	r2, #24
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fd95 	bl	8003b68 <memset>
  rq.ogf = 0x3f;
 800303e:	233f      	movs	r3, #63	; 0x3f
 8003040:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8003044:	2383      	movs	r3, #131	; 0x83
 8003046:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800304a:	f107 030c 	add.w	r3, r7, #12
 800304e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003052:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003056:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800305a:	f107 030b 	add.w	r3, r7, #11
 800305e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003062:	2301      	movs	r3, #1
 8003064:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8003068:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fac4 	bl	80035fc <hci_send_req>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	da01      	bge.n	800307e <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800307a:	23ff      	movs	r3, #255	; 0xff
 800307c:	e009      	b.n	8003092 <aci_gap_set_discoverable+0x1c0>
  if (status) {
 800307e:	f107 030b 	add.w	r3, r7, #11
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <aci_gap_set_discoverable+0x1be>
    return status;
 8003088:	f107 030b 	add.w	r3, r7, #11
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	e000      	b.n	8003092 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8003098:	46bd      	mov	sp, r7
 800309a:	bdb0      	pop	{r4, r5, r7, pc}

0800309c <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b0cf      	sub	sp, #316	; 0x13c
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4604      	mov	r4, r0
 80030a4:	4608      	mov	r0, r1
 80030a6:	4611      	mov	r1, r2
 80030a8:	463a      	mov	r2, r7
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	1dfb      	adds	r3, r7, #7
 80030ae:	4622      	mov	r2, r4
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	1dbb      	adds	r3, r7, #6
 80030b4:	4602      	mov	r2, r0
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	1d7b      	adds	r3, r7, #5
 80030ba:	460a      	mov	r2, r1
 80030bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80030be:	f107 0314 	add.w	r3, r7, #20
 80030c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80030c6:	f107 030c 	add.w	r3, r7, #12
 80030ca:	2207      	movs	r2, #7
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fd4a 	bl	8003b68 <memset>
  uint8_t index_input = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 80030da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80030de:	1dfa      	adds	r2, r7, #7
 80030e0:	7812      	ldrb	r2, [r2, #0]
 80030e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80030e4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80030e8:	3301      	adds	r3, #1
 80030ea:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 80030ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80030f2:	1dba      	adds	r2, r7, #6
 80030f4:	7812      	ldrb	r2, [r2, #0]
 80030f6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80030f8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80030fc:	3301      	adds	r3, #1
 80030fe:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8003102:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003106:	1d7a      	adds	r2, r7, #5
 8003108:	7812      	ldrb	r2, [r2, #0]
 800310a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800310c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8003110:	3301      	adds	r3, #1
 8003112:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003116:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800311a:	2218      	movs	r2, #24
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fd22 	bl	8003b68 <memset>
  rq.ogf = 0x3f;
 8003124:	233f      	movs	r3, #63	; 0x3f
 8003126:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 800312a:	238a      	movs	r3, #138	; 0x8a
 800312c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8003138:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800313c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8003140:	f107 030c 	add.w	r3, r7, #12
 8003144:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8003148:	2307      	movs	r3, #7
 800314a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800314e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003152:	2100      	movs	r1, #0
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fa51 	bl	80035fc <hci_send_req>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	da01      	bge.n	8003164 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8003160:	23ff      	movs	r3, #255	; 0xff
 8003162:	e021      	b.n	80031a8 <aci_gap_init+0x10c>
  if (resp.Status) {
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <aci_gap_init+0xda>
    return resp.Status;
 800316e:	f107 030c 	add.w	r3, r7, #12
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	e018      	b.n	80031a8 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8003176:	f107 030c 	add.w	r3, r7, #12
 800317a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800317e:	b29a      	uxth	r2, r3
 8003180:	463b      	mov	r3, r7
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8003186:	f107 030c 	add.w	r3, r7, #12
 800318a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800318e:	b29a      	uxth	r2, r3
 8003190:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003194:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8003196:	f107 030c 	add.w	r3, r7, #12
 800319a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800319e:	b29a      	uxth	r2, r3
 80031a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031a4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd90      	pop	{r4, r7, pc}

080031b2 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b088      	sub	sp, #32
 80031b6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80031bc:	f107 0308 	add.w	r3, r7, #8
 80031c0:	2218      	movs	r2, #24
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fccf 	bl	8003b68 <memset>
  rq.ogf = 0x3f;
 80031ca:	233f      	movs	r3, #63	; 0x3f
 80031cc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80031ce:	f240 1301 	movw	r3, #257	; 0x101
 80031d2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80031d4:	1dfb      	adds	r3, r7, #7
 80031d6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80031d8:	2301      	movs	r3, #1
 80031da:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80031dc:	f107 0308 	add.w	r3, r7, #8
 80031e0:	2100      	movs	r1, #0
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fa0a 	bl	80035fc <hci_send_req>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	da01      	bge.n	80031f2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80031ee:	23ff      	movs	r3, #255	; 0xff
 80031f0:	e005      	b.n	80031fe <aci_gatt_init+0x4c>
  if (status) {
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <aci_gatt_init+0x4a>
    return status;
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	e000      	b.n	80031fe <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8003206:	b5b0      	push	{r4, r5, r7, lr}
 8003208:	b0cc      	sub	sp, #304	; 0x130
 800320a:	af00      	add	r7, sp, #0
 800320c:	4605      	mov	r5, r0
 800320e:	460c      	mov	r4, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	1dbb      	adds	r3, r7, #6
 8003216:	462a      	mov	r2, r5
 8003218:	801a      	strh	r2, [r3, #0]
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	4622      	mov	r2, r4
 800321e:	801a      	strh	r2, [r3, #0]
 8003220:	1cfb      	adds	r3, r7, #3
 8003222:	4602      	mov	r2, r0
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	1cbb      	adds	r3, r7, #2
 8003228:	460a      	mov	r2, r1
 800322a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003234:	f107 030b 	add.w	r3, r7, #11
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8003242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003246:	1dba      	adds	r2, r7, #6
 8003248:	8812      	ldrh	r2, [r2, #0]
 800324a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800324c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003250:	3302      	adds	r3, #2
 8003252:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 8003256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800325a:	1d3a      	adds	r2, r7, #4
 800325c:	8812      	ldrh	r2, [r2, #0]
 800325e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8003260:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003264:	3302      	adds	r3, #2
 8003266:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 800326a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800326e:	1cfa      	adds	r2, r7, #3
 8003270:	7812      	ldrb	r2, [r2, #0]
 8003272:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8003274:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003278:	3301      	adds	r3, #1
 800327a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800327e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003282:	1cba      	adds	r2, r7, #2
 8003284:	7812      	ldrb	r2, [r2, #0]
 8003286:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003288:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800328c:	3301      	adds	r3, #1
 800328e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8003292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003296:	1d98      	adds	r0, r3, #6
 8003298:	1cbb      	adds	r3, r7, #2
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80032a2:	f000 fc53 	bl	8003b4c <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 80032a6:	1cbb      	adds	r3, r7, #2
 80032a8:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80032b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032b8:	2218      	movs	r2, #24
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fc53 	bl	8003b68 <memset>
  rq.ogf = 0x3f;
 80032c2:	233f      	movs	r3, #63	; 0x3f
 80032c4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80032c8:	f44f 7383 	mov.w	r3, #262	; 0x106
 80032cc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80032d0:	f107 030c 	add.w	r3, r7, #12
 80032d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80032d8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80032dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80032e0:	f107 030b 	add.w	r3, r7, #11
 80032e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80032ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 f981 	bl	80035fc <hci_send_req>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da01      	bge.n	8003304 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8003300:	23ff      	movs	r3, #255	; 0xff
 8003302:	e009      	b.n	8003318 <aci_gatt_update_char_value+0x112>
  if (status) {
 8003304:	f107 030b 	add.w	r3, r7, #11
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <aci_gatt_update_char_value+0x110>
    return status;
 800330e:	f107 030b 	add.w	r3, r7, #11
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	e000      	b.n	8003318 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800331e:	46bd      	mov	sp, r7
 8003320:	bdb0      	pop	{r4, r5, r7, pc}

08003322 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b0cc      	sub	sp, #304	; 0x130
 8003326:	af00      	add	r7, sp, #0
 8003328:	463b      	mov	r3, r7
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	1dfb      	adds	r3, r7, #7
 800332e:	4602      	mov	r2, r0
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	1dbb      	adds	r3, r7, #6
 8003334:	460a      	mov	r2, r1
 8003336:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8003338:	f107 030c 	add.w	r3, r7, #12
 800333c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003340:	f107 030b 	add.w	r3, r7, #11
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 800334e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003352:	1dfa      	adds	r2, r7, #7
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003358:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800335c:	3301      	adds	r3, #1
 800335e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 8003362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003366:	1dba      	adds	r2, r7, #6
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800336c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003370:	3301      	adds	r3, #1
 8003372:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8003376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800337a:	1c98      	adds	r0, r3, #2
 800337c:	1dbb      	adds	r3, r7, #6
 800337e:	781a      	ldrb	r2, [r3, #0]
 8003380:	463b      	mov	r3, r7
 8003382:	6819      	ldr	r1, [r3, #0]
 8003384:	f000 fbe2 	bl	8003b4c <memcpy>
    index_input += Length*sizeof(uint8_t);
 8003388:	1dbb      	adds	r3, r7, #6
 800338a:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	4413      	add	r3, r2
 8003392:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003396:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800339a:	2218      	movs	r2, #24
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fbe2 	bl	8003b68 <memset>
  rq.ogf = 0x3f;
 80033a4:	233f      	movs	r3, #63	; 0x3f
 80033a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80033aa:	230c      	movs	r3, #12
 80033ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80033b0:	f107 030c 	add.w	r3, r7, #12
 80033b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80033b8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80033bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80033c0:	f107 030b 	add.w	r3, r7, #11
 80033c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80033ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f911 	bl	80035fc <hci_send_req>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	da01      	bge.n	80033e4 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80033e0:	23ff      	movs	r3, #255	; 0xff
 80033e2:	e009      	b.n	80033f8 <aci_hal_write_config_data+0xd6>
  if (status) {
 80033e4:	f107 030b 	add.w	r3, r7, #11
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <aci_hal_write_config_data+0xd4>
    return status;
 80033ee:	f107 030b 	add.w	r3, r7, #11
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	e000      	b.n	80033f8 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3308      	adds	r3, #8
 800340e:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d001      	beq.n	800341c <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8003418:	2301      	movs	r3, #1
 800341a:	e00c      	b.n	8003436 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3302      	adds	r3, #2
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800342a:	3b03      	subs	r3, #3
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8003430:	2302      	movs	r3, #2
 8003432:	e000      	b.n	8003436 <verify_packet+0x34>
  
  return 0;      
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b0a6      	sub	sp, #152	; 0x98
 8003448:	af00      	add	r7, sp, #0
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	4603      	mov	r3, r0
 800344e:	81fb      	strh	r3, [r7, #14]
 8003450:	460b      	mov	r3, r1
 8003452:	81bb      	strh	r3, [r7, #12]
 8003454:	4613      	mov	r3, r2
 8003456:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8003458:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800345c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003460:	b21a      	sxth	r2, r3
 8003462:	89fb      	ldrh	r3, [r7, #14]
 8003464:	029b      	lsls	r3, r3, #10
 8003466:	b21b      	sxth	r3, r3
 8003468:	4313      	orrs	r3, r2
 800346a:	b21b      	sxth	r3, r3
 800346c:	b29b      	uxth	r3, r3
 800346e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8003470:	7afb      	ldrb	r3, [r7, #11]
 8003472:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8003474:	2301      	movs	r3, #1
 8003476:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003478:	f107 0318 	add.w	r3, r7, #24
 800347c:	3301      	adds	r3, #1
 800347e:	461a      	mov	r2, r3
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	8819      	ldrh	r1, [r3, #0]
 8003486:	789b      	ldrb	r3, [r3, #2]
 8003488:	8011      	strh	r1, [r2, #0]
 800348a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800348c:	f107 0318 	add.w	r3, r7, #24
 8003490:	3304      	adds	r3, #4
 8003492:	7afa      	ldrb	r2, [r7, #11]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fb58 	bl	8003b4c <memcpy>
  
  if (hciContext.io.Send)
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <send_cmd+0x7c>)
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <send_cmd+0x7c>)
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	7afa      	ldrb	r2, [r7, #11]
 80034aa:	b292      	uxth	r2, r2
 80034ac:	3204      	adds	r2, #4
 80034ae:	b291      	uxth	r1, r2
 80034b0:	f107 0218 	add.w	r2, r7, #24
 80034b4:	4610      	mov	r0, r2
 80034b6:	4798      	blx	r3
  }
}
 80034b8:	bf00      	nop
 80034ba:	3798      	adds	r7, #152	; 0x98
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000714 	.word	0x20000714

080034c4 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80034ce:	e00a      	b.n	80034e6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80034d0:	f107 030c 	add.w	r3, r7, #12
 80034d4:	4619      	mov	r1, r3
 80034d6:	6838      	ldr	r0, [r7, #0]
 80034d8:	f000 fabe 	bl	8003a58 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4619      	mov	r1, r3
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fa25 	bl	8003930 <list_insert_head>
  while (!list_is_empty(src_list))
 80034e6:	6838      	ldr	r0, [r7, #0]
 80034e8:	f000 fa00 	bl	80038ec <list_is_empty>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0ee      	beq.n	80034d0 <move_list+0xc>
  }
}
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003502:	e009      	b.n	8003518 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8003504:	1d3b      	adds	r3, r7, #4
 8003506:	4619      	mov	r1, r3
 8003508:	4809      	ldr	r0, [pc, #36]	; (8003530 <free_event_list+0x34>)
 800350a:	f000 fa7e 	bl	8003a0a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4619      	mov	r1, r3
 8003512:	4808      	ldr	r0, [pc, #32]	; (8003534 <free_event_list+0x38>)
 8003514:	f000 fa32 	bl	800397c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003518:	4806      	ldr	r0, [pc, #24]	; (8003534 <free_event_list+0x38>)
 800351a:	f000 fac4 	bl	8003aa6 <list_get_size>
 800351e:	4603      	mov	r3, r0
 8003520:	2b04      	cmp	r3, #4
 8003522:	ddef      	ble.n	8003504 <free_event_list+0x8>
  }
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	200007ec 	.word	0x200007ec
 8003534:	200007e4 	.word	0x200007e4

08003538 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8003548:	4a18      	ldr	r2, [pc, #96]	; (80035ac <hci_init+0x74>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800354e:	4818      	ldr	r0, [pc, #96]	; (80035b0 <hci_init+0x78>)
 8003550:	f000 f9bc 	bl	80038cc <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8003554:	4817      	ldr	r0, [pc, #92]	; (80035b4 <hci_init+0x7c>)
 8003556:	f000 f9b9 	bl	80038cc <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800355a:	f7fd f959 	bl	8000810 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800355e:	2300      	movs	r3, #0
 8003560:	73fb      	strb	r3, [r7, #15]
 8003562:	e00c      	b.n	800357e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	228c      	movs	r2, #140	; 0x8c
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <hci_init+0x80>)
 800356e:	4413      	add	r3, r2
 8003570:	4619      	mov	r1, r3
 8003572:	480f      	ldr	r0, [pc, #60]	; (80035b0 <hci_init+0x78>)
 8003574:	f000 fa02 	bl	800397c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	3301      	adds	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b09      	cmp	r3, #9
 8003582:	d9ef      	bls.n	8003564 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <hci_init+0x74>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <hci_init+0x5c>
 800358c:	4b07      	ldr	r3, [pc, #28]	; (80035ac <hci_init+0x74>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2000      	movs	r0, #0
 8003592:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <hci_init+0x74>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <hci_init+0x6a>
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <hci_init+0x74>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4798      	blx	r3
}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000714 	.word	0x20000714
 80035b0:	200007e4 	.word	0x200007e4
 80035b4:	200007ec 	.word	0x200007ec
 80035b8:	2000019c 	.word	0x2000019c

080035bc <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <hci_register_io_bus+0x3c>)
 80035ca:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4a09      	ldr	r2, [pc, #36]	; (80035f8 <hci_register_io_bus+0x3c>)
 80035d2:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	4a07      	ldr	r2, [pc, #28]	; (80035f8 <hci_register_io_bus+0x3c>)
 80035da:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4a05      	ldr	r2, [pc, #20]	; (80035f8 <hci_register_io_bus+0x3c>)
 80035e2:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a03      	ldr	r2, [pc, #12]	; (80035f8 <hci_register_io_bus+0x3c>)
 80035ea:	6093      	str	r3, [r2, #8]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	20000714 	.word	0x20000714

080035fc <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08e      	sub	sp, #56	; 0x38
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	885b      	ldrh	r3, [r3, #2]
 800360c:	b21b      	sxth	r3, r3
 800360e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003612:	b21a      	sxth	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	029b      	lsls	r3, r3, #10
 800361a:	b21b      	sxth	r3, r3
 800361c:	4313      	orrs	r3, r2
 800361e:	b21b      	sxth	r3, r3
 8003620:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8003626:	f107 0308 	add.w	r3, r7, #8
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f94e 	bl	80038cc <list_init_head>

  free_event_list();
 8003630:	f7ff ff64 	bl	80034fc <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	8818      	ldrh	r0, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8859      	ldrh	r1, [r3, #2]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f7ff fefd 	bl	8003444 <send_cmd>
  
  if (async)
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <hci_send_req+0x58>
  {
    return 0;
 8003650:	2300      	movs	r3, #0
 8003652:	e0e5      	b.n	8003820 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8003654:	f7fd fdf8 	bl	8001248 <HAL_GetTick>
 8003658:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800365a:	f7fd fdf5 	bl	8001248 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003668:	f200 80b6 	bhi.w	80037d8 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800366c:	486e      	ldr	r0, [pc, #440]	; (8003828 <hci_send_req+0x22c>)
 800366e:	f000 f93d 	bl	80038ec <list_is_empty>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d000      	beq.n	800367a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003678:	e7ef      	b.n	800365a <hci_send_req+0x5e>
      {
        break;
 800367a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800367c:	f107 0310 	add.w	r3, r7, #16
 8003680:	4619      	mov	r1, r3
 8003682:	4869      	ldr	r0, [pc, #420]	; (8003828 <hci_send_req+0x22c>)
 8003684:	f000 f9c1 	bl	8003a0a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	3308      	adds	r3, #8
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b04      	cmp	r3, #4
 8003694:	d17b      	bne.n	800378e <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	3301      	adds	r3, #1
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	3308      	adds	r3, #8
 80036a0:	3303      	adds	r3, #3
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80036aa:	3b03      	subs	r3, #3
 80036ac:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b3e      	cmp	r3, #62	; 0x3e
 80036b4:	d04d      	beq.n	8003752 <hci_send_req+0x156>
 80036b6:	2b3e      	cmp	r3, #62	; 0x3e
 80036b8:	dc6b      	bgt.n	8003792 <hci_send_req+0x196>
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	f000 808e 	beq.w	80037dc <hci_send_req+0x1e0>
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	dc66      	bgt.n	8003792 <hci_send_req+0x196>
 80036c4:	2b0e      	cmp	r3, #14
 80036c6:	d024      	beq.n	8003712 <hci_send_req+0x116>
 80036c8:	2b0f      	cmp	r3, #15
 80036ca:	d162      	bne.n	8003792 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	885b      	ldrh	r3, [r3, #2]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80036d8:	429a      	cmp	r2, r3
 80036da:	f040 8081 	bne.w	80037e0 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b0f      	cmp	r3, #15
 80036e4:	d004      	beq.n	80036f0 <hci_send_req+0xf4>
          if (cs->status) {
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d053      	beq.n	8003796 <hci_send_req+0x19a>
            goto failed;
 80036ee:	e07a      	b.n	80037e6 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	bf28      	it	cs
 80036fa:	461a      	movcs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6918      	ldr	r0, [r3, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	461a      	mov	r2, r3
 800370a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800370c:	f000 fa1e 	bl	8003b4c <memcpy>
        goto done;
 8003710:	e07a      	b.n	8003808 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800371c:	b29b      	uxth	r3, r3
 800371e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003720:	429a      	cmp	r2, r3
 8003722:	d15f      	bne.n	80037e4 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	3303      	adds	r3, #3
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	3b03      	subs	r3, #3
 800372e:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	429a      	cmp	r2, r3
 8003738:	bf28      	it	cs
 800373a:	461a      	movcs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6918      	ldr	r0, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	461a      	mov	r2, r3
 800374a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800374c:	f000 f9fe 	bl	8003b4c <memcpy>
        goto done;
 8003750:	e05a      	b.n	8003808 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d11a      	bne.n	800379a <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	3b01      	subs	r3, #1
 8003768:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	429a      	cmp	r2, r3
 8003772:	bf28      	it	cs
 8003774:	461a      	movcs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6918      	ldr	r0, [r3, #16]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	1c59      	adds	r1, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	461a      	mov	r2, r3
 8003788:	f000 f9e0 	bl	8003b4c <memcpy>
        goto done;
 800378c:	e03c      	b.n	8003808 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800378e:	bf00      	nop
 8003790:	e004      	b.n	800379c <hci_send_req+0x1a0>
        break;
 8003792:	bf00      	nop
 8003794:	e002      	b.n	800379c <hci_send_req+0x1a0>
          break;
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <hci_send_req+0x1a0>
          break;
 800379a:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800379c:	4823      	ldr	r0, [pc, #140]	; (800382c <hci_send_req+0x230>)
 800379e:	f000 f8a5 	bl	80038ec <list_is_empty>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00d      	beq.n	80037c4 <hci_send_req+0x1c8>
 80037a8:	481f      	ldr	r0, [pc, #124]	; (8003828 <hci_send_req+0x22c>)
 80037aa:	f000 f89f 	bl	80038ec <list_is_empty>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4619      	mov	r1, r3
 80037b8:	481c      	ldr	r0, [pc, #112]	; (800382c <hci_send_req+0x230>)
 80037ba:	f000 f8df 	bl	800397c <list_insert_tail>
      hciReadPacket=NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	e008      	b.n	80037d6 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	f107 0308 	add.w	r3, r7, #8
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 f8d5 	bl	800397c <list_insert_tail>
      hciReadPacket=NULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
  {
 80037d6:	e73d      	b.n	8003654 <hci_send_req+0x58>
        goto failed;
 80037d8:	bf00      	nop
 80037da:	e004      	b.n	80037e6 <hci_send_req+0x1ea>
        goto failed;
 80037dc:	bf00      	nop
 80037de:	e002      	b.n	80037e6 <hci_send_req+0x1ea>
          goto failed;
 80037e0:	bf00      	nop
 80037e2:	e000      	b.n	80037e6 <hci_send_req+0x1ea>
          goto failed;
 80037e4:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4619      	mov	r1, r3
 80037f0:	480e      	ldr	r0, [pc, #56]	; (800382c <hci_send_req+0x230>)
 80037f2:	f000 f89d 	bl	8003930 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80037f6:	f107 0308 	add.w	r3, r7, #8
 80037fa:	4619      	mov	r1, r3
 80037fc:	480a      	ldr	r0, [pc, #40]	; (8003828 <hci_send_req+0x22c>)
 80037fe:	f7ff fe61 	bl	80034c4 <move_list>

  return -1;
 8003802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003806:	e00b      	b.n	8003820 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	4619      	mov	r1, r3
 800380c:	4807      	ldr	r0, [pc, #28]	; (800382c <hci_send_req+0x230>)
 800380e:	f000 f88f 	bl	8003930 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003812:	f107 0308 	add.w	r3, r7, #8
 8003816:	4619      	mov	r1, r3
 8003818:	4803      	ldr	r0, [pc, #12]	; (8003828 <hci_send_req+0x22c>)
 800381a:	f7ff fe53 	bl	80034c4 <move_list>

  return 0;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3738      	adds	r7, #56	; 0x38
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	200007ec 	.word	0x200007ec
 800382c:	200007e4 	.word	0x200007e4

08003830 <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8003840:	481f      	ldr	r0, [pc, #124]	; (80038c0 <hci_notify_asynch_evt+0x90>)
 8003842:	f000 f853 	bl	80038ec <list_is_empty>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d132      	bne.n	80038b2 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800384c:	f107 030c 	add.w	r3, r7, #12
 8003850:	4619      	mov	r1, r3
 8003852:	481b      	ldr	r0, [pc, #108]	; (80038c0 <hci_notify_asynch_evt+0x90>)
 8003854:	f000 f8d9 	bl	8003a0a <list_remove_head>
    
    if (hciContext.io.Receive)
 8003858:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <hci_notify_asynch_evt+0x94>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d02a      	beq.n	80038b6 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8003860:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <hci_notify_asynch_evt+0x94>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	3208      	adds	r2, #8
 8003868:	2180      	movs	r1, #128	; 0x80
 800386a:	4610      	mov	r0, r2
 800386c:	4798      	blx	r3
 800386e:	4603      	mov	r3, r0
 8003870:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8003872:	7cfb      	ldrb	r3, [r7, #19]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d016      	beq.n	80038a6 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	7cfa      	ldrb	r2, [r7, #19]
 800387c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fdbd 	bl	8003402 <verify_packet>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4619      	mov	r1, r3
 8003892:	480d      	ldr	r0, [pc, #52]	; (80038c8 <hci_notify_asynch_evt+0x98>)
 8003894:	f000 f872 	bl	800397c <list_insert_tail>
 8003898:	e00d      	b.n	80038b6 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4619      	mov	r1, r3
 800389e:	4808      	ldr	r0, [pc, #32]	; (80038c0 <hci_notify_asynch_evt+0x90>)
 80038a0:	f000 f846 	bl	8003930 <list_insert_head>
 80038a4:	e007      	b.n	80038b6 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4619      	mov	r1, r3
 80038aa:	4805      	ldr	r0, [pc, #20]	; (80038c0 <hci_notify_asynch_evt+0x90>)
 80038ac:	f000 f840 	bl	8003930 <list_insert_head>
 80038b0:	e001      	b.n	80038b6 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80038b6:	697b      	ldr	r3, [r7, #20]
  
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	200007e4 	.word	0x200007e4
 80038c4:	20000714 	.word	0x20000714
 80038c8:	200007ec 	.word	0x200007ec

080038cc <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	605a      	str	r2, [r3, #4]
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f4:	f3ef 8310 	mrs	r3, PRIMASK
 80038f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80038fa:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80038fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80038fe:	b672      	cpsid	i
}
 8003900:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	429a      	cmp	r2, r3
 800390a:	d102      	bne.n	8003912 <list_is_empty+0x26>
  {
    return_value = 1;
 800390c:	2301      	movs	r3, #1
 800390e:	75fb      	strb	r3, [r7, #23]
 8003910:	e001      	b.n	8003916 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	75fb      	strb	r3, [r7, #23]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f383 8810 	msr	PRIMASK, r3
}
 8003920:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8003922:	7dfb      	ldrb	r3, [r7, #23]
}
 8003924:	4618      	mov	r0, r3
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393a:	f3ef 8310 	mrs	r3, PRIMASK
 800393e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003940:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003942:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003944:	b672      	cpsid	i
}
 8003946:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f383 8810 	msr	PRIMASK, r3
}
 800396e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003986:	f3ef 8310 	mrs	r3, PRIMASK
 800398a:	60fb      	str	r3, [r7, #12]
  return(result);
 800398c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800398e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003990:	b672      	cpsid	i
}
 8003992:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f383 8810 	msr	PRIMASK, r3
}
 80039ba:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d0:	f3ef 8310 	mrs	r3, PRIMASK
 80039d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80039d6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80039d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80039da:	b672      	cpsid	i
}
 80039dc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6852      	ldr	r2, [r2, #4]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f383 8810 	msr	PRIMASK, r3
}
 80039fc:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b086      	sub	sp, #24
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a14:	f3ef 8310 	mrs	r3, PRIMASK
 8003a18:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003a1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a1e:	b672      	cpsid	i
}
 8003a20:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff ffca 	bl	80039c8 <list_remove_node>
  (*node)->next = NULL;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2200      	movs	r2, #0
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f383 8810 	msr	PRIMASK, r3
}
 8003a4e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003a50:	bf00      	nop
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a62:	f3ef 8310 	mrs	r3, PRIMASK
 8003a66:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a68:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003a6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a6c:	b672      	cpsid	i
}
 8003a6e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff ffa3 	bl	80039c8 <list_remove_node>
  (*node)->next = NULL;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f383 8810 	msr	PRIMASK, r3
}
 8003a9c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003a9e:	bf00      	nop
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b089      	sub	sp, #36	; 0x24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  int size = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab6:	613b      	str	r3, [r7, #16]
  return(result);
 8003ab8:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003aba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003abc:	b672      	cpsid	i
}
 8003abe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8003ac6:	e005      	b.n	8003ad4 <list_get_size+0x2e>
  {
    size++;
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	3301      	adds	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d1f5      	bne.n	8003ac8 <list_get_size+0x22>
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f383 8810 	msr	PRIMASK, r3
}
 8003ae6:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8003ae8:	69fb      	ldr	r3, [r7, #28]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3724      	adds	r7, #36	; 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <__errno>:
 8003af8:	4b01      	ldr	r3, [pc, #4]	; (8003b00 <__errno+0x8>)
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000014 	.word	0x20000014

08003b04 <__libc_init_array>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	4d0d      	ldr	r5, [pc, #52]	; (8003b3c <__libc_init_array+0x38>)
 8003b08:	4c0d      	ldr	r4, [pc, #52]	; (8003b40 <__libc_init_array+0x3c>)
 8003b0a:	1b64      	subs	r4, r4, r5
 8003b0c:	10a4      	asrs	r4, r4, #2
 8003b0e:	2600      	movs	r6, #0
 8003b10:	42a6      	cmp	r6, r4
 8003b12:	d109      	bne.n	8003b28 <__libc_init_array+0x24>
 8003b14:	4d0b      	ldr	r5, [pc, #44]	; (8003b44 <__libc_init_array+0x40>)
 8003b16:	4c0c      	ldr	r4, [pc, #48]	; (8003b48 <__libc_init_array+0x44>)
 8003b18:	f000 fcf4 	bl	8004504 <_init>
 8003b1c:	1b64      	subs	r4, r4, r5
 8003b1e:	10a4      	asrs	r4, r4, #2
 8003b20:	2600      	movs	r6, #0
 8003b22:	42a6      	cmp	r6, r4
 8003b24:	d105      	bne.n	8003b32 <__libc_init_array+0x2e>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2c:	4798      	blx	r3
 8003b2e:	3601      	adds	r6, #1
 8003b30:	e7ee      	b.n	8003b10 <__libc_init_array+0xc>
 8003b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b36:	4798      	blx	r3
 8003b38:	3601      	adds	r6, #1
 8003b3a:	e7f2      	b.n	8003b22 <__libc_init_array+0x1e>
 8003b3c:	08004650 	.word	0x08004650
 8003b40:	08004650 	.word	0x08004650
 8003b44:	08004650 	.word	0x08004650
 8003b48:	08004654 	.word	0x08004654

08003b4c <memcpy>:
 8003b4c:	440a      	add	r2, r1
 8003b4e:	4291      	cmp	r1, r2
 8003b50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003b54:	d100      	bne.n	8003b58 <memcpy+0xc>
 8003b56:	4770      	bx	lr
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b62:	4291      	cmp	r1, r2
 8003b64:	d1f9      	bne.n	8003b5a <memcpy+0xe>
 8003b66:	bd10      	pop	{r4, pc}

08003b68 <memset>:
 8003b68:	4402      	add	r2, r0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d100      	bne.n	8003b72 <memset+0xa>
 8003b70:	4770      	bx	lr
 8003b72:	f803 1b01 	strb.w	r1, [r3], #1
 8003b76:	e7f9      	b.n	8003b6c <memset+0x4>

08003b78 <_puts_r>:
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	460e      	mov	r6, r1
 8003b7c:	4605      	mov	r5, r0
 8003b7e:	b118      	cbz	r0, 8003b88 <_puts_r+0x10>
 8003b80:	6983      	ldr	r3, [r0, #24]
 8003b82:	b90b      	cbnz	r3, 8003b88 <_puts_r+0x10>
 8003b84:	f000 fa48 	bl	8004018 <__sinit>
 8003b88:	69ab      	ldr	r3, [r5, #24]
 8003b8a:	68ac      	ldr	r4, [r5, #8]
 8003b8c:	b913      	cbnz	r3, 8003b94 <_puts_r+0x1c>
 8003b8e:	4628      	mov	r0, r5
 8003b90:	f000 fa42 	bl	8004018 <__sinit>
 8003b94:	4b2c      	ldr	r3, [pc, #176]	; (8003c48 <_puts_r+0xd0>)
 8003b96:	429c      	cmp	r4, r3
 8003b98:	d120      	bne.n	8003bdc <_puts_r+0x64>
 8003b9a:	686c      	ldr	r4, [r5, #4]
 8003b9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b9e:	07db      	lsls	r3, r3, #31
 8003ba0:	d405      	bmi.n	8003bae <_puts_r+0x36>
 8003ba2:	89a3      	ldrh	r3, [r4, #12]
 8003ba4:	0598      	lsls	r0, r3, #22
 8003ba6:	d402      	bmi.n	8003bae <_puts_r+0x36>
 8003ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003baa:	f000 fad3 	bl	8004154 <__retarget_lock_acquire_recursive>
 8003bae:	89a3      	ldrh	r3, [r4, #12]
 8003bb0:	0719      	lsls	r1, r3, #28
 8003bb2:	d51d      	bpl.n	8003bf0 <_puts_r+0x78>
 8003bb4:	6923      	ldr	r3, [r4, #16]
 8003bb6:	b1db      	cbz	r3, 8003bf0 <_puts_r+0x78>
 8003bb8:	3e01      	subs	r6, #1
 8003bba:	68a3      	ldr	r3, [r4, #8]
 8003bbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	60a3      	str	r3, [r4, #8]
 8003bc4:	bb39      	cbnz	r1, 8003c16 <_puts_r+0x9e>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	da38      	bge.n	8003c3c <_puts_r+0xc4>
 8003bca:	4622      	mov	r2, r4
 8003bcc:	210a      	movs	r1, #10
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f000 f848 	bl	8003c64 <__swbuf_r>
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d011      	beq.n	8003bfc <_puts_r+0x84>
 8003bd8:	250a      	movs	r5, #10
 8003bda:	e011      	b.n	8003c00 <_puts_r+0x88>
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <_puts_r+0xd4>)
 8003bde:	429c      	cmp	r4, r3
 8003be0:	d101      	bne.n	8003be6 <_puts_r+0x6e>
 8003be2:	68ac      	ldr	r4, [r5, #8]
 8003be4:	e7da      	b.n	8003b9c <_puts_r+0x24>
 8003be6:	4b1a      	ldr	r3, [pc, #104]	; (8003c50 <_puts_r+0xd8>)
 8003be8:	429c      	cmp	r4, r3
 8003bea:	bf08      	it	eq
 8003bec:	68ec      	ldreq	r4, [r5, #12]
 8003bee:	e7d5      	b.n	8003b9c <_puts_r+0x24>
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	f000 f888 	bl	8003d08 <__swsetup_r>
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d0dd      	beq.n	8003bb8 <_puts_r+0x40>
 8003bfc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003c00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c02:	07da      	lsls	r2, r3, #31
 8003c04:	d405      	bmi.n	8003c12 <_puts_r+0x9a>
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	059b      	lsls	r3, r3, #22
 8003c0a:	d402      	bmi.n	8003c12 <_puts_r+0x9a>
 8003c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c0e:	f000 faa2 	bl	8004156 <__retarget_lock_release_recursive>
 8003c12:	4628      	mov	r0, r5
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	da04      	bge.n	8003c24 <_puts_r+0xac>
 8003c1a:	69a2      	ldr	r2, [r4, #24]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	dc06      	bgt.n	8003c2e <_puts_r+0xb6>
 8003c20:	290a      	cmp	r1, #10
 8003c22:	d004      	beq.n	8003c2e <_puts_r+0xb6>
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	6022      	str	r2, [r4, #0]
 8003c2a:	7019      	strb	r1, [r3, #0]
 8003c2c:	e7c5      	b.n	8003bba <_puts_r+0x42>
 8003c2e:	4622      	mov	r2, r4
 8003c30:	4628      	mov	r0, r5
 8003c32:	f000 f817 	bl	8003c64 <__swbuf_r>
 8003c36:	3001      	adds	r0, #1
 8003c38:	d1bf      	bne.n	8003bba <_puts_r+0x42>
 8003c3a:	e7df      	b.n	8003bfc <_puts_r+0x84>
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	250a      	movs	r5, #10
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	6022      	str	r2, [r4, #0]
 8003c44:	701d      	strb	r5, [r3, #0]
 8003c46:	e7db      	b.n	8003c00 <_puts_r+0x88>
 8003c48:	08004608 	.word	0x08004608
 8003c4c:	08004628 	.word	0x08004628
 8003c50:	080045e8 	.word	0x080045e8

08003c54 <puts>:
 8003c54:	4b02      	ldr	r3, [pc, #8]	; (8003c60 <puts+0xc>)
 8003c56:	4601      	mov	r1, r0
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	f7ff bf8d 	b.w	8003b78 <_puts_r>
 8003c5e:	bf00      	nop
 8003c60:	20000014 	.word	0x20000014

08003c64 <__swbuf_r>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	460e      	mov	r6, r1
 8003c68:	4614      	mov	r4, r2
 8003c6a:	4605      	mov	r5, r0
 8003c6c:	b118      	cbz	r0, 8003c76 <__swbuf_r+0x12>
 8003c6e:	6983      	ldr	r3, [r0, #24]
 8003c70:	b90b      	cbnz	r3, 8003c76 <__swbuf_r+0x12>
 8003c72:	f000 f9d1 	bl	8004018 <__sinit>
 8003c76:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <__swbuf_r+0x98>)
 8003c78:	429c      	cmp	r4, r3
 8003c7a:	d12b      	bne.n	8003cd4 <__swbuf_r+0x70>
 8003c7c:	686c      	ldr	r4, [r5, #4]
 8003c7e:	69a3      	ldr	r3, [r4, #24]
 8003c80:	60a3      	str	r3, [r4, #8]
 8003c82:	89a3      	ldrh	r3, [r4, #12]
 8003c84:	071a      	lsls	r2, r3, #28
 8003c86:	d52f      	bpl.n	8003ce8 <__swbuf_r+0x84>
 8003c88:	6923      	ldr	r3, [r4, #16]
 8003c8a:	b36b      	cbz	r3, 8003ce8 <__swbuf_r+0x84>
 8003c8c:	6923      	ldr	r3, [r4, #16]
 8003c8e:	6820      	ldr	r0, [r4, #0]
 8003c90:	1ac0      	subs	r0, r0, r3
 8003c92:	6963      	ldr	r3, [r4, #20]
 8003c94:	b2f6      	uxtb	r6, r6
 8003c96:	4283      	cmp	r3, r0
 8003c98:	4637      	mov	r7, r6
 8003c9a:	dc04      	bgt.n	8003ca6 <__swbuf_r+0x42>
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	f000 f926 	bl	8003ef0 <_fflush_r>
 8003ca4:	bb30      	cbnz	r0, 8003cf4 <__swbuf_r+0x90>
 8003ca6:	68a3      	ldr	r3, [r4, #8]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	60a3      	str	r3, [r4, #8]
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	6022      	str	r2, [r4, #0]
 8003cb2:	701e      	strb	r6, [r3, #0]
 8003cb4:	6963      	ldr	r3, [r4, #20]
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	4283      	cmp	r3, r0
 8003cba:	d004      	beq.n	8003cc6 <__swbuf_r+0x62>
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	07db      	lsls	r3, r3, #31
 8003cc0:	d506      	bpl.n	8003cd0 <__swbuf_r+0x6c>
 8003cc2:	2e0a      	cmp	r6, #10
 8003cc4:	d104      	bne.n	8003cd0 <__swbuf_r+0x6c>
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f000 f911 	bl	8003ef0 <_fflush_r>
 8003cce:	b988      	cbnz	r0, 8003cf4 <__swbuf_r+0x90>
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <__swbuf_r+0x9c>)
 8003cd6:	429c      	cmp	r4, r3
 8003cd8:	d101      	bne.n	8003cde <__swbuf_r+0x7a>
 8003cda:	68ac      	ldr	r4, [r5, #8]
 8003cdc:	e7cf      	b.n	8003c7e <__swbuf_r+0x1a>
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <__swbuf_r+0xa0>)
 8003ce0:	429c      	cmp	r4, r3
 8003ce2:	bf08      	it	eq
 8003ce4:	68ec      	ldreq	r4, [r5, #12]
 8003ce6:	e7ca      	b.n	8003c7e <__swbuf_r+0x1a>
 8003ce8:	4621      	mov	r1, r4
 8003cea:	4628      	mov	r0, r5
 8003cec:	f000 f80c 	bl	8003d08 <__swsetup_r>
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	d0cb      	beq.n	8003c8c <__swbuf_r+0x28>
 8003cf4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003cf8:	e7ea      	b.n	8003cd0 <__swbuf_r+0x6c>
 8003cfa:	bf00      	nop
 8003cfc:	08004608 	.word	0x08004608
 8003d00:	08004628 	.word	0x08004628
 8003d04:	080045e8 	.word	0x080045e8

08003d08 <__swsetup_r>:
 8003d08:	4b32      	ldr	r3, [pc, #200]	; (8003dd4 <__swsetup_r+0xcc>)
 8003d0a:	b570      	push	{r4, r5, r6, lr}
 8003d0c:	681d      	ldr	r5, [r3, #0]
 8003d0e:	4606      	mov	r6, r0
 8003d10:	460c      	mov	r4, r1
 8003d12:	b125      	cbz	r5, 8003d1e <__swsetup_r+0x16>
 8003d14:	69ab      	ldr	r3, [r5, #24]
 8003d16:	b913      	cbnz	r3, 8003d1e <__swsetup_r+0x16>
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f000 f97d 	bl	8004018 <__sinit>
 8003d1e:	4b2e      	ldr	r3, [pc, #184]	; (8003dd8 <__swsetup_r+0xd0>)
 8003d20:	429c      	cmp	r4, r3
 8003d22:	d10f      	bne.n	8003d44 <__swsetup_r+0x3c>
 8003d24:	686c      	ldr	r4, [r5, #4]
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d2c:	0719      	lsls	r1, r3, #28
 8003d2e:	d42c      	bmi.n	8003d8a <__swsetup_r+0x82>
 8003d30:	06dd      	lsls	r5, r3, #27
 8003d32:	d411      	bmi.n	8003d58 <__swsetup_r+0x50>
 8003d34:	2309      	movs	r3, #9
 8003d36:	6033      	str	r3, [r6, #0]
 8003d38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d3c:	81a3      	strh	r3, [r4, #12]
 8003d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d42:	e03e      	b.n	8003dc2 <__swsetup_r+0xba>
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <__swsetup_r+0xd4>)
 8003d46:	429c      	cmp	r4, r3
 8003d48:	d101      	bne.n	8003d4e <__swsetup_r+0x46>
 8003d4a:	68ac      	ldr	r4, [r5, #8]
 8003d4c:	e7eb      	b.n	8003d26 <__swsetup_r+0x1e>
 8003d4e:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <__swsetup_r+0xd8>)
 8003d50:	429c      	cmp	r4, r3
 8003d52:	bf08      	it	eq
 8003d54:	68ec      	ldreq	r4, [r5, #12]
 8003d56:	e7e6      	b.n	8003d26 <__swsetup_r+0x1e>
 8003d58:	0758      	lsls	r0, r3, #29
 8003d5a:	d512      	bpl.n	8003d82 <__swsetup_r+0x7a>
 8003d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d5e:	b141      	cbz	r1, 8003d72 <__swsetup_r+0x6a>
 8003d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d64:	4299      	cmp	r1, r3
 8003d66:	d002      	beq.n	8003d6e <__swsetup_r+0x66>
 8003d68:	4630      	mov	r0, r6
 8003d6a:	f000 fa59 	bl	8004220 <_free_r>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	6363      	str	r3, [r4, #52]	; 0x34
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d78:	81a3      	strh	r3, [r4, #12]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	f043 0308 	orr.w	r3, r3, #8
 8003d88:	81a3      	strh	r3, [r4, #12]
 8003d8a:	6923      	ldr	r3, [r4, #16]
 8003d8c:	b94b      	cbnz	r3, 8003da2 <__swsetup_r+0x9a>
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d98:	d003      	beq.n	8003da2 <__swsetup_r+0x9a>
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f000 f9ff 	bl	80041a0 <__smakebuf_r>
 8003da2:	89a0      	ldrh	r0, [r4, #12]
 8003da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003da8:	f010 0301 	ands.w	r3, r0, #1
 8003dac:	d00a      	beq.n	8003dc4 <__swsetup_r+0xbc>
 8003dae:	2300      	movs	r3, #0
 8003db0:	60a3      	str	r3, [r4, #8]
 8003db2:	6963      	ldr	r3, [r4, #20]
 8003db4:	425b      	negs	r3, r3
 8003db6:	61a3      	str	r3, [r4, #24]
 8003db8:	6923      	ldr	r3, [r4, #16]
 8003dba:	b943      	cbnz	r3, 8003dce <__swsetup_r+0xc6>
 8003dbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003dc0:	d1ba      	bne.n	8003d38 <__swsetup_r+0x30>
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	0781      	lsls	r1, r0, #30
 8003dc6:	bf58      	it	pl
 8003dc8:	6963      	ldrpl	r3, [r4, #20]
 8003dca:	60a3      	str	r3, [r4, #8]
 8003dcc:	e7f4      	b.n	8003db8 <__swsetup_r+0xb0>
 8003dce:	2000      	movs	r0, #0
 8003dd0:	e7f7      	b.n	8003dc2 <__swsetup_r+0xba>
 8003dd2:	bf00      	nop
 8003dd4:	20000014 	.word	0x20000014
 8003dd8:	08004608 	.word	0x08004608
 8003ddc:	08004628 	.word	0x08004628
 8003de0:	080045e8 	.word	0x080045e8

08003de4 <__sflush_r>:
 8003de4:	898a      	ldrh	r2, [r1, #12]
 8003de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dea:	4605      	mov	r5, r0
 8003dec:	0710      	lsls	r0, r2, #28
 8003dee:	460c      	mov	r4, r1
 8003df0:	d458      	bmi.n	8003ea4 <__sflush_r+0xc0>
 8003df2:	684b      	ldr	r3, [r1, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	dc05      	bgt.n	8003e04 <__sflush_r+0x20>
 8003df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	dc02      	bgt.n	8003e04 <__sflush_r+0x20>
 8003dfe:	2000      	movs	r0, #0
 8003e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e06:	2e00      	cmp	r6, #0
 8003e08:	d0f9      	beq.n	8003dfe <__sflush_r+0x1a>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e10:	682f      	ldr	r7, [r5, #0]
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	d032      	beq.n	8003e7c <__sflush_r+0x98>
 8003e16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	075a      	lsls	r2, r3, #29
 8003e1c:	d505      	bpl.n	8003e2a <__sflush_r+0x46>
 8003e1e:	6863      	ldr	r3, [r4, #4]
 8003e20:	1ac0      	subs	r0, r0, r3
 8003e22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e24:	b10b      	cbz	r3, 8003e2a <__sflush_r+0x46>
 8003e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e28:	1ac0      	subs	r0, r0, r3
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e30:	6a21      	ldr	r1, [r4, #32]
 8003e32:	4628      	mov	r0, r5
 8003e34:	47b0      	blx	r6
 8003e36:	1c43      	adds	r3, r0, #1
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	d106      	bne.n	8003e4a <__sflush_r+0x66>
 8003e3c:	6829      	ldr	r1, [r5, #0]
 8003e3e:	291d      	cmp	r1, #29
 8003e40:	d82c      	bhi.n	8003e9c <__sflush_r+0xb8>
 8003e42:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <__sflush_r+0x108>)
 8003e44:	40ca      	lsrs	r2, r1
 8003e46:	07d6      	lsls	r6, r2, #31
 8003e48:	d528      	bpl.n	8003e9c <__sflush_r+0xb8>
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	6062      	str	r2, [r4, #4]
 8003e4e:	04d9      	lsls	r1, r3, #19
 8003e50:	6922      	ldr	r2, [r4, #16]
 8003e52:	6022      	str	r2, [r4, #0]
 8003e54:	d504      	bpl.n	8003e60 <__sflush_r+0x7c>
 8003e56:	1c42      	adds	r2, r0, #1
 8003e58:	d101      	bne.n	8003e5e <__sflush_r+0x7a>
 8003e5a:	682b      	ldr	r3, [r5, #0]
 8003e5c:	b903      	cbnz	r3, 8003e60 <__sflush_r+0x7c>
 8003e5e:	6560      	str	r0, [r4, #84]	; 0x54
 8003e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e62:	602f      	str	r7, [r5, #0]
 8003e64:	2900      	cmp	r1, #0
 8003e66:	d0ca      	beq.n	8003dfe <__sflush_r+0x1a>
 8003e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e6c:	4299      	cmp	r1, r3
 8003e6e:	d002      	beq.n	8003e76 <__sflush_r+0x92>
 8003e70:	4628      	mov	r0, r5
 8003e72:	f000 f9d5 	bl	8004220 <_free_r>
 8003e76:	2000      	movs	r0, #0
 8003e78:	6360      	str	r0, [r4, #52]	; 0x34
 8003e7a:	e7c1      	b.n	8003e00 <__sflush_r+0x1c>
 8003e7c:	6a21      	ldr	r1, [r4, #32]
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4628      	mov	r0, r5
 8003e82:	47b0      	blx	r6
 8003e84:	1c41      	adds	r1, r0, #1
 8003e86:	d1c7      	bne.n	8003e18 <__sflush_r+0x34>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0c4      	beq.n	8003e18 <__sflush_r+0x34>
 8003e8e:	2b1d      	cmp	r3, #29
 8003e90:	d001      	beq.n	8003e96 <__sflush_r+0xb2>
 8003e92:	2b16      	cmp	r3, #22
 8003e94:	d101      	bne.n	8003e9a <__sflush_r+0xb6>
 8003e96:	602f      	str	r7, [r5, #0]
 8003e98:	e7b1      	b.n	8003dfe <__sflush_r+0x1a>
 8003e9a:	89a3      	ldrh	r3, [r4, #12]
 8003e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ea0:	81a3      	strh	r3, [r4, #12]
 8003ea2:	e7ad      	b.n	8003e00 <__sflush_r+0x1c>
 8003ea4:	690f      	ldr	r7, [r1, #16]
 8003ea6:	2f00      	cmp	r7, #0
 8003ea8:	d0a9      	beq.n	8003dfe <__sflush_r+0x1a>
 8003eaa:	0793      	lsls	r3, r2, #30
 8003eac:	680e      	ldr	r6, [r1, #0]
 8003eae:	bf08      	it	eq
 8003eb0:	694b      	ldreq	r3, [r1, #20]
 8003eb2:	600f      	str	r7, [r1, #0]
 8003eb4:	bf18      	it	ne
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	eba6 0807 	sub.w	r8, r6, r7
 8003ebc:	608b      	str	r3, [r1, #8]
 8003ebe:	f1b8 0f00 	cmp.w	r8, #0
 8003ec2:	dd9c      	ble.n	8003dfe <__sflush_r+0x1a>
 8003ec4:	6a21      	ldr	r1, [r4, #32]
 8003ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ec8:	4643      	mov	r3, r8
 8003eca:	463a      	mov	r2, r7
 8003ecc:	4628      	mov	r0, r5
 8003ece:	47b0      	blx	r6
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	dc06      	bgt.n	8003ee2 <__sflush_r+0xfe>
 8003ed4:	89a3      	ldrh	r3, [r4, #12]
 8003ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eda:	81a3      	strh	r3, [r4, #12]
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ee0:	e78e      	b.n	8003e00 <__sflush_r+0x1c>
 8003ee2:	4407      	add	r7, r0
 8003ee4:	eba8 0800 	sub.w	r8, r8, r0
 8003ee8:	e7e9      	b.n	8003ebe <__sflush_r+0xda>
 8003eea:	bf00      	nop
 8003eec:	20400001 	.word	0x20400001

08003ef0 <_fflush_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	690b      	ldr	r3, [r1, #16]
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	b913      	cbnz	r3, 8003f00 <_fflush_r+0x10>
 8003efa:	2500      	movs	r5, #0
 8003efc:	4628      	mov	r0, r5
 8003efe:	bd38      	pop	{r3, r4, r5, pc}
 8003f00:	b118      	cbz	r0, 8003f0a <_fflush_r+0x1a>
 8003f02:	6983      	ldr	r3, [r0, #24]
 8003f04:	b90b      	cbnz	r3, 8003f0a <_fflush_r+0x1a>
 8003f06:	f000 f887 	bl	8004018 <__sinit>
 8003f0a:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <_fflush_r+0x6c>)
 8003f0c:	429c      	cmp	r4, r3
 8003f0e:	d11b      	bne.n	8003f48 <_fflush_r+0x58>
 8003f10:	686c      	ldr	r4, [r5, #4]
 8003f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0ef      	beq.n	8003efa <_fflush_r+0xa>
 8003f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f1c:	07d0      	lsls	r0, r2, #31
 8003f1e:	d404      	bmi.n	8003f2a <_fflush_r+0x3a>
 8003f20:	0599      	lsls	r1, r3, #22
 8003f22:	d402      	bmi.n	8003f2a <_fflush_r+0x3a>
 8003f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f26:	f000 f915 	bl	8004154 <__retarget_lock_acquire_recursive>
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	f7ff ff59 	bl	8003de4 <__sflush_r>
 8003f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f34:	07da      	lsls	r2, r3, #31
 8003f36:	4605      	mov	r5, r0
 8003f38:	d4e0      	bmi.n	8003efc <_fflush_r+0xc>
 8003f3a:	89a3      	ldrh	r3, [r4, #12]
 8003f3c:	059b      	lsls	r3, r3, #22
 8003f3e:	d4dd      	bmi.n	8003efc <_fflush_r+0xc>
 8003f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f42:	f000 f908 	bl	8004156 <__retarget_lock_release_recursive>
 8003f46:	e7d9      	b.n	8003efc <_fflush_r+0xc>
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <_fflush_r+0x70>)
 8003f4a:	429c      	cmp	r4, r3
 8003f4c:	d101      	bne.n	8003f52 <_fflush_r+0x62>
 8003f4e:	68ac      	ldr	r4, [r5, #8]
 8003f50:	e7df      	b.n	8003f12 <_fflush_r+0x22>
 8003f52:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <_fflush_r+0x74>)
 8003f54:	429c      	cmp	r4, r3
 8003f56:	bf08      	it	eq
 8003f58:	68ec      	ldreq	r4, [r5, #12]
 8003f5a:	e7da      	b.n	8003f12 <_fflush_r+0x22>
 8003f5c:	08004608 	.word	0x08004608
 8003f60:	08004628 	.word	0x08004628
 8003f64:	080045e8 	.word	0x080045e8

08003f68 <std>:
 8003f68:	2300      	movs	r3, #0
 8003f6a:	b510      	push	{r4, lr}
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8003f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f76:	6083      	str	r3, [r0, #8]
 8003f78:	8181      	strh	r1, [r0, #12]
 8003f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8003f7c:	81c2      	strh	r2, [r0, #14]
 8003f7e:	6183      	str	r3, [r0, #24]
 8003f80:	4619      	mov	r1, r3
 8003f82:	2208      	movs	r2, #8
 8003f84:	305c      	adds	r0, #92	; 0x5c
 8003f86:	f7ff fdef 	bl	8003b68 <memset>
 8003f8a:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <std+0x38>)
 8003f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <std+0x3c>)
 8003f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <std+0x40>)
 8003f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <std+0x44>)
 8003f98:	6224      	str	r4, [r4, #32]
 8003f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8003f9c:	bd10      	pop	{r4, pc}
 8003f9e:	bf00      	nop
 8003fa0:	08004395 	.word	0x08004395
 8003fa4:	080043b7 	.word	0x080043b7
 8003fa8:	080043ef 	.word	0x080043ef
 8003fac:	08004413 	.word	0x08004413

08003fb0 <_cleanup_r>:
 8003fb0:	4901      	ldr	r1, [pc, #4]	; (8003fb8 <_cleanup_r+0x8>)
 8003fb2:	f000 b8af 	b.w	8004114 <_fwalk_reent>
 8003fb6:	bf00      	nop
 8003fb8:	08003ef1 	.word	0x08003ef1

08003fbc <__sfmoreglue>:
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	1e4a      	subs	r2, r1, #1
 8003fc0:	2568      	movs	r5, #104	; 0x68
 8003fc2:	4355      	muls	r5, r2
 8003fc4:	460e      	mov	r6, r1
 8003fc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003fca:	f000 f979 	bl	80042c0 <_malloc_r>
 8003fce:	4604      	mov	r4, r0
 8003fd0:	b140      	cbz	r0, 8003fe4 <__sfmoreglue+0x28>
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	e9c0 1600 	strd	r1, r6, [r0]
 8003fd8:	300c      	adds	r0, #12
 8003fda:	60a0      	str	r0, [r4, #8]
 8003fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003fe0:	f7ff fdc2 	bl	8003b68 <memset>
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}

08003fe8 <__sfp_lock_acquire>:
 8003fe8:	4801      	ldr	r0, [pc, #4]	; (8003ff0 <__sfp_lock_acquire+0x8>)
 8003fea:	f000 b8b3 	b.w	8004154 <__retarget_lock_acquire_recursive>
 8003fee:	bf00      	nop
 8003ff0:	200007fc 	.word	0x200007fc

08003ff4 <__sfp_lock_release>:
 8003ff4:	4801      	ldr	r0, [pc, #4]	; (8003ffc <__sfp_lock_release+0x8>)
 8003ff6:	f000 b8ae 	b.w	8004156 <__retarget_lock_release_recursive>
 8003ffa:	bf00      	nop
 8003ffc:	200007fc 	.word	0x200007fc

08004000 <__sinit_lock_acquire>:
 8004000:	4801      	ldr	r0, [pc, #4]	; (8004008 <__sinit_lock_acquire+0x8>)
 8004002:	f000 b8a7 	b.w	8004154 <__retarget_lock_acquire_recursive>
 8004006:	bf00      	nop
 8004008:	200007f7 	.word	0x200007f7

0800400c <__sinit_lock_release>:
 800400c:	4801      	ldr	r0, [pc, #4]	; (8004014 <__sinit_lock_release+0x8>)
 800400e:	f000 b8a2 	b.w	8004156 <__retarget_lock_release_recursive>
 8004012:	bf00      	nop
 8004014:	200007f7 	.word	0x200007f7

08004018 <__sinit>:
 8004018:	b510      	push	{r4, lr}
 800401a:	4604      	mov	r4, r0
 800401c:	f7ff fff0 	bl	8004000 <__sinit_lock_acquire>
 8004020:	69a3      	ldr	r3, [r4, #24]
 8004022:	b11b      	cbz	r3, 800402c <__sinit+0x14>
 8004024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004028:	f7ff bff0 	b.w	800400c <__sinit_lock_release>
 800402c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004030:	6523      	str	r3, [r4, #80]	; 0x50
 8004032:	4b13      	ldr	r3, [pc, #76]	; (8004080 <__sinit+0x68>)
 8004034:	4a13      	ldr	r2, [pc, #76]	; (8004084 <__sinit+0x6c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	62a2      	str	r2, [r4, #40]	; 0x28
 800403a:	42a3      	cmp	r3, r4
 800403c:	bf04      	itt	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	61a3      	streq	r3, [r4, #24]
 8004042:	4620      	mov	r0, r4
 8004044:	f000 f820 	bl	8004088 <__sfp>
 8004048:	6060      	str	r0, [r4, #4]
 800404a:	4620      	mov	r0, r4
 800404c:	f000 f81c 	bl	8004088 <__sfp>
 8004050:	60a0      	str	r0, [r4, #8]
 8004052:	4620      	mov	r0, r4
 8004054:	f000 f818 	bl	8004088 <__sfp>
 8004058:	2200      	movs	r2, #0
 800405a:	60e0      	str	r0, [r4, #12]
 800405c:	2104      	movs	r1, #4
 800405e:	6860      	ldr	r0, [r4, #4]
 8004060:	f7ff ff82 	bl	8003f68 <std>
 8004064:	68a0      	ldr	r0, [r4, #8]
 8004066:	2201      	movs	r2, #1
 8004068:	2109      	movs	r1, #9
 800406a:	f7ff ff7d 	bl	8003f68 <std>
 800406e:	68e0      	ldr	r0, [r4, #12]
 8004070:	2202      	movs	r2, #2
 8004072:	2112      	movs	r1, #18
 8004074:	f7ff ff78 	bl	8003f68 <std>
 8004078:	2301      	movs	r3, #1
 800407a:	61a3      	str	r3, [r4, #24]
 800407c:	e7d2      	b.n	8004024 <__sinit+0xc>
 800407e:	bf00      	nop
 8004080:	080045e4 	.word	0x080045e4
 8004084:	08003fb1 	.word	0x08003fb1

08004088 <__sfp>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	4607      	mov	r7, r0
 800408c:	f7ff ffac 	bl	8003fe8 <__sfp_lock_acquire>
 8004090:	4b1e      	ldr	r3, [pc, #120]	; (800410c <__sfp+0x84>)
 8004092:	681e      	ldr	r6, [r3, #0]
 8004094:	69b3      	ldr	r3, [r6, #24]
 8004096:	b913      	cbnz	r3, 800409e <__sfp+0x16>
 8004098:	4630      	mov	r0, r6
 800409a:	f7ff ffbd 	bl	8004018 <__sinit>
 800409e:	3648      	adds	r6, #72	; 0x48
 80040a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	d503      	bpl.n	80040b0 <__sfp+0x28>
 80040a8:	6833      	ldr	r3, [r6, #0]
 80040aa:	b30b      	cbz	r3, 80040f0 <__sfp+0x68>
 80040ac:	6836      	ldr	r6, [r6, #0]
 80040ae:	e7f7      	b.n	80040a0 <__sfp+0x18>
 80040b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80040b4:	b9d5      	cbnz	r5, 80040ec <__sfp+0x64>
 80040b6:	4b16      	ldr	r3, [pc, #88]	; (8004110 <__sfp+0x88>)
 80040b8:	60e3      	str	r3, [r4, #12]
 80040ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040be:	6665      	str	r5, [r4, #100]	; 0x64
 80040c0:	f000 f847 	bl	8004152 <__retarget_lock_init_recursive>
 80040c4:	f7ff ff96 	bl	8003ff4 <__sfp_lock_release>
 80040c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80040cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80040d0:	6025      	str	r5, [r4, #0]
 80040d2:	61a5      	str	r5, [r4, #24]
 80040d4:	2208      	movs	r2, #8
 80040d6:	4629      	mov	r1, r5
 80040d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040dc:	f7ff fd44 	bl	8003b68 <memset>
 80040e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80040e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80040e8:	4620      	mov	r0, r4
 80040ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ec:	3468      	adds	r4, #104	; 0x68
 80040ee:	e7d9      	b.n	80040a4 <__sfp+0x1c>
 80040f0:	2104      	movs	r1, #4
 80040f2:	4638      	mov	r0, r7
 80040f4:	f7ff ff62 	bl	8003fbc <__sfmoreglue>
 80040f8:	4604      	mov	r4, r0
 80040fa:	6030      	str	r0, [r6, #0]
 80040fc:	2800      	cmp	r0, #0
 80040fe:	d1d5      	bne.n	80040ac <__sfp+0x24>
 8004100:	f7ff ff78 	bl	8003ff4 <__sfp_lock_release>
 8004104:	230c      	movs	r3, #12
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	e7ee      	b.n	80040e8 <__sfp+0x60>
 800410a:	bf00      	nop
 800410c:	080045e4 	.word	0x080045e4
 8004110:	ffff0001 	.word	0xffff0001

08004114 <_fwalk_reent>:
 8004114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004118:	4606      	mov	r6, r0
 800411a:	4688      	mov	r8, r1
 800411c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004120:	2700      	movs	r7, #0
 8004122:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004126:	f1b9 0901 	subs.w	r9, r9, #1
 800412a:	d505      	bpl.n	8004138 <_fwalk_reent+0x24>
 800412c:	6824      	ldr	r4, [r4, #0]
 800412e:	2c00      	cmp	r4, #0
 8004130:	d1f7      	bne.n	8004122 <_fwalk_reent+0xe>
 8004132:	4638      	mov	r0, r7
 8004134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004138:	89ab      	ldrh	r3, [r5, #12]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d907      	bls.n	800414e <_fwalk_reent+0x3a>
 800413e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004142:	3301      	adds	r3, #1
 8004144:	d003      	beq.n	800414e <_fwalk_reent+0x3a>
 8004146:	4629      	mov	r1, r5
 8004148:	4630      	mov	r0, r6
 800414a:	47c0      	blx	r8
 800414c:	4307      	orrs	r7, r0
 800414e:	3568      	adds	r5, #104	; 0x68
 8004150:	e7e9      	b.n	8004126 <_fwalk_reent+0x12>

08004152 <__retarget_lock_init_recursive>:
 8004152:	4770      	bx	lr

08004154 <__retarget_lock_acquire_recursive>:
 8004154:	4770      	bx	lr

08004156 <__retarget_lock_release_recursive>:
 8004156:	4770      	bx	lr

08004158 <__swhatbuf_r>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	460e      	mov	r6, r1
 800415c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004160:	2900      	cmp	r1, #0
 8004162:	b096      	sub	sp, #88	; 0x58
 8004164:	4614      	mov	r4, r2
 8004166:	461d      	mov	r5, r3
 8004168:	da07      	bge.n	800417a <__swhatbuf_r+0x22>
 800416a:	2300      	movs	r3, #0
 800416c:	602b      	str	r3, [r5, #0]
 800416e:	89b3      	ldrh	r3, [r6, #12]
 8004170:	061a      	lsls	r2, r3, #24
 8004172:	d410      	bmi.n	8004196 <__swhatbuf_r+0x3e>
 8004174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004178:	e00e      	b.n	8004198 <__swhatbuf_r+0x40>
 800417a:	466a      	mov	r2, sp
 800417c:	f000 f970 	bl	8004460 <_fstat_r>
 8004180:	2800      	cmp	r0, #0
 8004182:	dbf2      	blt.n	800416a <__swhatbuf_r+0x12>
 8004184:	9a01      	ldr	r2, [sp, #4]
 8004186:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800418a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800418e:	425a      	negs	r2, r3
 8004190:	415a      	adcs	r2, r3
 8004192:	602a      	str	r2, [r5, #0]
 8004194:	e7ee      	b.n	8004174 <__swhatbuf_r+0x1c>
 8004196:	2340      	movs	r3, #64	; 0x40
 8004198:	2000      	movs	r0, #0
 800419a:	6023      	str	r3, [r4, #0]
 800419c:	b016      	add	sp, #88	; 0x58
 800419e:	bd70      	pop	{r4, r5, r6, pc}

080041a0 <__smakebuf_r>:
 80041a0:	898b      	ldrh	r3, [r1, #12]
 80041a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041a4:	079d      	lsls	r5, r3, #30
 80041a6:	4606      	mov	r6, r0
 80041a8:	460c      	mov	r4, r1
 80041aa:	d507      	bpl.n	80041bc <__smakebuf_r+0x1c>
 80041ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	6123      	str	r3, [r4, #16]
 80041b4:	2301      	movs	r3, #1
 80041b6:	6163      	str	r3, [r4, #20]
 80041b8:	b002      	add	sp, #8
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	ab01      	add	r3, sp, #4
 80041be:	466a      	mov	r2, sp
 80041c0:	f7ff ffca 	bl	8004158 <__swhatbuf_r>
 80041c4:	9900      	ldr	r1, [sp, #0]
 80041c6:	4605      	mov	r5, r0
 80041c8:	4630      	mov	r0, r6
 80041ca:	f000 f879 	bl	80042c0 <_malloc_r>
 80041ce:	b948      	cbnz	r0, 80041e4 <__smakebuf_r+0x44>
 80041d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041d4:	059a      	lsls	r2, r3, #22
 80041d6:	d4ef      	bmi.n	80041b8 <__smakebuf_r+0x18>
 80041d8:	f023 0303 	bic.w	r3, r3, #3
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	81a3      	strh	r3, [r4, #12]
 80041e2:	e7e3      	b.n	80041ac <__smakebuf_r+0xc>
 80041e4:	4b0d      	ldr	r3, [pc, #52]	; (800421c <__smakebuf_r+0x7c>)
 80041e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80041e8:	89a3      	ldrh	r3, [r4, #12]
 80041ea:	6020      	str	r0, [r4, #0]
 80041ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f0:	81a3      	strh	r3, [r4, #12]
 80041f2:	9b00      	ldr	r3, [sp, #0]
 80041f4:	6163      	str	r3, [r4, #20]
 80041f6:	9b01      	ldr	r3, [sp, #4]
 80041f8:	6120      	str	r0, [r4, #16]
 80041fa:	b15b      	cbz	r3, 8004214 <__smakebuf_r+0x74>
 80041fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004200:	4630      	mov	r0, r6
 8004202:	f000 f93f 	bl	8004484 <_isatty_r>
 8004206:	b128      	cbz	r0, 8004214 <__smakebuf_r+0x74>
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	f023 0303 	bic.w	r3, r3, #3
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	81a3      	strh	r3, [r4, #12]
 8004214:	89a0      	ldrh	r0, [r4, #12]
 8004216:	4305      	orrs	r5, r0
 8004218:	81a5      	strh	r5, [r4, #12]
 800421a:	e7cd      	b.n	80041b8 <__smakebuf_r+0x18>
 800421c:	08003fb1 	.word	0x08003fb1

08004220 <_free_r>:
 8004220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004222:	2900      	cmp	r1, #0
 8004224:	d048      	beq.n	80042b8 <_free_r+0x98>
 8004226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800422a:	9001      	str	r0, [sp, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f1a1 0404 	sub.w	r4, r1, #4
 8004232:	bfb8      	it	lt
 8004234:	18e4      	addlt	r4, r4, r3
 8004236:	f000 f947 	bl	80044c8 <__malloc_lock>
 800423a:	4a20      	ldr	r2, [pc, #128]	; (80042bc <_free_r+0x9c>)
 800423c:	9801      	ldr	r0, [sp, #4]
 800423e:	6813      	ldr	r3, [r2, #0]
 8004240:	4615      	mov	r5, r2
 8004242:	b933      	cbnz	r3, 8004252 <_free_r+0x32>
 8004244:	6063      	str	r3, [r4, #4]
 8004246:	6014      	str	r4, [r2, #0]
 8004248:	b003      	add	sp, #12
 800424a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800424e:	f000 b941 	b.w	80044d4 <__malloc_unlock>
 8004252:	42a3      	cmp	r3, r4
 8004254:	d90b      	bls.n	800426e <_free_r+0x4e>
 8004256:	6821      	ldr	r1, [r4, #0]
 8004258:	1862      	adds	r2, r4, r1
 800425a:	4293      	cmp	r3, r2
 800425c:	bf04      	itt	eq
 800425e:	681a      	ldreq	r2, [r3, #0]
 8004260:	685b      	ldreq	r3, [r3, #4]
 8004262:	6063      	str	r3, [r4, #4]
 8004264:	bf04      	itt	eq
 8004266:	1852      	addeq	r2, r2, r1
 8004268:	6022      	streq	r2, [r4, #0]
 800426a:	602c      	str	r4, [r5, #0]
 800426c:	e7ec      	b.n	8004248 <_free_r+0x28>
 800426e:	461a      	mov	r2, r3
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	b10b      	cbz	r3, 8004278 <_free_r+0x58>
 8004274:	42a3      	cmp	r3, r4
 8004276:	d9fa      	bls.n	800426e <_free_r+0x4e>
 8004278:	6811      	ldr	r1, [r2, #0]
 800427a:	1855      	adds	r5, r2, r1
 800427c:	42a5      	cmp	r5, r4
 800427e:	d10b      	bne.n	8004298 <_free_r+0x78>
 8004280:	6824      	ldr	r4, [r4, #0]
 8004282:	4421      	add	r1, r4
 8004284:	1854      	adds	r4, r2, r1
 8004286:	42a3      	cmp	r3, r4
 8004288:	6011      	str	r1, [r2, #0]
 800428a:	d1dd      	bne.n	8004248 <_free_r+0x28>
 800428c:	681c      	ldr	r4, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	6053      	str	r3, [r2, #4]
 8004292:	4421      	add	r1, r4
 8004294:	6011      	str	r1, [r2, #0]
 8004296:	e7d7      	b.n	8004248 <_free_r+0x28>
 8004298:	d902      	bls.n	80042a0 <_free_r+0x80>
 800429a:	230c      	movs	r3, #12
 800429c:	6003      	str	r3, [r0, #0]
 800429e:	e7d3      	b.n	8004248 <_free_r+0x28>
 80042a0:	6825      	ldr	r5, [r4, #0]
 80042a2:	1961      	adds	r1, r4, r5
 80042a4:	428b      	cmp	r3, r1
 80042a6:	bf04      	itt	eq
 80042a8:	6819      	ldreq	r1, [r3, #0]
 80042aa:	685b      	ldreq	r3, [r3, #4]
 80042ac:	6063      	str	r3, [r4, #4]
 80042ae:	bf04      	itt	eq
 80042b0:	1949      	addeq	r1, r1, r5
 80042b2:	6021      	streq	r1, [r4, #0]
 80042b4:	6054      	str	r4, [r2, #4]
 80042b6:	e7c7      	b.n	8004248 <_free_r+0x28>
 80042b8:	b003      	add	sp, #12
 80042ba:	bd30      	pop	{r4, r5, pc}
 80042bc:	20000734 	.word	0x20000734

080042c0 <_malloc_r>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	1ccd      	adds	r5, r1, #3
 80042c4:	f025 0503 	bic.w	r5, r5, #3
 80042c8:	3508      	adds	r5, #8
 80042ca:	2d0c      	cmp	r5, #12
 80042cc:	bf38      	it	cc
 80042ce:	250c      	movcc	r5, #12
 80042d0:	2d00      	cmp	r5, #0
 80042d2:	4606      	mov	r6, r0
 80042d4:	db01      	blt.n	80042da <_malloc_r+0x1a>
 80042d6:	42a9      	cmp	r1, r5
 80042d8:	d903      	bls.n	80042e2 <_malloc_r+0x22>
 80042da:	230c      	movs	r3, #12
 80042dc:	6033      	str	r3, [r6, #0]
 80042de:	2000      	movs	r0, #0
 80042e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042e2:	f000 f8f1 	bl	80044c8 <__malloc_lock>
 80042e6:	4921      	ldr	r1, [pc, #132]	; (800436c <_malloc_r+0xac>)
 80042e8:	680a      	ldr	r2, [r1, #0]
 80042ea:	4614      	mov	r4, r2
 80042ec:	b99c      	cbnz	r4, 8004316 <_malloc_r+0x56>
 80042ee:	4f20      	ldr	r7, [pc, #128]	; (8004370 <_malloc_r+0xb0>)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	b923      	cbnz	r3, 80042fe <_malloc_r+0x3e>
 80042f4:	4621      	mov	r1, r4
 80042f6:	4630      	mov	r0, r6
 80042f8:	f000 f83c 	bl	8004374 <_sbrk_r>
 80042fc:	6038      	str	r0, [r7, #0]
 80042fe:	4629      	mov	r1, r5
 8004300:	4630      	mov	r0, r6
 8004302:	f000 f837 	bl	8004374 <_sbrk_r>
 8004306:	1c43      	adds	r3, r0, #1
 8004308:	d123      	bne.n	8004352 <_malloc_r+0x92>
 800430a:	230c      	movs	r3, #12
 800430c:	6033      	str	r3, [r6, #0]
 800430e:	4630      	mov	r0, r6
 8004310:	f000 f8e0 	bl	80044d4 <__malloc_unlock>
 8004314:	e7e3      	b.n	80042de <_malloc_r+0x1e>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	1b5b      	subs	r3, r3, r5
 800431a:	d417      	bmi.n	800434c <_malloc_r+0x8c>
 800431c:	2b0b      	cmp	r3, #11
 800431e:	d903      	bls.n	8004328 <_malloc_r+0x68>
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	441c      	add	r4, r3
 8004324:	6025      	str	r5, [r4, #0]
 8004326:	e004      	b.n	8004332 <_malloc_r+0x72>
 8004328:	6863      	ldr	r3, [r4, #4]
 800432a:	42a2      	cmp	r2, r4
 800432c:	bf0c      	ite	eq
 800432e:	600b      	streq	r3, [r1, #0]
 8004330:	6053      	strne	r3, [r2, #4]
 8004332:	4630      	mov	r0, r6
 8004334:	f000 f8ce 	bl	80044d4 <__malloc_unlock>
 8004338:	f104 000b 	add.w	r0, r4, #11
 800433c:	1d23      	adds	r3, r4, #4
 800433e:	f020 0007 	bic.w	r0, r0, #7
 8004342:	1ac2      	subs	r2, r0, r3
 8004344:	d0cc      	beq.n	80042e0 <_malloc_r+0x20>
 8004346:	1a1b      	subs	r3, r3, r0
 8004348:	50a3      	str	r3, [r4, r2]
 800434a:	e7c9      	b.n	80042e0 <_malloc_r+0x20>
 800434c:	4622      	mov	r2, r4
 800434e:	6864      	ldr	r4, [r4, #4]
 8004350:	e7cc      	b.n	80042ec <_malloc_r+0x2c>
 8004352:	1cc4      	adds	r4, r0, #3
 8004354:	f024 0403 	bic.w	r4, r4, #3
 8004358:	42a0      	cmp	r0, r4
 800435a:	d0e3      	beq.n	8004324 <_malloc_r+0x64>
 800435c:	1a21      	subs	r1, r4, r0
 800435e:	4630      	mov	r0, r6
 8004360:	f000 f808 	bl	8004374 <_sbrk_r>
 8004364:	3001      	adds	r0, #1
 8004366:	d1dd      	bne.n	8004324 <_malloc_r+0x64>
 8004368:	e7cf      	b.n	800430a <_malloc_r+0x4a>
 800436a:	bf00      	nop
 800436c:	20000734 	.word	0x20000734
 8004370:	20000738 	.word	0x20000738

08004374 <_sbrk_r>:
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4d06      	ldr	r5, [pc, #24]	; (8004390 <_sbrk_r+0x1c>)
 8004378:	2300      	movs	r3, #0
 800437a:	4604      	mov	r4, r0
 800437c:	4608      	mov	r0, r1
 800437e:	602b      	str	r3, [r5, #0]
 8004380:	f7fc fe8a 	bl	8001098 <_sbrk>
 8004384:	1c43      	adds	r3, r0, #1
 8004386:	d102      	bne.n	800438e <_sbrk_r+0x1a>
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	b103      	cbz	r3, 800438e <_sbrk_r+0x1a>
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	bd38      	pop	{r3, r4, r5, pc}
 8004390:	20000800 	.word	0x20000800

08004394 <__sread>:
 8004394:	b510      	push	{r4, lr}
 8004396:	460c      	mov	r4, r1
 8004398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800439c:	f000 f8a0 	bl	80044e0 <_read_r>
 80043a0:	2800      	cmp	r0, #0
 80043a2:	bfab      	itete	ge
 80043a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043a6:	89a3      	ldrhlt	r3, [r4, #12]
 80043a8:	181b      	addge	r3, r3, r0
 80043aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043ae:	bfac      	ite	ge
 80043b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80043b2:	81a3      	strhlt	r3, [r4, #12]
 80043b4:	bd10      	pop	{r4, pc}

080043b6 <__swrite>:
 80043b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ba:	461f      	mov	r7, r3
 80043bc:	898b      	ldrh	r3, [r1, #12]
 80043be:	05db      	lsls	r3, r3, #23
 80043c0:	4605      	mov	r5, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	4616      	mov	r6, r2
 80043c6:	d505      	bpl.n	80043d4 <__swrite+0x1e>
 80043c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043cc:	2302      	movs	r3, #2
 80043ce:	2200      	movs	r2, #0
 80043d0:	f000 f868 	bl	80044a4 <_lseek_r>
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043de:	81a3      	strh	r3, [r4, #12]
 80043e0:	4632      	mov	r2, r6
 80043e2:	463b      	mov	r3, r7
 80043e4:	4628      	mov	r0, r5
 80043e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ea:	f000 b817 	b.w	800441c <_write_r>

080043ee <__sseek>:
 80043ee:	b510      	push	{r4, lr}
 80043f0:	460c      	mov	r4, r1
 80043f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f6:	f000 f855 	bl	80044a4 <_lseek_r>
 80043fa:	1c43      	adds	r3, r0, #1
 80043fc:	89a3      	ldrh	r3, [r4, #12]
 80043fe:	bf15      	itete	ne
 8004400:	6560      	strne	r0, [r4, #84]	; 0x54
 8004402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800440a:	81a3      	strheq	r3, [r4, #12]
 800440c:	bf18      	it	ne
 800440e:	81a3      	strhne	r3, [r4, #12]
 8004410:	bd10      	pop	{r4, pc}

08004412 <__sclose>:
 8004412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004416:	f000 b813 	b.w	8004440 <_close_r>
	...

0800441c <_write_r>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	4d07      	ldr	r5, [pc, #28]	; (800443c <_write_r+0x20>)
 8004420:	4604      	mov	r4, r0
 8004422:	4608      	mov	r0, r1
 8004424:	4611      	mov	r1, r2
 8004426:	2200      	movs	r2, #0
 8004428:	602a      	str	r2, [r5, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	f7fc fde3 	bl	8000ff6 <_write>
 8004430:	1c43      	adds	r3, r0, #1
 8004432:	d102      	bne.n	800443a <_write_r+0x1e>
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	b103      	cbz	r3, 800443a <_write_r+0x1e>
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	bd38      	pop	{r3, r4, r5, pc}
 800443c:	20000800 	.word	0x20000800

08004440 <_close_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	4d06      	ldr	r5, [pc, #24]	; (800445c <_close_r+0x1c>)
 8004444:	2300      	movs	r3, #0
 8004446:	4604      	mov	r4, r0
 8004448:	4608      	mov	r0, r1
 800444a:	602b      	str	r3, [r5, #0]
 800444c:	f7fc fdef 	bl	800102e <_close>
 8004450:	1c43      	adds	r3, r0, #1
 8004452:	d102      	bne.n	800445a <_close_r+0x1a>
 8004454:	682b      	ldr	r3, [r5, #0]
 8004456:	b103      	cbz	r3, 800445a <_close_r+0x1a>
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	bd38      	pop	{r3, r4, r5, pc}
 800445c:	20000800 	.word	0x20000800

08004460 <_fstat_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4d07      	ldr	r5, [pc, #28]	; (8004480 <_fstat_r+0x20>)
 8004464:	2300      	movs	r3, #0
 8004466:	4604      	mov	r4, r0
 8004468:	4608      	mov	r0, r1
 800446a:	4611      	mov	r1, r2
 800446c:	602b      	str	r3, [r5, #0]
 800446e:	f7fc fdea 	bl	8001046 <_fstat>
 8004472:	1c43      	adds	r3, r0, #1
 8004474:	d102      	bne.n	800447c <_fstat_r+0x1c>
 8004476:	682b      	ldr	r3, [r5, #0]
 8004478:	b103      	cbz	r3, 800447c <_fstat_r+0x1c>
 800447a:	6023      	str	r3, [r4, #0]
 800447c:	bd38      	pop	{r3, r4, r5, pc}
 800447e:	bf00      	nop
 8004480:	20000800 	.word	0x20000800

08004484 <_isatty_r>:
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	4d06      	ldr	r5, [pc, #24]	; (80044a0 <_isatty_r+0x1c>)
 8004488:	2300      	movs	r3, #0
 800448a:	4604      	mov	r4, r0
 800448c:	4608      	mov	r0, r1
 800448e:	602b      	str	r3, [r5, #0]
 8004490:	f7fc fde9 	bl	8001066 <_isatty>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d102      	bne.n	800449e <_isatty_r+0x1a>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	b103      	cbz	r3, 800449e <_isatty_r+0x1a>
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	20000800 	.word	0x20000800

080044a4 <_lseek_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	4d07      	ldr	r5, [pc, #28]	; (80044c4 <_lseek_r+0x20>)
 80044a8:	4604      	mov	r4, r0
 80044aa:	4608      	mov	r0, r1
 80044ac:	4611      	mov	r1, r2
 80044ae:	2200      	movs	r2, #0
 80044b0:	602a      	str	r2, [r5, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	f7fc fde2 	bl	800107c <_lseek>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	d102      	bne.n	80044c2 <_lseek_r+0x1e>
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	b103      	cbz	r3, 80044c2 <_lseek_r+0x1e>
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
 80044c4:	20000800 	.word	0x20000800

080044c8 <__malloc_lock>:
 80044c8:	4801      	ldr	r0, [pc, #4]	; (80044d0 <__malloc_lock+0x8>)
 80044ca:	f7ff be43 	b.w	8004154 <__retarget_lock_acquire_recursive>
 80044ce:	bf00      	nop
 80044d0:	200007f8 	.word	0x200007f8

080044d4 <__malloc_unlock>:
 80044d4:	4801      	ldr	r0, [pc, #4]	; (80044dc <__malloc_unlock+0x8>)
 80044d6:	f7ff be3e 	b.w	8004156 <__retarget_lock_release_recursive>
 80044da:	bf00      	nop
 80044dc:	200007f8 	.word	0x200007f8

080044e0 <_read_r>:
 80044e0:	b538      	push	{r3, r4, r5, lr}
 80044e2:	4d07      	ldr	r5, [pc, #28]	; (8004500 <_read_r+0x20>)
 80044e4:	4604      	mov	r4, r0
 80044e6:	4608      	mov	r0, r1
 80044e8:	4611      	mov	r1, r2
 80044ea:	2200      	movs	r2, #0
 80044ec:	602a      	str	r2, [r5, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f7fc fd64 	bl	8000fbc <_read>
 80044f4:	1c43      	adds	r3, r0, #1
 80044f6:	d102      	bne.n	80044fe <_read_r+0x1e>
 80044f8:	682b      	ldr	r3, [r5, #0]
 80044fa:	b103      	cbz	r3, 80044fe <_read_r+0x1e>
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	bd38      	pop	{r3, r4, r5, pc}
 8004500:	20000800 	.word	0x20000800

08004504 <_init>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr

08004510 <_fini>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr
